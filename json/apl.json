{

"version": {
  "version-used": "<span style=\"color: gray\"><em>GNU APL 1.5</em></span>",
  "show-version": "$ apl <span style=\"white-space: pre-wrap;\">--</span>version"
},
"grammar-execution": {
  "hello-world": "$ cat hello.apl<br />\"Hello, World!\"<br />)OFF<br /><br />$ apl <span style=\"white-space: pre-wrap;\">--</span>script <span style=\"white-space: pre-wrap;\">--</span>noSV -f hello.apl<br />Hello, World!",
  "file-suffixes": "",
  "block-delimiters": "",
  "stmt-terminator": "",
  "eol-comment": "⍝ <span style=\"color: gray\"><em>comment</em></span><br /><br /><span style=\"color: gray\"><em>the standard name for</em> ⍝ <em>is \"lamp\"</em></span>",
  "multiple-line-comment": ""
},
"var-expr": {
  "case-sensitive": "<span style=\"color: gray\"><em>yes</em></span>",
  "var-types": "",
  "var-declaration": "",
  "undeclared-var-type": "",
  "primitive-type-stack": "",
  "assignment": "<span style=\"color: gray\">⍝ leftarrow: ←</span><br /><br />i ← 3",
  "null": "",
  "undefined-var-access": "<span style=\"color: gray\">VALUE ERROR</span>"
},
"arithmetic-logic": {
  "boolean-type": "<span style=\"color: gray\"><em>all values have same type</em></span>",
  "true-false": "1 0",
  "falsehoods": "0 0.0",
  "logical-op": "<span style=\"color: gray\">⍝ and: ∧<br />⍝ or:<span style=\"white-space: pre-wrap;\">  </span>∨<br />⍝ not: ~</span><br /><br />∧ ∨ ~",
  "relational-op": "<span style=\"color: gray\">⍝ match:<span style=\"white-space: pre-wrap;\">   </span>≡<br />⍝ unequal: ≠<br />⍝ aft:<span style=\"white-space: pre-wrap;\">     </span>≥<br />⍝ fore:<span style=\"white-space: pre-wrap;\">    </span>≤</span><br /><br />≡ ≠ &gt; &lt; ≥ ≤",
  "min-max": "<span style=\"color: gray\">⍝ minimum: ⌊<br />⍝ maximum: ⌈</span><br /><br />1 ⌊ 2 ⌊ 3<br />1 ⌈ 2 ⌈ 3<br /><br />⌊ / 1 2 3<br />⌈ / 1 2 3",
  "int-type": "<span style=\"color: gray\"><em>all values have same type</em></span>",
  "int-literal": "<span style=\"color: gray\">⍝ macron: ¯</span><br /><br />¯4",
  "float-type": "<span style=\"color: gray\"><em>all values have same type</em></span>",
  "arith-op": "<span style=\"color: gray\">⍝ times: ×</span><br /><span style=\"color: gray\">⍝ per:<span style=\"white-space: pre-wrap;\">   </span>÷</span><br /><br /><span style=\"white-space: pre-wrap;\">+ - × ÷</span>",
  "int-div": "",
  "int-div-zero": "<span style=\"color: gray\">DOMAIN ERROR</span>",
  "float-div": "3 ÷ 7",
  "float-div-zero": "<span style=\"color: gray\">DOMAIN ERROR</span>",
  "power": "2 * 32",
  "sqrt": "2 * 0.5",
  "sqrt-negative-one": "<span style=\"color: gray\">⍝ 0J1:</span><br /><br />¯1 * 0.5",
  "transcendental-func": "<span style=\"color: gray\">⍝ log:<span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>⍟<br />⍝ circle: ○</span><br /><br />* 2<br />⍟ 2<br />10 ⍟ 2<br />1 ○ 2<br />2 ○ 2<br />3 ○ 2<br />¯1 ○ 0.5<br />¯2 ○ 0.5<br />¯3 ○ 0.5<br /><span style=\"color: gray\"><em>??</em></span>",
  "transcendental-const": "* 1<br />○ 1",
  "float-truncation": "<span style=\"color: gray\"><em>??</em></span><br /><span style=\"color: gray\"><em>??</em></span><br />⌈ 3.7<br />⌊ 3.7<br /><br /><span style=\"color: gray\">⍝ ceiling: ⌈<br />⍝ floor: ⌊</span>",
  "absolute-val": "<span style=\"white-space: pre-wrap;\">| ¯7</span><br /><span style=\"white-space: pre-wrap;\">| ¯7.77</span>",
  "complex-type": "<span style=\"color: gray\"><em>all values have same type</em></span>",
  "complex-construction": "0J1<br />0J2<br />0J3",
  "complex-decomposition": "z ← 3J2<br /><br />(z + + z) ÷ 2<br />| (z - + z) ÷ 2<br /><span style=\"color: gray\"><em>??</em></span><br />| z<br /><span style=\"white-space: pre-wrap;\">+</span> z",
  "random-num": "<span style=\"color: gray\">⍝ random integer from 1 to 100:</span><br />? 100",
  "random-seed": "⎕RL ← 17",
  "bit-op": ""
},
"str": {
  "str-type": "",
  "str-literal": "'don''t say \"no\"'",
  "newline-in-str-literal": "",
  "str-literal-esc": "",
  "convert-string-to-numeric": "<span style=\"color: gray\">⍝ execute: ⍎</span><br /><br />⍎ '4'",
  "convert-numeric-to-string": "",
  "split": "",
  "join<br-/>": ", / 'foo' 'bar' 'baz'",
  "concatenate": "'hello' , ' world'",
  "replicate": "",
  "substring": "",
  "index": "",
  "sprintf": "",
  "uppercase": "",
  "lowercase": "",
  "trim": "",
  "length<br-/>": "⍴ 'hello'",
  "character-access": "",
  "chr-and-ord": ""
},
"dates-time": {
  "current-local-date-time": "<span style=\"color: gray\">⍝ array of 7 integers: yyyy, mm, dd, hh24, mi, ss, ms</span><br />⎕TS",
  "sleep": "<span style=\"color: gray\"><em>none</em></span>",
  "cpu-usage": "<span style=\"color: gray\"><em>none</em></span>"
},
"arrays": {
  "allocate-array-on-stack": "<span style=\"color: gray\"><em>none</em></span>",
  "allocate-array-on-heap": "<span style=\"color: gray\"><em>all data is stored on heap</em></span>",
  "free-array-on-heap": "<span style=\"color: gray\"><em>none; memory is garbage collected</em></span>",
  "array-literal": "a ← 1 2 3",
  "array-size": "<span style=\"color: gray\">⍝ rho: ⍴</span><br /><br />⍴ a",
  "array-lookup": "a ← 7 8 9 10<br /><br />a[2]<br />(7 8 9 10)[2]<br /><br /><span style=\"color: gray\">⍝ change index origin from 1 to 0:</span><br />⎕IO ← 0",
  "array-update": "a[1] ← 8",
  "array-out-of-bounds": "INDEX ERROR",
  "array-element-index": "<span style=\"color: gray\">⍝ evaluates to 2:</span><br />7 8 9 ⍳ 8",
  "slice-array": "<span style=\"color: gray\">⍝ 7 8:</span><br /><br />a ← 7 8 9 10<br />1 ↓ 3 ↑ a",
  "slice-array-to-end": "<span style=\"color: gray\">⍝ 8 9 10:</span><br /><br />a ← 7 8 9 10<br />1 ↓ a",
  "array-back": "a ← 7 8 9 10<br /><br /><span style=\"color: gray\">⍝ 10:</span><br />¯1 ↑ a<br /><br /><span style=\"color: gray\">⍝ set a to 7 8 9:</span><br />a ← ¯1 ↓ a<br /><br /><span style=\"color: gray\">⍝ set a to 7 8 9 11:</span><br />a ← a , 11",
  "array-front": "a ← 7 8 9 10<br /><br /><span style=\"color: gray\">⍝ 6:</span><br />1 ↑ a<br /><br /><span style=\"color: gray\">⍝ set a to 8 9 10:</span><br />a ← 1 ↓ a<br /><br /><span style=\"color: gray\">⍝ set a to 6 8 9 10:</span><br />a ← 6 , a",
  "concatenate-array": "1 2 3 , 4 5 6",
  "array-replicate": "<span style=\"color: gray\">⍝ 10 zeros:</span><br />10 / 0",
  "copy-array": "a ← 1 2 3<br />b ← a<br /><span style=\"color: gray\">⍝ does not modify a:</span><br />b[1] ← 4",
  "iterate-over-array": "",
  "sort-array": "a ← 8 7 10 9<br />a[⍋ a]",
  "reduce": "+ / 1 2 3<br /><br /><span style=\"color: gray\">⍝ 2:</span><br />- / 1 2 3"
},
"arithmetic-sequences": {
  "arith-seq-diff-one": "<span style=\"color: gray\">⍝ iota: ⍳</span><br /><br />⍳ 100",
  "arith-seq-diff-ten": "<span style=\"color: gray\">⍝ 0, 10, <span style=\"white-space: pre-wrap;\">...</span>, 100:</span><br /><br />10 × ( ⍳ 11 ) - 1",
  "arith-seq-diff-tenth": "<span style=\"color: gray\">⍝ 0.0, 0.1, <span style=\"white-space: pre-wrap;\">...</span>, 10.0</span><br /><br />.1 × ( ⍳ 101 ) - 1"
},
"func": {
  "def-func": "<span style=\"color: gray\">⍝ define dyadic operator:</span><br />∇r ← a add b<br />r ← a + b ∇<br /><br /><span style=\"color: gray\">⍝ define monadic operator:</span><br />∇r ← double n<br />r ← 2 × n ∇",
  "invoke-func": "3 add 7<br />double 7",
  "forward-decl-func": "",
  "overload-func": "",
  "nest-func": "",
  "missing-arg": "",
  "extra-arg": "",
  "default-val-param": "",
  "variable-num-arg": "",
  "named-param": "",
  "pass-by-val": "",
  "pass-by-addr": "",
  "pass-by-ref": "",
  "retval": "",
  "no-retval": "",
  "multiple-retval": "",
  "named-retval": "",
  "anonymous-func-literal": "",
  "func-private-state": "",
  "func-as-val": ""
},
"exec-control": {
  "for": "",
  "if": "",
  "while": "",
  "switch": "",
  "break-continue": ""
},
"file-handles": {
  "std-file-handles": "",
  "read-line-stdin": "",
  "write-line-stdout": "",
  "printf": "",
  "open-file": "",
  "open-file-write": "",
  "close-file": "",
  "io-err": "",
  "read-line": "",
  "file-line-iterate": "",
  "read-file-array": "",
  "read-file-str": "",
  "write-str": "",
  "write-line": "",
  "flush": "",
  "eof-test": "",
  "seek": "",
  "tmp-file": ""
},
"processes-environment": {
  "cmd-line-arg": "⎕ARG",
  "env-var": "<span style=\"color: gray\">⍝ quad: ⎕</span><br /><br />⎕ENV 'HOME'<br /><br /><span style=\"color: gray\">⍝ returns n by 2 array containing all environment<br />⍝ variable names and their values:</span><br />⎕ENV ''",
  "exit": ")OFF"
},
"vectors": {
  "vector-literal": "<span style=\"color: gray\">⍝ same as array:</span><br />1 2 3",
  "element-wise-arithmetic-operators": "+ - × ÷",
  "result-of-vector-length-mismatch": "LENGTH ERROR",
  "scalar-multiplication": "3 × 1 2 3<br />1 2 3 × 3",
  "dot-product": "1 1 1 + . × 2 2 2"
},
"matrices": {
  "matrix-literal-or-constructor": "<span style=\"color: gray\">⍝ row-major order:</span><br />A ← 2 2 ⍴ 1 2 3 4",
  "constant-matrices": "3 3 ⍴ 0<br />3 3 ⍴ 1",
  "diagonal-matrices": "<span style=\"color: gray\">⍝ 3×3 identity:</span><br />I ← 3 3 ⍴ 1 , 3 ⍴ 0<br />D ← I + . × 1 2 3",
  "matrix-dim": "A ← 2 3 ⍴ 1 2 3 4 5 6<br /><br />⍴ A",
  "matrix-elem-access": "A ← 2 2 ⍴ 1 2 3 4<br /><span style=\"color: gray\">⍝ 1:</span><br />A[1; 1]",
  "matrix-row-access": "A ← 2 2 ⍴ 1 2 3 4<br /><span style=\"color: gray\">⍝ 1 2:</span><br />A[1; ]",
  "matrix-column-access": "A ← 2 2 ⍴ 1 2 3 4<br /><span style=\"color: gray\">⍝ 1 3:</span><br />A[; 1]",
  "matrix-scalar-multiplication": "A ← 2 2 ⍴ 1 2 3 4<br />3 × A<br />A × 3",
  "matrix-elem-wise-op": "+ - × ÷",
  "marix-transpose": "A ← 2 2 ⍴ 1 2 3 4<br /><br /><span style=\"color: gray\">⍝ cant: ⍉<br />⍉ A</span>",
  "multiplication": "A ← 2 2 ⍴ 1 2 3 4<br />B ← 2 2 ⍴ 4 3 2 1<br />A + . × B",
  "matrix-inverse": "A ← 2 2 ⍴ 1 2 3 4<br />gray|⍝ inverse: ⌹##<br />⌹ A"
}
}
