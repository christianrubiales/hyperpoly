{
"version": {
  "version-used": "<span style=\"color: gray\"><em>SML NJ 110</em></span>",
  "version": "<span style=\"color: gray\"><em>displayed at startup</em></span>"
},
"grammar-execution": {
  "interpreter": "",
  "shebang": "",
  "bytecode-compiler-interpreter": "",
  "native-compiler": "",
  "library-always-imported": "",
  "statement-terminator": ";",
  "blocks": "( <span style=\"color: gray\"><em>expr</em></span> ; <span style=\"color: gray\"><em>…</em></span> )",
  "end-of-line-comment": "<span style=\"color: gray\"><em>none</em></span>",
  "multiple-line-comment": "(* <span style=\"color: gray\"><em>comment</em></span><br /><span style=\"color: gray\"><em>another comment</em></span> *)"
},
"var-expr": {
  "value": "val a = 3;",
  "variable": "val a = ref 3;<br />a := 4;<br />!a + 7;",
  "unit": "unit<br />()",
  "conditional-expression": "val x = 3;<br />if x &lt; 0 then ~x else x;",
  "branch-type-mismatch": "<span style=\"color: gray\">(* compilation error: *)</span><br />if true then \"hello\" else 3;",
  "null": "NONE",
  "nullable-type": "type list_option_int = int option list;<br /><br />val list = [SOME 3,NONE, SOME ~4];",
  "null-test": "",
  "coalesce": "val foo = SOME 3;<br /><br /><span style=\"color: gray\">(* raises exception if NONE: *)</span><br />valOf foo;<br /><br /><span style=\"color: gray\">(* evaluates to 0 if NONE: *)</span><br />getOpt (foo, 0);",
  "nullif": "",
  "expr-type-declaration": "",
  "let-in": "val z =<br />let<br /><span style=\"white-space: pre-wrap;\">  </span>val x = 3.0<br /><span style=\"white-space: pre-wrap;\">  </span>val y = 2.0 * x<br />in<br /><span style=\"white-space: pre-wrap;\">  </span>x * y<br />end;",
  "where": "<span style=\"color: gray\"><em>none</em></span>"
},
"arithmetic-logic": {
  "boolean-type": "bool",
  "true-false": "true false",
  "logical-op": "andalso orelse not",
  "relational-op": "<span style=\"white-space: pre-wrap;\">=</span> &lt;&gt; &lt; &gt; &lt;= &gt;=",
  "min-max": "",
  "int-type": "int",
  "int-literal": "<span style=\"color: gray\">negative integer:</span><em><br />~4</em>",
  "float-type": "real",
  "int-op": "+ - * div mod",
  "float-op": "+ - * /",
  "add-int-float": "real 3 + 7.0;",
  "int-div": "7 div 3<br />7 mod 3<br />real 7 / real 3",
  "int-div-zero": "",
  "float-div": "",
  "float-div-zero": "",
  "power": "Math.pow (2.0, 32.0);",
  "sqrt": "Math.sqrt 2.0",
  "sqrt-negative-one": "<span style=\"color: gray\"><em>Math.sqrt ~1.0 evaluates to</em> nan</span>",
  "transcendental-func": "Math.exp Math.ln<br />Math.sin Math.cos Math.tan<br />Math.asin Math.acos Math.atan<br />Math.atan2",
  "transcendental-const": "Math.pi<br />Math.e",
  "float-truncation": "round 3.14<br />trunc 3.14<br />floor 3.14<br />ceil 3.14",
  "abs-val": "",
  "int-overflow": "<span style=\"color: gray\"><em>Overflow exception</em></span>",
  "float-overflow": "",
  "arbitrary-len-int": "",
  "arbitrary-len-int-op": "",
  "rational-type": "",
  "rational-construction": "",
  "rational-decomposition": "",
  "complex-type": "",
  "complex-const": "",
  "complex-op": "",
  "complex-construction": "",
  "complex-decomposition": "",
  "random-num": "",
  "random-seed": "",
  "bit-op": "",
  "binary-octal-hex-literals": "",
  "radix": ""
},
"str": {
  "str-type": "string",
  "str-literal": "\"Hello, World!\"",
  "newline-in-str-literal": "",
  "str-esc": "\\000 \\a \\b \\f \\n \\r \\t \\v \\040",
  "format-str": "",
  "str-concat": "\"Hello\" ^ \", \" ^ \"World!\"",
  "str-replicate": "",
  "translate-case": "",
  "capitalize": "",
  "trim": "",
  "pad": "",
  "num-to-str": "",
  "str-to-num": "Int.toString 3<br />Real.toString 3.14",
  "join": "",
  "split": "",
  "char-type": "char",
  "char-literal": "#\"h\"",
  "str-len": "size \"hello\"",
  "index-substr": "",
  "substr": "substring (\"hello\",0,4)",
  "extract-char": "String.sub (\"hello\", 0)",
  "chr-ord": "ord #\"a\"<br />chr 97"
},
"dates-time": {
  "dates-time-types": "",
  "current-date-time": "",
  "current-unix-epoch": ""
},
"arrays": {
  "literal": "",
  "size": "",
  "lookup": "",
  "update": "",
  "out-of-bounds": ""
},
"lists": {
  "list-literal": "[1, 2, 3]",
  "empty-list": "",
  "empty-list-test": "",
  "cons": "1 :: [2, 3]",
  "head": "List.hd [1, 2, 3]",
  "tail": "List.tl [1, 2, 3]",
  "head-tail-empty-list": "",
  "list-length": "List.length [1, 2, 3]",
  "nth-elem-of-list": "List.nth ([1, 2, 3], 0)",
  "list-elem-index": "",
  "update-list": "",
  "concat-list": "[1, 2] @ [3, 4]<br />List.concat [[1, 2], [3, 4]]",
  "list-last": "",
  "list-take": "",
  "list-drop": "",
  "iterate-over-list": "fun f i = print ((Int.toString i) ^ \"\\n\");<br />List.app f [1, 2, 3];",
  "reverse-list": "List.rev [1, 2, 3]",
  "sort-list": "",
  "map-list": "List.map (fn (x) =&gt; x + 2) [1, 2, 3];",
  "filter-list": "List.filter (fn (x) =&gt; x &gt; 2) [1, 2, 3];",
  "fold-list-left": "List.foldl (op +) 0 [1, 2, 3];",
  "fold-list-right": "",
  "list-member": "",
  "universal-test-list": "",
  "existential-test-list": "",
  "zip-list": ""
},
"tuples": {
  "tuple-literal": "(1, \"hello\", true)",
  "tuple-lookup": "#1 (1, \"hello\", true)",
  "pair-lookup": "#1 (12,\"December\")<br />#2 (12,\"December\")"
},
"dictionaries": {
},
"functions": {
  "def-func": "fun average a b = ( a + b ) / 2.0;",
  "invoke-func": "",
  "named-parameter": "",
  "named-parameter-default-value": "",
  "piecewise-defined-function": "val to_s = fn Red =&gt; \"red\"<br /><span style=\"white-space: pre-wrap;\">  </span>| Green =&gt; \"green\"<br /><span style=\"white-space: pre-wrap;\">  </span>| Blue =&gt; \"blue\";",
  "recursive-function": "fun range a b =<br /><span style=\"white-space: pre-wrap;\">  </span>if a &gt; b then []<br /><span style=\"white-space: pre-wrap;\">  </span>else a :: range (a + 1) b;",
  "mutually-recursive-functions": "",
  "anonymous-function": "fn x =&gt; fn y =&gt; (x + y) / 2.0",
  "infix-operator-in-prefix-position": "(op * ) (3, 4)",
  "function-in-infix-position": "",
  "currying": "un plus x y = x + y;<br />val plus2 = plus 2;<br />plus2 7;",
  "composition": "",
  "function-composition-operator": "fun double x = 2 * x;<br />val quadruple = double o double;",
  "lazy-evaluation": "",
  "strict-evaluation": ""
},
"execution-control": {
  "if": "f x &gt; 0 then<br /><span style=\"white-space: pre-wrap;\">  </span>print \"pos\\n\"<br />else<br /><span style=\"white-space: pre-wrap;\">  </span>();",
  "if-else-if-else": "if x &gt; 0 then print \"pos\" else if x &lt; 0 then print \"neg\" else print \"zero\";",
  "sequencing": "",
  "while": "",
  "for": "",
  "for-in-reverse": "",
  "list-iteration": "",
  "loop": ""
},
"exceptions": {
  "raise-error": "",
  "handle-error": "",
  "type-of-exceptions": "",
  "user-defined-exception": "",
  "standard-exceptions": "",
  "assert": ""
},
"concurrency": {
},
"file-handles": {
  "standard-file-handles": "",
  "read-line-from-stdin": "",
  "end-of-file-behavior": "",
  "chomp": "",
  "write-line-to-stdout": "",
  "write-formatted-string-to-stdout": "",
  "open-file-for-reading": "",
  "open-file-for-writing": "",
  "open-file-for-appending": "",
  "close-file": "",
  "i/o-errors": "",
  "read-line": "fun displayFile(file: string) =<br /><span style=\"white-space: pre-wrap;\">  </span>let<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>val f = TextIO.openIn file<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>fun iter(s: string option) =<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>case s of<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>NONE =&gt;<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>(TextIO.closeIn f)<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>| SOME(line) =&gt;<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>(print line;<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>iter(TextIO.inputLine f))<br /><span style=\"white-space: pre-wrap;\">  </span>in<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>iter(TextIO.inputLine f)<br /><span style=\"white-space: pre-wrap;\">  </span>end<br />displayFile(\"/etc/passwd\");",
  "iterate-over-file-by-line": "",
  "read-file-into-array-of-strings": "",
  "read-file-into-string": "",
  "write-string": "",
  "write-line": "val file = \"/tmp/test-sml\";<br />val f = TextIO.openOut file;<br />TextIO.output(f, \"hello out\\n\");<br />TextIO.closeOut f;",
  "flush-file-handle": "",
  "end-of-file-test": "",
  "get-and-set-filehandle-position": ""
},
"files": {
  "file-test,-regular-file-test": "",
  "file-size": "",
  "is-file-readable,-writable,-executable": "",
  "set-file-permissions": "",
  "copy-file,-remove-file,-rename-file": "",
  "create-symlink,-symlink-test,-readlink": "",
  "generate-unused-file-name": ""
},
"directories": {
  "build-pathname": "",
  "dirname-and-basename": "",
  "iterate-over-directory-by-file": "",
  "make-directory": "",
  "remove-empty-directory": "",
  "remove-directory-and-contents": "",
  "directory-test": "",
  "temporary-directory": ""
},
"processes-environment": {
  "command-line-arguments": "",
  "program-name": "",
  "getopt": "",
  "env-var": "",
  "pid": "",
  "user-id-name": "",
  "exit": "",
  "signal-handler": "",
  "external-cmd": "",
  "escaped-external-cmd": "",
  "backticks": ""
},
"libraries-namespaces": {
  "namespace-example": "",
  "namespaces": "",
  "file-name-restrictions": "",
  "namespace": "",
  "namespace-creation": "",
  "namespace-alias": "",
  "namespace-separator": "",
  "subnamespace": "",
  "pkg-manager-setup": "",
  "pkg-manager": "",
  "pkg-compile": ""
},
"user-defined-types": {
  "type-synonym": "type name = string;",
  "sum-type": "datatype color = Red | Green | Blue;",
  "tuple-product-type-with-one-field": "datatype special_int = SpecialInt of int;<br /><br />val x = SpecialInt 7;",
  "tuple-product-type-with-two-fields": "datatype int_pair = IntPair of int * int;<br /><br />val y = IntPair (7, 11);",
  "record-product-type": "type customer = {id:int, name:string, address:string}",
  "record-product-type-literal": "{id=7, name=\"John\", address=\"Topeka, KS\"}",
  "generic-type": "datatype ('a, 'b) twosome =<br /><span style=\"white-space: pre-wrap;\">  </span>Twosome of 'a * 'b;<br /><br />val z = Twosome (\"pi\", 3.14);",
  "recursive-type": "datatype binary_tree =<br /><span style=\"white-space: pre-wrap;\">  </span>Leaf of int<br /><span style=\"white-space: pre-wrap;\">  </span>| Tree of binary_tree * binary_tree;",
  "pattern-match-sum-type": "val c = Red;<br /><br />case c of Red =&gt; \"red\"<br /><span style=\"white-space: pre-wrap;\">  </span>| Blue =&gt; \"blue\"<br /><span style=\"white-space: pre-wrap;\">  </span>| Green =&gt; \"green\";",
  "pattern-match-product-type": "",
  "pattern-match-guard": "<span style=\"color: gray\"><em>none; use</em> if</span>",
  "pattern-match-catchall": "fun to_s c = case c of Red =&gt; \"red\" | _ =&gt; \"not red\";"
},
"objects": {
  "class-definition": "",
  "object-creation": "",
  "method-invocation": "",
  "field-access": ""
},
"inheritance-polymorphism": {
  "overload-function": "",
  "inheritance": ""
},
"net-web": {
},
"unit-tests": {
},
"debugging-profiling": {
},
"repl": {
  "invoke-repl": "$ sml",
  "repl-limitations": "",
  "repl-last-value": "it",
  "help": "",
  "quit": "",
  "inspect-type": "",
  "inspect-namespace": "",
  "load-source-file": "use \"hello.ml\";",
  "load-package": "",
  "search-path": "",
  "set-search-path-on-command-line": ""
}
}
