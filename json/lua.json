{

"version": {
  "version-used": "<span style=\"color: gray\"><em>5.1</em></span>",
  "show-version": "$ lua -v",
  "implicit-prologue": ""
},
"grammar-execution": {
  "interpreter": "$ lua foo.lua",
  "repl": "$ lua",
  "cmd-line-program": "$ lua -e 'print(\"hi world!\")'",
  "block-delimiters": "do end",
  "stmt-separator": "<span style=\"color: gray\"><em>newline or</em> ;</span><br /><br /><span style=\"color: gray\"><em>newline not separator inside {}, (), or after binary operator.<br /><br />newline can be put in \"\" or '' if preceded by backslash</em></span>",
  "expr-stmt": "<span style=\"color: gray\"><em>no</em></span>",
  "source-code-encoding": "",
  "eol-comment": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">--</span> comment</span>",
  "multiple-line-comment": "<span style=\"white-space: pre-wrap;\">--</span>[[<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>commented out</em></span><br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>also commented out</em></span><br />]]"
},
"variables-expressions": {
  "local-var": "local x = 1",
  "local-scope-region": "",
  "global-var": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">--</span> assign without using local</span><br />g = 1<br /><br />function incr_global()<br /><span style=\"white-space: pre-wrap;\">  </span>g = g + 1<br />end",
  "const": "",
  "assignment": "x = 1",
  "parallel-assignment": "x, y, z = 1, 2, 3<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">--</span> 3 is discarded:</span><br />x, y = 1, 2, 3<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">--</span> z is set to nil:</span><br />x, y, z = 1, 2",
  "swap": "x, y = y, x",
  "compound-assignment": "",
  "incr-decr": "",
  "null": "nil",
  "null-test": "v == nil",
  "undef-var": "nil",
  "conditional-expr": "<span style=\"color: gray\"><em>none</em></span>"
},
"arithmetic-logic": {
  "true-false": "true false",
  "falsehoods": "false nil",
  "logical-op": "and or not",
  "relational-expr": "x &gt; 3",
  "relational-op": "== ~= &lt; &gt; &gt;= &lt;=",
  "min-max": "math.min(1, 2, 3)<br />math.max(1, 2, 3)<br /><br />math.min(unpack({1 ,2 ,3}))<br />math.max(unpack({1, 2, 3}))",
  "three-val-comparison": "",
  "arith-expr": "1 + 3",
  "arith-op": "+ - * / <span style=\"color: gray\"><em>none</em></span> % ^",
  "int-div": "math.floor(x / y)",
  "int-div-zero": "<span style=\"color: gray\"><em>returns assignable value</em> inf, nan, or -inf <em>depending upon whether dividend is positive, zero, or negative.<br /><br />There are no literals for any of these values.</em></span>",
  "float-div": "x / y",
  "float-div-zero": "<span style=\"color: gray\"><em>same behavior as for integers</em></span>",
  "power": "2 ^ 32<br />math.pow(2, 32)",
  "sqrt": "math.sqrt(2)",
  "sqrt-negative-one": "nan",
  "transcendental-func": "math.exp math.log math.sin math.cos math.tan math.asin math.acos math.atan math.atan2",
  "transcendental-const": "math.pi<br />math.exp(1)",
  "float-truncation": "<span style=\"color: gray\"><em>none</em></span><br /><span style=\"color: gray\"><em>none</em></span><br />math.floor(3.1)<br />math.ceil(3.1)",
  "absolute-val": "math.abs(-3)",
  "int-overflow": "<span style=\"color: gray\"><em>all numbers are floats</em></span>",
  "float-overflow": "inf",
  "rational-construction": "",
  "rational-decomposition": "",
  "complex-construction": "",
  "complex-decomposition": "",
  "random-num": "math.random(100) - 1<br />math.random()<br /><span style=\"color: gray\"><em>none</em></span>",
  "random-seed": "math.randomseed(17)",
  "bit-op": "<span style=\"color: gray\"><em>none</em></span>",
  "binary-oct-hex-literals": "",
  "radix": ""
},
"strings": {
  "str-literal": "\"don't say \\\"no\\\"\"<br />'don\\'t say \"no\"'",
  "str-literal-newline": "<span style=\"color: gray\"><em>yes, if preceded by backslash</em></span>",
  "char-esc": "<span style=\"color: gray\"><em>single and double quotes:</em></span><br />\\a \\b \\f \\n \\r \\t \\v \\\" \\' \\\\ \\<span style=\"color: gray\"><em>ddd</em></span>",
  "here-doc": "<span style=\"color: gray\"><em>none</em></span>",
  "var-interpolation": "<span style=\"color: gray\"><em>none</em></span>",
  "expr-interpolation": "<span style=\"color: gray\"><em>none</em></span>",
  "str-concat": "s = \"Hello, \" .. \"World!\"",
  "str-replicate": "string.rep(\"-\", 80)",
  "sprintf": "string.format(\"lorem %s %d %.2f\", \"ipsum\", 13, 3.7)",
  "case": "string.upper(\"lorem\")<br />string.lower(\"LOREM\")",
  "capitalize": "<span style=\"color: gray\"><em>none</em></span><br /><span style=\"color: gray\"><em>none</em></span>",
  "trim": "<span style=\"color: gray\"><em>none</em></span>",
  "pad": "<span style=\"color: gray\"><em>none</em></span>",
  "str-to-num": "7 + tonumber(\"12\")<br />73.9 + tonumber(\".037\")<br /><span style=\"color: gray\"><em>arithmetic operators attempt numeric conversion of string operands</em></span>",
  "num-to-str": "\"value: \" .. 8",
  "join": "table.concat({\"do\", \"re\", \"mi\"}, \" \")",
  "split": "<span style=\"color: gray\"><em>none</em></span>",
  "split-in-two": "",
  "split-keep-delimiters": "",
  "str-length": "string.len(\"lorem\")",
  "index-substr": "string.find(\"lorem ipsum\", \"ipsum\")",
  "extract-substr": "string.sub(\"lorem ipsum\", 7, 11)",
  "lookup-char": "",
  "chr-ord": "string.char(65)<br />string.byte(\"A\")",
  "str-to-char-array": "",
  "translate-char": "",
  "delete-char": "",
  "squeeze-char": ""
},
"regexes": {
  "regex-literal": "",
  "char-class-abbrev": "<span style=\"color: gray\"><em>char class abbrevs:</em></span><br />. %a %c %d %l %p %s %u %w %x %z<br /><br /><span style=\"color: gray\"><em>anchors:</em></span> ^ $",
  "regex-anchors": "",
  "regex-match": "if string.match(s, \"1999\") then<br /><span style=\"white-space: pre-wrap;\">  </span>print(\"party!\")<br />end",
  "case-insensitive-regex": "<span style=\"color: gray\"><em>none</em></span>",
  "regex-modifiers": "<span style=\"color: gray\"><em>none</em></span>",
  "subst": "s = \"do re mi mi mi\"<br />s = string.gsub(s, \"mi\", \"ma\")",
  "match-prematch-postmatch": "",
  "group-capture": "s = \"2010-06-03\"<br />rx = \"(%d+)-(%d+)-(%d+)\"<br />yr, mo, dy = string.match(s, rx)",
  "named-group-capture": "",
  "scan": "",
  "backreference": "string.match(\"do do\", \"(%w+) %1\")<br /><br />rx = \"(%w+) (%w+)\"<br />string.gsub(\"do re\", rx, \"%2 %1\")",
  "recursive-regex": ""
},
"dates-time": {
  "date-time-type": "",
  "current-date-time": "t = os.time()",
  "unix-epoch": "t<br />t2 = 1315716177",
  "current-unix-epoch": "",
  "strftime": "os.date(\"%Y-%m-%d %H:%M:%S\", t)",
  "strptime": "<span style=\"color: gray\"><em>none</em></span>",
  "parse-date": "<span style=\"color: gray\"><em>none</em></span>",
  "get-date-parts": "<span style=\"color: gray\"><em>none</em></span>",
  "get-time-parts": "<span style=\"color: gray\"><em>none</em></span>",
  "date-from-parts": "<span style=\"color: gray\"><em>none</em></span>",
  "date-subtraction": "",
  "add-time-duration": "",
  "local-tmz": "",
  "tmz-offset": "",
  "microseconds": "",
  "sleep": "<span style=\"color: gray\"><em>none</em></span>",
  "timeout": ""
},
"arrays": {
  "array-literal": "a = { 1, 2, 3, 4 }",
  "quote-words": "",
  "array-size": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">--</span> not well-defined if array<br /><span style=\"white-space: pre-wrap;\">--</span> contains nil values:</span><br /># a",
  "array-lookup": "a[1]",
  "array-update": "a[1] = \"lorem\"",
  "array-out-of-bounds": "<span style=\"color: gray\"><em>returns</em> nil</span>",
  "array-element-index": "<span style=\"color: gray\"><em>none; use</em> for <em>and</em> ipairs</span>",
  "array-slice": "<span style=\"color: gray\"><em>none</em></span>",
  "array-slice-to-end": "<span style=\"color: gray\"><em>none</em></span>",
  "array-back": "a = {6, 7, 8}<br />table.insert(a, 9)<br />i = table.remove(a)",
  "array-front": "a = {6, 7, 8}<br />table.insert(a, 1, 5)<br />i = table.remove(a, 1)",
  "array-concat": "<span style=\"color: gray\"><em>none</em></span>",
  "array-replicate": "<span style=\"color: gray\"><em>none</em></span>",
  "array-copy": "",
  "array-arg": "",
  "array-iter": "for k,v in ipairs(a) do<br /><span style=\"white-space: pre-wrap;\">  </span>print(v)<br />end",
  "range-iteration": "",
  "range-array": "",
  "array-reverse": "<span style=\"color: gray\"><em>none</em></span>",
  "array-sort": "a = {3, 1, 4, 2}<br />table.sort(a)",
  "array-dedupe": "<span style=\"color: gray\"><em>none</em></span>",
  "membership": "<span style=\"color: gray\"><em>none</em></span>",
  "intersection": "<span style=\"color: gray\"><em>none</em></span>",
  "union": "<span style=\"color: gray\"><em>none</em></span>",
  "set-diff": "<span style=\"color: gray\"><em>none</em></span>",
  "map": "<span style=\"color: gray\"><em>none</em></span>",
  "filter": "<span style=\"color: gray\"><em>none</em></span>",
  "reduce": "<span style=\"color: gray\"><em>none</em></span>",
  "universal-existential-test": "<span style=\"color: gray\"><em>none</em></span>",
  "shuffle": "<span style=\"color: gray\"><em>none</em></span>",
  "zip": "<span style=\"color: gray\"><em>none</em></span>"
},
"dictionaries": {
  "dict-literal": "d = { t=1, f=0 }",
  "dict-size": "size = 0<br />for k, v in pairs(d) do<br /><span style=\"white-space: pre-wrap;\">  </span>size = size + 1<br />end",
  "dict-lookup": "d.t<br />d[\"t\"]",
  "dict-update": "d[\"t\"] = 2<br />d.t = 2",
  "dict-out-of-bounds": "<span style=\"color: gray\"><em>returns</em></span> nil",
  "dict-key-check": "d[\"t\"] ~= nil",
  "dict-delete": "d.t = nil<br />d[\"t\"] = nil",
  "dict-assoc-array": "",
  "dict-merge": "",
  "dict-invert": "",
  "dict-iter": "for k,v in pairs(d) do<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>use k or v</em></span><br />end",
  "dict-key-val-array": "",
  "dict-sort-val": "",
  "dict-default-val": ""
},
"functions": {
  "func-def": "function add(x, y)<br /><span style=\"white-space: pre-wrap;\">  </span>return x + y<br />end",
  "func-invocation": "add(1, 2)",
  "nested-func": "<span style=\"color: gray\"><em>visible outside containing function</em></span>",
  "missing-arg": "nil",
  "extra-arg": "<span style=\"color: gray\"><em>ignored</em></span>",
  "default-arg": "<span style=\"color: gray\"><em>none</em></span>",
  "var-arg": "<span style=\"color: gray\"><em>declare function with ellipsis:</em></span><br />function foo(<span style=\"white-space: pre-wrap;\">...</span>)<br /><span style=\"white-space: pre-wrap;\">  </span>local arg = {<span style=\"white-space: pre-wrap;\">...</span>}",
  "apply-func": "",
  "retval": "return <span style=\"color: gray\"><em>arg or</em></span> nil",
  "multiple-retval": "function roots(x)<br /><span style=\"white-space: pre-wrap;\">  </span>r = math.sqrt(x)<br /><span style=\"white-space: pre-wrap;\">  </span>return r, -r<br />end<br />r1,r2 = roots(4)",
  "lambda-decl": "sqr = function(x) return x*x end",
  "lambda-invocation": "sqr(2)",
  "func-as-val": "",
  "private-state-func": "",
  "closure": "",
  "generator": "crt = coroutine.create(<br /><span style=\"white-space: pre-wrap;\">  </span>function (n)<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>while (true) do<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>coroutine.yield(n % 2)<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>n = n + 1<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>end<br /><span style=\"white-space: pre-wrap;\">  </span>end<br />)<br /><br />status, retval =<br /><span style=\"white-space: pre-wrap;\">  </span>coroutine.resume(crt, 1)<br /><br />if status then<br /><span style=\"white-space: pre-wrap;\">  </span>print(\"parity: \" .. retval)<br />else<br /><span style=\"white-space: pre-wrap;\">  </span>print(\"couldn't resume crt\")<br />end<br /><br />_, retval = coroutine.resume(crt)<br />print(\"parity: \" .. retval)"
},
"execution-control": {
  "if": "if n == 0 then<br /><span style=\"white-space: pre-wrap;\">  </span>print(\"no hits\")<br />elseif n == 1 then<br /><span style=\"white-space: pre-wrap;\">  </span>print(\"one hit\")<br />else<br /><span style=\"white-space: pre-wrap;\">  </span>print(n .. \" hits\")<br />end",
  "while": "while i &lt; 100 do<br /><span style=\"white-space: pre-wrap;\">  </span>i = i + 1<br />end",
  "break-continue": "break <span style=\"color: gray\"><em>none</em></span>",
  "for": "for i = 0, 9 do<br /><span style=\"white-space: pre-wrap;\">  </span>print(i)<br />end",
  "stmt-modifiers": ""
},
"exceptions": {
  "raise-exc": "error \"bad arg\"",
  "catch-exc": "if not pcall(risky) then<br /><span style=\"white-space: pre-wrap;\">  </span>print \"risky failed\"<br />end",
  "last-exc-global": "",
  "finally-ensure": "<span style=\"color: gray\"><em>none</em></span>",
  "uncaught-exc": "<span style=\"color: gray\"><em>stderr and exit</em></span>"
},
"streams": {
  "standard-file-handles": "io.stdin<br />io.stdout<br />io.stderr",
  "read-stdin": "line = io.stdin:read()",
  "eof": "",
  "chomp": "<span style=\"color: gray\"><em>none,</em></span> read() <span style=\"color: gray\"><em>and</em></span> lines() <span style=\"color: gray\"><em>remove trailing newlines</em></span>",
  "print-to-stdout": "print \"Hello, World!\"",
  "printf": "",
  "open-file": "f = io.open(\"/tmp/foo\")",
  "open-file-write": "f = io.open(\"/tmp/foo\", \"w\")",
  "file-encoding": "",
  "open-file-append": "",
  "close-file": "f:close()",
  "close-file-implicitly": "",
  "io-err": "",
  "encoding-err": "",
  "read-line": "f:read()",
  "file-iter": "for s in f:lines() do<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>use s</em></span><br />end",
  "read-file-array": "",
  "read-file-str": "s = f:read(\"*a\")",
  "write-file": "f:write(\"lorem ipsum\")",
  "write-line": "",
  "flush-file": "f:flush()",
  "eof-test": "",
  "seek": "",
  "open-tmp-file": "",
  "in-memory-stream": ""
},
"files": {
  "file-test": "<span style=\"color: gray\"><em>none</em></span>",
  "file-size": "",
  "readable-writable-executable": "",
  "chmod": "<span style=\"color: gray\"><em>none</em></span>",
  "last-modification-time": "",
  "file-cp-rm-mv": "<span style=\"color: gray\"><em>none</em></span>",
  "symlink": "",
  "tmpfile": "f = io.tmpfile()<br />f:write(\"lorem ipsum\\n\")<br />f:close()<br /><span style=\"color: gray\"><em>??</em></span>"
},
"file-fmt": {
  "parse-csv": "",
  "generate-csv": "",
  "parse-json": "",
  "generate-json": "",
  "parse-xml": "",
  "generate-xml": ""
},
"directories": {
  "working-dir": "",
  "build-pathname": "",
  "dirname-basename": "",
  "absolute-pathname": "",
  "dir-iter": "",
  "glob": "",
  "mkdir": "",
  "recursive-cp": "",
  "rmdir": "",
  "rm-rf": "",
  "dir-test": "",
  "unused-dir": "",
  "system-tmp-dir": ""
},
"processes-environment": {
  "cmd-line-arg": "# arg<br />arg[0]<br />arg[1]<br /><span style=\"color: gray\"><em>…</em></span>",
  "program-name": "",
  "env-var": "os.getenv(\"HOME\")",
  "pid": "",
  "user-id-name": "",
  "exit": "os.exit(0)",
  "signal-handler": "",
  "exec-test": "",
  "external-cmd": "os.execute(\"ls\")",
  "shell-esc-external-cmd": "",
  "cmd-subst": "f = io.popen(\"ls\")<br />s = f:read(\"*a\")"
},
"option-parsing": {
  "cmd-line-opt": ""
},
"libraries-namespaces": {
  "compile-lib": "<span style=\"color: gray\"><em>none</em></span>",
  "load-lib": "require 'foo'<br />add(3,7)",
  "load-lib-subdir": "",
  "hot-patch": "",
  "load-err": "",
  "main-in-lib": "",
  "lib-path": "package.path",
  "lib-path-env": "LUA_PATH",
  "lib-path-cmd-line": "",
  "simple-global-id": "",
  "multiple-label-id": "",
  "namespace-label-separator": ".",
  "namespace-decl": "module",
  "subnamespace-decl": "",
  "import-def": "",
  "import-namespace": "",
  "shadow-avoidance": "",
  "pkg-management": ""
},
"objects": {
  "def-class": "",
  "create-obj": "",
  "blank-obj": "o = {}",
  "instance-var-visibility": "",
  "obj-literal": "o = {<br /><span style=\"white-space: pre-wrap;\">  </span>score=21,<br /><span style=\"white-space: pre-wrap;\">  </span>doubleScore=function(self)<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>return 2*self.score<br /><span style=\"white-space: pre-wrap;\">  </span>end<br />}",
  "set-attr": "o.score = 21",
  "get-attr": "if o.score == 21 then<br /><span style=\"white-space: pre-wrap;\">  </span>print(\"Blackjack!\")<br />end",
  "def-method": "function o.doubleScore(self)<br /><span style=\"white-space: pre-wrap;\">  </span>return 2 * self.score<br />end",
  "invoke-method": "print(\"Answer: \" .. o:doubleScore())",
  "method-missing": "",
  "def-class-method": "",
  "invoke-class-method": "",
  "def-class-var": "",
  "get-set-class-var": ""
},
"inheritance-polymorphism": {
  "subclass": ""
},
"reflection": {
  "inspect-type": "type(o)",
  "basic-types": "",
  "inspect-class": "",
  "has-method": "",
  "msg-passing": "",
  "eval": "assert(loadstring(\"x = 1+1\"))()",
  "methods": "",
  "attributes": "",
  "loaded-lib": "",
  "loaded-namespaces": "",
  "inspect-namespace": "",
  "pretty-print": "",
  "src-line-file": "",
  "cmd-line-doc": ""
},
"net-web": {
  "hostname-ip": "",
  "http-get": "",
  "http-post": "",
  "absolute-url": "",
  "parse-url": "",
  "url-encode": "",
  "base64": ""
},
"unit-tests": {
  "test-class": "",
  "run-test": "",
  "assert-equal": "",
  "assert-approx": "",
  "assert-regex": "",
  "assert-exc": "",
  "test-setup": "",
  "test-teardown": ""
},
"debugging-profiling": {
  "check-syntax": "",
  "warning-flag": "",
  "lint": "",
  "debugger": "",
  "debugger-cmd": "",
  "benchmark-code": "",
  "profile-code": ""
}
}
