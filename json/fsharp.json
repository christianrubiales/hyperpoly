{
"version": {
  "version-used": "<span style=\"color: gray\"><em>F# 3.0</em></span><br /><span style=\"color: gray\"><em>Mono 3.2</em></span>",
  "version": "$ fsharpi <span style=\"white-space: pre-wrap;\">--</span>help"
},
"grammar-invocation": {
  "interpreter": "$ cat <span style=\"white-space: pre-wrap;\">&lt;&lt;</span>EOF &gt; hello.fs<br />module hello<br />let main = printfn \"hello\"<br />EOF<br /><br />$ fsharpi <span style=\"white-space: pre-wrap;\">--</span>quiet <span style=\"white-space: pre-wrap;\">--</span>exec hello.fs",
  "shebang": "$ cat <span style=\"white-space: pre-wrap;\">&lt;&lt;</span>EOF &gt; hello.fs<br />#light (*<br /><span style=\"white-space: pre-wrap;\">  </span>exec fsharpi <span style=\"white-space: pre-wrap;\">--</span>exec $0 <span style=\"white-space: pre-wrap;\">--</span>quiet<br />*)<br /><br />module hello<br /><br />printfn \"hello\"<br />EOF<br /><br />$ chmod +x hello.fs<br />$ ./hello.fs",
  "bytecode-compiler-interpreter": "$ echo 'printfn \"hello\"' &gt; hello.fs<br />$ fsharpc hello.fs<br />$ mono hello.exe",
  "native-compiler": "<span style=\"color: gray\"><em>none</em></span>",
  "library-always-imported": "Core",
  "statement-terminator": ";;",
  "blocks": "( <span style=\"color: gray\"><em>expr</em></span> ; <span style=\"color: gray\"><em>…</em></span> )<br />begin <span style=\"color: gray\"><em>expr</em></span> ; <span style=\"color: gray\"><em>…</em></span> end",
  "end-of-line-comment": "<span style=\"white-space: pre-wrap;\">//</span> <span style=\"color: gray\"><em>comment</em></span>",
  "multiple-line-comment": "(* <span style=\"color: gray\"><em>comment<br />another comment</em></span> *)"
},
"var-expr": {
  "value": "let n = 1 + 2",
  "variable": "let n = ref 3<br />n := 4<br />!n + 7",
  "unit": "unit<br />()",
  "conditional-expression": "let n = -3<br />let absn = if n &lt; 0 then -n else n",
  "branch-type-mismatch": "<span style=\"color: gray\">(* compilation error: *)</span><br />if true then \"hello\" else 3",
  "null": "None<br /><br /><span style=\"color: gray\"><em>Also this value returned by .NET library functions. It has a type distinct from</em> None:</span><br />null",
  "nullable-type": "",
  "null-test": "",
  "coalesce": "",
  "nullif": "",
  "expr-type-declaration": "float 1",
  "let-in": "let z =<br /><span style=\"white-space: pre-wrap;\">  </span>let x = 3.0 in<br /><span style=\"white-space: pre-wrap;\">  </span>let y = 2.0 * x in<br /><span style=\"white-space: pre-wrap;\">  </span>x * y",
  "where": "<span style=\"color: gray\"><em>none</em></span>"
},
"arithmetic-logic": {
  "boolean-type": "bool",
  "true-false": "true false",
  "logical-op": "&amp;&amp; <span style=\"white-space: pre-wrap;\">||</span> not",
  "relational-op": "<span style=\"white-space: pre-wrap;\">=</span> &lt;&gt; &lt; &gt; &lt;= &gt;=",
  "min-max": "min 1 2<br />max 1 2",
  "int-type": "int<br /><br /><span style=\"color: gray\"><em>other integer types:</em></span><br />int32 int64 nativeint",
  "int-literal": "-4",
  "float-type": "float",
  "int-op": "+ - * / %",
  "float-op": "<span style=\"white-space: pre-wrap;\">+</span> - * /",
  "add-int-float": "float 3 + 7.0",
  "int-div": "7 / 3<br />7 % 3",
  "int-div-zero": "System.DivideByZeroException",
  "float-div": "float 7 / float 3",
  "float-div-zero": "infinity nan <span style=\"color: gray\"><em>or</em></span> neg_infinity",
  "power": "2.0 ** 32.0",
  "sqrt": "sqrt 2.0",
  "sqrt-negative-one": "nan",
  "transcendental-func": "exp log<br />sin cos tan<br />asin acos atan<br />atan2",
  "transcendental-const": "System.Math.PI<br />System.Math.E",
  "float-truncation": "truncate 3.14<br />round 3.14<br />floor 3.14 <span style=\"color: gray\"><em>returns float</em></span><br />ceil 3.14 <span style=\"color: gray\"><em>returns float</em></span>",
  "abs-val": "abs -7<br />abs -7.0<br />sign -7<br />sign -7.0",
  "int-overflow": "<span style=\"color: gray\"><em>modular arithmetic</em></span>",
  "float-overflow": "infinity",
  "arbitrary-len-int": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> System.Numerics.BigInteger:</span><br />let n = 7I<br />let m = 12I",
  "arbitrary-len-int-op": "n + m<br />n - m<br />n * m<br />n / m<br />n % m<br /><br />n = m<br />n &lt; m<br />n &lt; m<br />n &lt;= m<br />n &gt;= m",
  "rational-type": "",
  "rational-construction": "",
  "rational-decomposition": "",
  "complex-type": "",
  "complex-const": "",
  "complex-op": "",
  "complex-construction": "System.Numerics.Complex(1.0, 2.0)",
  "complex-decomposition": "",
  "random-num": "let rnd = System.Random()<br /><br />rnd.Next(0, 100)<br />rnd.NextDouble()<br /><span style=\"color: gray\"><em>none</em></span>",
  "random-seed": "let rnd = System.Random(17)<br /><span style=\"color: gray\"><em>none</em></span><br /><span style=\"color: gray\"><em>none</em></span>",
  "bit-op": "1 <span style=\"white-space: pre-wrap;\">&lt;&lt;&lt;</span> 4<br />1 <span style=\"white-space: pre-wrap;\">&gt;&gt;&gt;</span> 4<br />1 <span style=\"white-space: pre-wrap;\">&amp;&amp;&amp;</span> 3<br />1 <span style=\"white-space: pre-wrap;\">|||</span> 3<br />1 <span style=\"white-space: pre-wrap;\">^^^</span> 3<br /><span style=\"white-space: pre-wrap;\">~~~</span> 1",
  "binary-octal-hex-literals": "0b101010<br />0o52<br />0x2a",
  "radix": ""
},
"strings": {
  "str-type": "string",
  "str-literal": "\"Hello, World!\"",
  "newline-in-str-literal": "<span style=\"color: gray\"><em>yes</em></span>",
  "str-esc": "\\b \\n \\r\\ t \\\" \\' \\\\<br />\\u<span style=\"color: gray\"><em>hhhh</em></span> \\U<span style=\"color: gray\"><em>hhhhhhhh</em></span>",
  "format-str": "sprintf \"foo %s %d %.2f\" \"bar\" 7 3.1415",
  "str-concat": "\"Hello\" + \", \" + \"World!\"",
  "str-replicate": "String.replicate 80 \"-\"",
  "translate-case": "\"hello\".ToUpper()<br />\"HELLO\".ToLower()",
  "capitalize": "",
  "trim": "\" hello \".Trim()<br />\" hello\".TrimStart()<br />\"hello \".TrimEnd()",
  "pad": "\"hello\".PadLeft(10, ' ')<br />\"hello\".PadRight(10, ' ')",
  "num-to-str": "\"two: \" + string 2<br />\"pi: \" + string 3.14",
  "str-to-num": "7 + int \"12\"<br />73.9 + float \".037",
  "join": "System.String.Join(\" \", [\"do\"; \"re\"; \"mi\"])",
  "split": "\"do re mi\".Split(' ')",
  "char-type": "char",
  "char-literal": "'h'",
  "str-len": "\"hello\".Length",
  "index-substr": "\"hello\".IndexOf(\"hell\")",
  "substr": "\"hello\".Substring(0, 4)",
  "extract-char": "\"hello\".[0]",
  "chr-ord": "int 'a'<br />char 97"
},
"dates-time": {
  "dates-time-types": "",
  "current-date-time": "",
  "current-unix-epoch": ""
},
"arrays": {
  "literal": "",
  "size": "",
  "lookup": "",
  "update": "",
  "out-of-bounds": ""
},
"lists": {
  "list-literal": "[1; 2; 3]",
  "empty-list": "",
  "empty-list-test": "",
  "cons": "1 :: [2; 3]",
  "head": "List.head [1; 2; 3]",
  "tail": "List.tail [1; 2; 3]",
  "head-tail-empty-list": "",
  "list-length": "List.length [1; 2; 3]",
  "nth-elem-of-list": "List.nth [1; 2; 3] 0",
  "list-elem-index": "",
  "update-list": "",
  "concat-list": "[1; 2] @ [3; 4]<br />List.append [1; 2] [3; 4]<br /><br />List.concat [[1; 2]; [3; 4]]",
  "list-last": "",
  "list-take": "",
  "list-drop": "",
  "iterate-over-list": "let f i =<br /><span style=\"white-space: pre-wrap;\">  </span>System.Console.WriteLine(string i)<br /><br />List.iter f [1; 2; 3]",
  "reverse-list": "List.rev [1; 2; 3]",
  "sort-list": "List.sort [1; 3; 2; 4]",
  "map-list": "List.map (( * ) 2) [1; 2; 3]",
  "filter-list": "List.filter ((&lt;) 2) [1; 2; 3]",
  "fold-list-left": "List.fold (-) 0 [1; 2; 3]",
  "fold-list-right": "List.foldr (op -) 0 [1, 2, 3];",
  "list-member": "",
  "universal-test-list": "List.forall (fun x -&gt; x &gt; 2) [1; 2; 3]",
  "existential-test-list": "List.exists (fun x -&gt; x &gt; 2) [1; 2; 3]",
  "zip-list": ""
},
"tuples": {
  "tuple-literal": "(1, \"hello\", true)",
  "tuple-lookup": "match (1, \"hello\", true) with _, x, _ -&gt; x",
  "pair-lookup": "fst (12, \"December\")<br />snd (12, \"December\")"
},
"dictionaries": {
},
"functions": {
  "def-func": "let average a b = ( a + b ) / 2.0",
  "invoke-func": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> 4.5:</span><br />average 1.0 2.0 + 3.0<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> 3.0:</span><br />average 1.0 (2.0 + 3.0)",
  "named-parameter": "",
  "named-parameter-default-value": "",
  "piecewise-defined-function": "",
  "recursive-function": "",
  "mutually-recursive-functions": "",
  "anonymous-function": "fun x -&gt; fun y -&gt; (x + y) / 2.0",
  "infix-operator-in-prefix-position": "",
  "function-in-infix-position": "",
  "currying": "",
  "composition": "",
  "function-composition-operator": "",
  "lazy-evaluation": "",
  "strict-evaluation": "<span style=\"color: gray\"><em>default behavior</em></span>"
},
"execution-control": {
  "if": "if x &gt; 0 then<br /><span style=\"white-space: pre-wrap;\">  </span>printfn \"pos\"",
  "if-else-if-else": "if x &gt; 0 then<br /><span style=\"white-space: pre-wrap;\">  </span>printfn \"pos\"<br />else<br /><span style=\"white-space: pre-wrap;\">  </span>if x &lt; 0 then<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>printfn \"neg\"<br /><span style=\"white-space: pre-wrap;\">  </span>else<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>printfn \"zero\"",
  "sequencing": "printfn \"one\"<br />printfn \"two\"<br />printfn \"three\"",
  "while": "let i = ref 0<br /><br />while !i &lt; 10 do<br /><span style=\"white-space: pre-wrap;\">  </span>printfn \"%d\" !i<br /><span style=\"white-space: pre-wrap;\">  </span>i := !i + 1",
  "for": "",
  "for-in-reverse": "",
  "list-iteration": "",
  "loop": ""
},
"exceptions": {
  "raise-error": "",
  "handle-error": "",
  "type-of-exceptions": "",
  "user-defined-exception": "",
  "standard-exceptions": "",
  "assert": ""
},
"concurrency": {
},
"file-handles": {
  "standard-file-handles": "stdin stdout stderr",
  "read-line-from-stdin": "",
  "end-of-file-behavior": "",
  "chomp": "",
  "write-line-to-stdout": "printfn \"lorem ipsum\"",
  "write-formatted-string-to-stdout": "",
  "open-file-for-reading": "",
  "open-file-for-writing": "",
  "open-file-for-appending": "",
  "close-file": "",
  "i/o-errors": "",
  "read-line": "",
  "iterate-over-file-by-line": "",
  "read-file-into-array-of-strings": "",
  "read-file-into-string": "",
  "write-string": "",
  "write-line": "",
  "flush-file-handle": "",
  "end-of-file-test": "",
  "get-and-set-filehandle-position": ""
},
"files": {
  "file-test,-regular-file-test": "",
  "file-size": "",
  "is-file-readable,-writable,-executable": "",
  "set-file-permissions": "",
  "copy-file,-remove-file,-rename-file": "",
  "create-symlink,-symlink-test,-readlink": "",
  "generate-unused-file-name": ""
},
"directories": {
  "build-pathname": "",
  "dirname-and-basename": "",
  "iterate-over-directory-by-file": "",
  "make-directory": "",
  "remove-empty-directory": "",
  "remove-directory-and-contents": "",
  "directory-test": "",
  "temporary-directory": ""
},
"processes-environment": {
  "command-line-arguments": "",
  "program-name": "",
  "getopt": "",
  "env-var": "",
  "pid": "",
  "user-id-name": "",
  "exit": "",
  "signal-handler": "",
  "external-cmd": "",
  "escaped-external-cmd": "",
  "backticks": ""
},
"libraries-namespaces": {
  "namespace-example": "",
  "namespaces": "",
  "file-name-restrictions": "",
  "namespace": "",
  "namespace-creation": "",
  "namespace-alias": "",
  "namespace-separator": "",
  "subnamespace": "",
  "pkg-manager-setup": "",
  "pkg-manager": "",
  "pkg-compile": ""
},
"user-defined-types": {
  "type-synonym": "type name = string",
  "sum-type": "type color = Red | Green | Blue<br /><br />let col = Red<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> evaluates to true:</span><br />col &lt; Green",
  "tuple-product-type-with-one-field": "type special_int = SpecialInt of int<br /><br />let n = SpecialInt 7",
  "tuple-product-type-with-two-fields": "type int_pair = IntPair of int * int<br /><br />let p = IntPair (7, 11)",
  "record-product-type": "type customer = {<br /><span style=\"white-space: pre-wrap;\">  </span>id: int;<br /><span style=\"white-space: pre-wrap;\">  </span>name: string;<br /><span style=\"white-space: pre-wrap;\">  </span>address: string<br />}",
  "record-product-type-literal": "{id=7; name=\"John\"; address=\"Topeka, KS\"}",
  "generic-type": "type ('a, 'b) twosome =<br /><span style=\"white-space: pre-wrap;\">  </span>Twosome of 'a * 'b<br /><br />let p = Twosome (\"pi\", 3.14)",
  "recursive-type": "type binary_tree =<br /><span style=\"white-space: pre-wrap;\">  </span>| Leaf of int<br /><span style=\"white-space: pre-wrap;\">  </span>| Tree of binary_tree * binary_tree",
  "pattern-match-sum-type": "",
  "pattern-match-product-type": "",
  "pattern-match-guard": "",
  "pattern-match-catchall": ""
},
"objects": {
  "class-definition": "",
  "object-creation": "",
  "method-invocation": "",
  "field-access": ""
},
"inheritance-polymorphism": {
  "overload-function": "",
  "inheritance": ""
},
"net-web": {
},
"unit-tests": {
},
"debugging-profiling": {
},
"repl": {
  "invoke-repl": "<span style=\"color: gray\"><em>Mono:</em></span><br />$ fsharpi<br /><br /><span style=\"color: gray\"><em>In visual studio, highlight code and press ALT+ENTER.</em></span>",
  "repl-limitations": "",
  "repl-last-value": "it",
  "help": "",
  "quit": "#quit;;",
  "inspect-type": "",
  "inspect-namespace": "",
  "load-source-file": "",
  "load-package": "",
  "search-path": "",
  "set-search-path-on-command-line": ""
}
}
