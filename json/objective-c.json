{

"version": {
  "version-used": "<span style=\"color: gray\"><em>gcc 4.2</em></span>",
  "show-version": "$ gcc <span style=\"white-space: pre-wrap;\">--</span>version",
  "implicit-prologue": ""
},
"grammar-execution": {
  "hello-world": "$ cat hello.m<br />#include &lt;stdio.h&gt;<br /><br />int main(int argc, char <span style=\"white-space: pre-wrap;\">**</span>argv) {<br /><span style=\"white-space: pre-wrap;\">  </span>printf(\"Hello, World!\\n\");<br />}<br /><br />$ gcc hello.m<br /><br />$ ./a.out",
  "file-suffixes": "Foo.m<br />Foo.h<br />Foo.o",
  "block-delimiters": "{ }",
  "stmt-terminator": ";",
  "top-level-stmt": "",
  "eol-comment": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> comment</span>",
  "multiple-line-comment": "<span style=\"color: gray\">/* comment<br />another comment */</span>"
},
"var-expr": {
  "local-var": "int i;<br />int j = 3;",
  "uninitialized-local-var": "<span style=\"color: gray\"><em>behavior is undefined.<br /><br />Most implementations do not zero-initialize stack variables, so the value will be whatever happened to be in memory.</em></span>",
  "global-var": "<span style=\"color: gray\"><em>in</em> foo.cpp <em>outside of any function or class definition:</em></span><br />int foo = 7;<br /><br /><span style=\"color: gray\"><em>in</em> bar.cpp <em>outside of any function or class definition:</em></span><br />extern int foo;",
  "uninitialized-global-var": "",
  "write-once-var": "const int i = 7;",
  "assignment": "",
  "compound-assignment": "",
  "incr-decr": "",
  "addr": "",
  "dereference": "",
  "type-size": "",
  "addr-arith": "",
  "unique-ptr": "",
  "ref-cnt-ptr": "",
  "weak-ptr": "",
  "allocate-heap": "#include &lt;stdlib.h&gt;<br /><br />int *ip = malloc(sizeof(int));",
  "uninitialized-heap": "",
  "free-heap": "#include &lt;stdlib.h&gt;<br /><br />free(ip);",
  "null": "NULL",
  "coalesce": "NSString *s1 = s2 <span style=\"white-space: pre-wrap;\">||</span> @\"was null\";"
},
"arithmetic-logic": {
  "boolean-type": "BOOL",
  "true-false": "YES NO",
  "falsehoods": "0 0.0 NULL",
  "logical-op": "&amp;&amp; <span style=\"white-space: pre-wrap;\">||</span> !",
  "relational-op": "== != &lt; &gt; &lt;= &gt;=",
  "int-type": "signed char <span style=\"color: gray\"><em>1+ byte</em></span>#<br />short int <span style=\"color: gray\"><em>2+ bytes</em></span><br />int <span style=\"color: gray\"><em>2+ bytes</em></span><br />long int <span style=\"color: gray\"><em>4+ bytes</em></span><br />long long int <span style=\"color: gray\"><em>4+ bytes</em></span>",
  "unsigned-type": "unsigned char: 8+<br />unsigned short int <span style=\"color: gray\"><em>2 bytes+</em></span><br />unsigned int <span style=\"color: gray\"><em>2 bytes+</em></span><br />unsigned long int <span style=\"color: gray\"><em>4+ bytes</em></span><br />unsigned long long int <span style=\"color: gray\"><em>4+ bytes</em></span>",
  "float-type": "float<br />double<br />long double",
  "fixed-type": "<span style=\"color: gray\"><em>none</em></span>",
  "arithmetic-op": "+ - * / %",
  "int-div": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> evaluates to 2:</span><br />7 / 3",
  "int-div-zero": "<span style=\"color: gray\"><em>process sent a</em></span> SIGFPE <span style=\"color: gray\"><em>signal</em></span>",
  "float-div": "7 / (float)3",
  "float-div-zero": "inf<br />nan<br />-inf<br /><br /><span style=\"color: gray\"><em>there are no portably defined literals or constants for the above values.</em></span>",
  "power": "#include &lt;math.h&gt;<br /><br />pow(2.0, 32.0);",
  "sqrt": "#include &lt;math.h&gt;<br /><br />sqrt(2)",
  "sqrt-negative-one": "nan",
  "transcendental-func": "#include &lt;math.h&gt;<br /><br />exp log log2 log10<br />sin cos tan<br />asin acos atan<br />atan2",
  "transcendental-const": "#include &lt;math.h&gt;<br /><br />M_E<br />M_PI",
  "float-truncation": "#include &lt;math.h&gt;<br /><span style=\"white-space: pre-wrap;\"> </span><br />double d = 3.77;<br /><span style=\"white-space: pre-wrap;\"> </span><br />long trnc = (long)d;<br />long rnd = round(d);<br />long flr = floorl(d);<br />long cl = ceill(d);",
  "absolute-val": "#include &lt;stdlib.h&gt;<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> abs()</span><br />#include &lt;math.h&gt;<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> fabs()</span><br /><br />int i = -7;<br />int ai = abs(i);<br /><br />float x = -7.77;<br />float ax = fabs(x);",
  "int-overflow": "<span style=\"color: gray\"><em>modular arithmetic<br /><br />The C standard does not define behavior for signed integers, however.</em></span>",
  "float-overflow": "<span style=\"color: gray\"><em>no behavior defined by standard; many implementations return</em> inf</span>",
  "float-limits": "",
  "complex-construction": "",
  "complex-decomposition": "",
  "random-num": "#include &lt;stdlib.h&gt;<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> assuming 100 much smaller than RAND_MAX:</span><br />int i = rand() % 100;<br />double x = drand48();<br /><span style=\"color: gray\"><em>none</em></span>",
  "random-seed": "",
  "bit-op": "<span style=\"white-space: pre-wrap;\"> &lt;&lt; &gt;&gt; &amp; | ^ ~ </span>",
  "binary-octal-hex-literals": "",
  "radix": ""
},
"str": {
  "str-type": "NSString* s = @\"lorem ipsum\";<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> convert to C string:</span><br />const char* s2 = [s UTF8String];",
  "str-literal": "@\"don't say \\\"no\"\"",
  "newline-literal": "<span style=\"color: gray\"><em>string literals can extend over multiple lines, but the newlines do not appear in the resulting string</em></span>",
  "str-literal-escape": "\\a \\b \\f \\n \\r \\t \\v<br />\\\\ \\\" \\'<br />\\x<span style=\"color: gray\"><em>hh</em></span> \\<span style=\"color: gray\"><em>o</em></span> \\<span style=\"color: gray\"><em>oo</em></span> \\<span style=\"color: gray\"><em>ooo</em></span>",
  "allocate-str": "NSString *s = @\"hello\";",
  "mutable-str": "",
  "copy-str": "",
  "fmt-str": "[NSString stringWithFormat:@\"%@: %d\", @\"Spain\", 7]",
  "compare-str": "[@\"hello\" compare:@\"hello\"]",
  "str-concat": "NSString *s1 = @\"hello\";<br />NSString *s2 = @\" world\";<br />NSString *s3 = [s1 stringByAppendingString:s2];",
  "str-replicate": "",
  "translate-case": "[@\"HELLO\" lowercaseString]",
  "trim": "[@\" hello \" stringByTrimmingCharactersInSet: [NSCharacterSet whitespaceCharacterSet]]",
  "pad": "[@\"hello\" stringByPaddingToLength:10 withString:@\" \" startingAtIndex:0]",
  "num-to-str": "",
  "str-to-num": "[@\"14\" integerValue]<br />[@\"14\" longLongvalue]<br />[@\"14.7\" floatValue]<br />[@\"14.7\" doubleValue]",
  "join": "",
  "split": "[@\"Bob Ned Amy\" componentsSeparatedByString:@\" \"]",
  "serialize": "",
  "str-length": "[s length]",
  "index-substr": "[@\"hello\" rangeOfString:@\"ll\"].location",
  "extract-substr": "[@\"hello\" substringWithRange:NSMakeRange(2, 2)]",
  "char-type": "",
  "char-literal": "",
  "test-char": ""
},
"regex": {
  "regex-type": "",
  "char-class-abbrev": "",
  "regex-anchors": "",
  "regex-lookahead": "",
  "regex-test": "NSPredicate *pred = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", @\".*ll.*\"];<br />BOOL is_match = [pred evaluateWithObject:@\"hello\"];",
  "case-insensitive-regex": "",
  "regex-modifiers": "",
  "subst": "",
  "match-prematch-postmatch": "",
  "group-capture": ""
},
"dates-time": {
  "date-time-type": "",
  "current-date-time": "",
  "unix-epoch": "",
  "date-time-to-str": "",
  "format-date": "",
  "parse-date": "",
  "date-subtraction": "",
  "add-duration": "",
  "date-parts": "",
  "time-parts": "",
  "build-datetime": ""
},
"fixed-length-arrays": {
  "fixed-len-array-stack": "int a[10];",
  "fixed-len-array-heap": "#include &lt;stdlib.h&gt;<br />int *a = calloc(10, sizeof(int));",
  "free-fixed-len-array-heap": "#include &lt;stdlib.h&gt;<br />free(a);",
  "fixed-len-array-init-list": "NSArray *a = [NSArray arrayWithObjects:@\"hello\", @\"goodbye\", nil];",
  "fixed-len-array-size": "[a count]",
  "fixed-len-array-lookup": "[a objectAtIndex:0]",
  "fixed-len-array-update": "",
  "fixed-len-array-out-of-bounds": "<span style=\"color: gray\"><em>raises</em></span> NSRangeException exception",
  "copy-fixed-len-array": "",
  "fixed-len-array-as-func-arg": "",
  "iterate-over-fixed-len-array": "NSEnumerator *i = [a objectEnumerator];<br />id o;<br />while (o = [i nextObject]) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>do something with o</em></span><br />}",
  "sort-fixed-len-array": ""
},
"resizable-arrays": {
  "decl-resizable-array": "NSMutableArray *a = [NSMutableArray arrayWithCapacity:10];",
  "resizable-array-init-list": "",
  "resizable-array-size": "[a count]",
  "resizable-array-capacity": "",
  "resizable-array-empty-test": "",
  "resizable-array-lookup": "[a objectAtIndex:0]",
  "resizable-array-update": "",
  "resizable-array-out-of-bounds": "<span style=\"color: gray\"><em>raises</em></span> NSRangeException",
  "resizable-array-elem-index": "",
  "slice-resizable-array": "",
  "slice-resizable-array-to-end": "",
  "resizable-array-back": "[a addObject:@\"hello\"];<br />[a removeLastObject];",
  "resizable-array-front": "",
  "concat-resizable-array": "",
  "replicate-resizable-array-elem": "",
  "copy-resizable-array": "",
  "resizable-array-as-func-arg": "",
  "iterate-over-resizable-array": "NSEnumerator *i = [a objectEnumerator];<br />id o;<br />while (o = [i nextObject]) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>do something with o</em></span><br />}",
  "indexed-array-iteration": "",
  "reverse-array": "",
  "sort-array": "",
  "dedupe-array": "",
  "membership": ""
},
"tuples": {
  "tuple-ctor": "",
  "tuple-lookup": "",
  "tuple-decompose": "",
  "tuple-update": "",
  "tuple-len": "",
  "pair-ctor": "",
  "pair-lookup": "",
  "pair-update": ""
},
"dictionaries": {
  "dict-ctor": "NSMutableDictionary *dict = [NSMutableDictionary dictionaryWithCapacity:10];",
  "dict-lookup": "[dict setObject:@\"5\" forKey:@\"hello\"];<br />[dict objectForKey:@\"hello\"]",
  "dict-size": "[dict count]",
  "dict-delete": "[dict removeObjectForKey:@\"hello\"];",
  "dict-missing-key": "NULL",
  "dict-iter": "NSEnumerator *i = [dict keyEnumerator];<br />id key;<br />while ((key = [i nextObject])) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>do something with key</em></span><br />}"
},
"functions": {
  "decl-func": "",
  "def-func": "",
  "call-func": "",
  "def-static-class-method": "",
  "invoke-static-class-method": "",
  "overload-func": "<span style=\"color: gray\"><em>method overloading only</em></span>",
  "default-arg": "<span style=\"color: gray\"><em>none</em></span>",
  "variable-num-arg": "<span style=\"color: gray\"><em>use C; use method overloading for finite arities</em></span>",
  "named-param": "+(float)weight: (float) w height: (float) h {<br /><span style=\"white-space: pre-wrap;\">  </span>return (w * 703) / (h * h);<br />}<br />+(float)height: (float) h weight: (float) w {<br /><span style=\"white-space: pre-wrap;\">  </span>return [BMI weight: w height: h];<br />}<br />[BMI weight:155 height:70];<br />[BMI height:70 weight:155];",
  "pass-by-val": "void use_integer(int i) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>function body</em></span><br />}<br />int i = 7;<br />use_integer(i);",
  "pass-by-ref": "<span style=\"color: gray\"><em>none</em></span>",
  "pass-by-addr": "void use_iptr(int *i) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>function body</em></span><br />}<br />int i = 7;<br />use_iptr(&amp;i);",
  "retval": "",
  "no-retval": "",
  "recursive-func": "",
  "anon-func-literal": "",
  "invoke-anonymous-func": "",
  "closure": "",
  "func-private-state": "",
  "func-as-val": "",
  "overload-op": "<span style=\"color: gray\"><em>none</em></span>"
},
"execution-control": {
  "if": "if (i&gt;0) {<br /><span style=\"white-space: pre-wrap;\">  </span>signum = 1;<br />} else if (i==0) {<br /><span style=\"white-space: pre-wrap;\">  </span>signum = 0;<br />} else {<br /><span style=\"white-space: pre-wrap;\">  </span>signum = -1;<br />}",
  "dangling-else": "",
  "switch": "switch(i) {<br />case 0:<br /><span style=\"white-space: pre-wrap;\">  </span>0;<br /><span style=\"white-space: pre-wrap;\">  </span>break;<br />case 1:<br /><span style=\"white-space: pre-wrap;\">  </span>1;<br /><span style=\"white-space: pre-wrap;\">  </span>break;<br />default:<br /><span style=\"white-space: pre-wrap;\">  </span>-1;<br /><span style=\"white-space: pre-wrap;\">  </span>break;<br />}",
  "while": "int i = 0;<br />while (i&lt;10) {<br /><span style=\"color: gray\">…</span><br /><span style=\"white-space: pre-wrap;\">  </span>i++;<br />}",
  "for": "int i, n;<br />for (i=1,n=1; i&lt;=10; i++) {<br /><span style=\"white-space: pre-wrap;\">  </span>n *= i;<br />}",
  "break": "",
  "break-nested-loops": "",
  "continue": "",
  "goto": ""
},
"exceptions": {
  "base-exc": "",
  "predefined-exc": "",
  "raise-exc": "NSException *exc = [NSException exceptionWithName:@\"error\" reason:@\"failed\" userInfo:nil];<br />@throw exc;",
  "handle-exc": "@try {<br /><span style=\"white-space: pre-wrap;\">  </span>[NSException raise:@\"error\" format:@\"failed\"];<br />} @catch (NSException *e) {<br /><span style=\"white-space: pre-wrap;\">  </span>printf([[e reason] UTF8String]);<br />}",
  "def-exc": "",
  "re-raise-exc": "",
  "catch-all-handler": "",
  "multiple-handlers": "",
  "uncaught-exc": "",
  "error-msg": "",
  "errno": "",
  "finally-clause": "@try {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>risky code</em></span><br />} @finally {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>perform cleanup</em></span><br />}",
  "exc-specification": "<span style=\"color: gray\"><em>no</em></span>"
},
"concurrency": {
  "start-thread": "",
  "terminate-current-thread": "",
  "terminate-other-thread": "",
  "list-threads": "",
  "wait-on-thread": "",
  "lock": "",
  "create-msg-queue": "",
  "send-msg": "",
  "receive-msg": ""
},
"file-handles": {
  "std-file-handles": "",
  "read-line-stdin": "",
  "printf": "printf(\"count: %d\\n\", 7);",
  "read-from-file": "NSError *error = nil;<br />NSString *s = [NSString stringWithContentsOfFile: @\"/etc/passwd\" encoding:NSUTF8StringEncoding error:&amp;error];<br /><br />if ( error != nil ) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> handle error</span><br />}<br /><br />NSArray *a = [s componentsSeparatedByString:@\"\\n\"];<br />id line;<br /><br />while (line = [i nextObject]) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> process line</span><br />}",
  "write-to-file": ""
},
"files": {
  "file-test": "",
  "file-size": "",
  "readable-writable-executable": "",
  "chmod": "",
  "file-cp-rm-mv": ""
},
"file-fmt": {
  "csv": "",
  "json": "",
  "build-xml": "",
  "parse-xml": "",
  "parse-html": ""
},
"directories": {
  "build-pathname": "",
  "dirname-basename": "",
  "absolute-pathname": "",
  "iterate-dir": "",
  "glob": "",
  "mkdir": "",
  "recursive-cp": "",
  "rmdir": "",
  "rm-rf": "",
  "dir-test": "",
  "unused-dir": "",
  "system-tmp-dir": ""
},
"processes-environment": {
  "signature-of-main": "int main(int argc, char <span style=\"white-space: pre-wrap;\">**</span>argv) {",
  "first-argument<br-/>": "<span style=\"color: gray\"><em>pathname of executable</em></span>",
  "environment-variable": "NSString *home = [[[NSProcessInfo processInfo] environment] objectForKey:@\"HOME\"];",
  "iterate-through-environment-variables": "NSEnumerator *i = [[[NSProcessInfo processInfo] environment] keyEnumerator];<br />id key;<br />while ((key = [i nextObject])) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>use NSString key</em></span><br />}"
},
"libraries-namespaces": {
  "std-lib-name": "<span style=\"color: gray\"><em>Foundation Framework</em></span>",
  "declare-namespace": "",
  "multiple-namespaces-per-file": "",
  "namespaces-map-to-directories": "",
  "import-namespace": "",
  "import-part-of-namespace": "",
  "import-symbol": "",
  "import-static-symbol": "",
  "import-position<br-/>": "",
  "using-a-symbol-that-hasn't-been-imported": "",
  "app-env": "",
  "multiple-installations": "",
  "pkg-manager": ""
},
"user-defined-types": {
  "typedef": "typedef int customer_id;<br />customer_id cid = 3;",
  "enum": "enum day_of_week { mon, tue, wed, thu, fri, sat, sun };<br />enum day_of_week d = tue;",
  "struct-definition": "struct medal_count {<br /><span style=\"white-space: pre-wrap;\">  </span>const char* country;<br /><span style=\"white-space: pre-wrap;\">  </span>int gold;<br /><span style=\"white-space: pre-wrap;\">  </span>int silver;<br /><span style=\"white-space: pre-wrap;\">  </span>int bronze;<br />};",
  "struct-declaration": "struct medal_count spain;",
  "struct-initialization": "struct medal_count spain = { \"Spain\", 3, 7, 4};<br />struct medal_count france = { .gold = 8, .silver = 7, .bronze = 9, .country = \"France\" };",
  "struct-member-assignment": "spain.country = \"Spain\";<br />spain.gold = 3;<br />spain.silver = 7;<br />spain.bronze = 4;",
  "struct-member-access": "int spain_total = spain.gold + spain.silver + spain.bronze;"
},
"generic-types": {
  "define-generic-type": "",
  "instantiate-generic-type": "",
  "generic-function": "",
  "generic-array": "",
  "value-parameter": "",
  "template-parameter": "",
  "template-specialization": "",
  "multiple-type-parameters": "",
  "generic-type-parameters": "",
  "template-parameters": "",
  "variadic-template": ""
},
"objects": {
  "str-equal": "<span style=\"color: gray\"><em>object identity comparison</em></span>",
  "define-class": "<span style=\"color: gray\"><em>Rational.h:</em></span><br />#import &lt;Foundation/Foundation.h&gt;<br />@interface Rational : NSObject {<br /><span style=\"white-space: pre-wrap;\">  </span>int num;<br /><span style=\"white-space: pre-wrap;\">  </span>int denom;<br />}<br />@property int num, denom;<br />-(Rational*) initWith: (int) n: (int) d;<br />-(Rational*) add: (Rational *) o;<br />@end<br /><span style=\"color: gray\"><em>Rational.m:</em></span><br />#include \"Rational.h\"<br />@implementation Rational<br />@synthesize num, denom;<br />-(Rational*) add: (Rational*) o {<br /><span style=\"white-space: pre-wrap;\">  </span>int sum_n = self.num * o.denom + o.num * self.denom;<br /><span style=\"white-space: pre-wrap;\">  </span>int sum_d = self.denom * o.denom;<br /><span style=\"white-space: pre-wrap;\">  </span>Rational* sum = [[Rational alloc] initWith: sum_n: sum_d];<br /><span style=\"white-space: pre-wrap;\">  </span>return sum;<br />}<br />@end",
  "class-definition-location": "<span style=\"color: gray\"><em>top level</em></span>",
  "constructor": "-(Rational*) initWith: (int) n: (int) d {<br /><span style=\"white-space: pre-wrap;\">  </span>self = [super init];<br /><span style=\"white-space: pre-wrap;\">  </span>if (self) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>self.num = n;<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>self.denom = d;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br /><span style=\"white-space: pre-wrap;\">  </span>return self;<br />}",
  "create-object": "Rational *r = [[Rational alloc] initWith: 7: 3];",
  "destructor": "-(void) dealloc {<br /><span style=\"white-space: pre-wrap;\">  </span>[super dealloc];<br /><span style=\"white-space: pre-wrap;\">  </span>printf(\"deallocated…\");<br />}",
  "destroy-object<br-/>": "[r release];",
  "define-method": "-(int) height {<br /><span style=\"white-space: pre-wrap;\">  </span>if ( abs(self.num) &gt; abs(self.denom) ) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>return abs(self.num);<br /><span style=\"white-space: pre-wrap;\">  </span>}<br /><span style=\"white-space: pre-wrap;\">  </span>return abs(self.denom);<br />}",
  "invoke-method": "[r1 height];",
  "define-class-method": "<span style=\"color: gray\"><em>precede definition with +:</em></span><br />+(Rational*) max: (Rational*) a: (Rational*) b {<br /><span style=\"white-space: pre-wrap;\">  </span>if ( a.num * b.denom &gt; b.num * a.denom ) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>return a;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br /><span style=\"white-space: pre-wrap;\">  </span>return b;<br />}",
  "invoke-class-method": "",
  "name-of-receiver": "self",
  "access-control": "<span style=\"color: gray\"><em>access keywords define regions:</em></span><br />@interface Foo : NSObject {<br /><span style=\"white-space: pre-wrap;\">  </span>int protectedInt1;<br /><span style=\"white-space: pre-wrap;\">  </span>int protectedInt2;<br />@public<br /><span style=\"white-space: pre-wrap;\">  </span>int publicInt1;<br /><span style=\"white-space: pre-wrap;\">  </span>int publicInt2;<br />@protected<br /><span style=\"white-space: pre-wrap;\">  </span>int protectedInt3;<br /><span style=\"white-space: pre-wrap;\">  </span>int protectedInt4;<br />@private<br /><span style=\"white-space: pre-wrap;\">  </span>int privateInt1;<br /><span style=\"white-space: pre-wrap;\">  </span>int privateInt2;<br />}<br />@end",
  "anonymous-class": "<span style=\"color: gray\"><em>none</em></span>"
},
"inheritance-polymorphism": {
  "dynamic-dispatch": "<span style=\"color: gray\"><em>dispatch always dynamic</em></span>",
  "static-dispatch": "<span style=\"color: gray\"><em>dispatch always dynamic</em></span>",
  "subclass": "",
  "invoking-superclass-constructor": "",
  "mark-class-underivable-or-method-unoverrideable": "<span style=\"color: gray\"><em>none</em></span>",
  "root-class<br-/>": "NSObject",
  "root-class-methods": "autorelease<br />class<br />conformsToProtocol:<br />hash<br />isEqual:<br />isKindOfClass:<br />isProxy<br />performSelector:<br />performSelector:withObject:<br />performSelector:withObject:withObject:<br />release<br />respondsToSelector:<br />retain<br />retainCount<br />self<br />superclass"
},
"reflection": {
  "get-type-class-of-object": "",
  "get-type-class-from-string": "",
  "get-type-class-from-type-identifier": "",
  "class-name<br-/>": "",
  "get-methods": "",
  "has-method": "",
  "invoke-method-object": ""
},
"net-web": {
  "get-local-hostname,-dns-lookup,-reverse-dns-lookup": "",
  "http-get": "",
  "http-post": "",
  "absolute-url": "",
  "parse-url": "",
  "url-encode": "",
  "base64-encode/decode": ""
},
"unit-tests": {
  "test-class": "",
  "run-all-tests": "",
  "assert-equal": "",
  "assert-approx": "",
  "assert-exc": "",
  "setup": "",
  "teardown": ""
},
"debugging-profiling": {
  "flag-for-stronger-warnings": "",
  "suppress-warnings": "",
  "treat-warnings-as-errors": "",
  "run-debugger": "",
  "debugger-cmds": "",
  "benchmark-code": "",
  "profile-code": "",
  "memory-tool": ""
}
}
