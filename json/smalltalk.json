{

"general": {
  "version-used": "<span style=\"color: gray\"><em>Pharo 3.0</em></span>",
  "show-version": "SmalltalkImage current aboutThisSystem.<br /><br /><span style=\"color: gray\"><em>at command line:</em></span><br />$ ./pharo Pharo.image printVersion"
},
"grammar-invocation": {
  "interpreter": "",
  "repl": "",
  "cmd-line-program": "$ Pharo <span style=\"white-space: pre-wrap;\">--</span>headless Pharo.image eval '1 + 1.'",
  "stmt-separator": "<span style=\"color: gray\"><em>period:</em></span> .",
  "block-delimiters": "[ ]",
  "local-scope-regions": "",
  "expr-stmt": "<span style=\"color: gray\"><em>yes</em></span>",
  "eol-comment": "<span style=\"color: gray\"><em>no</em></span>",
  "multiple-line-comment": "\"<span style=\"color: gray\"><em>comment<br />another comment</em></span>\""
},
"var-expr": {
  "local-var": "",
  "global-var": "",
  "assignment": "a := 1.",
  "parallel-assignment": "<span style=\"color: gray\"><em>none</em></span>",
  "swap": "",
  "compound-assignment": "",
  "incr-decr": "",
  "var-decl": "",
  "null": "nil",
  "null-test": "v = nil",
  "undef-var": "<span style=\"color: gray\"><em>evaluates as</em> nil</span>",
  "conditional-expr": "x &gt; 0 ifTrue: [x] ifFalse: [0 - x]"
},
"arithmetic-logic": {
  "true-false": "true false",
  "falsehoods": "false",
  "logical-op": "&amp; | not",
  "relational-expr": "",
  "relational-op": "<span style=\"white-space: pre-wrap;\">=</span> ~= &gt; &lt; &gt;= &lt;=",
  "min-max": "",
  "arith-expr": "1 + 3<br /><br /><span style=\"color: gray\">\"Binary operators are evaluated left to right.<br />This is 20:\"</span><br />1 + 3 * 5",
  "arith-op": "+ - * / <span style=\"white-space: pre-wrap;\">//</span> \\\\",
  "int-dvi": "7 <span style=\"white-space: pre-wrap;\">//</span> 3",
  "int-div-zero": "<span style=\"color: gray\">ZeroDivide <em>exception</em></span>",
  "float-div": "7 / 3 asFloat.<br /><br /><span style=\"color: gray\">\"exact rational:\"</span><br />7 / 3",
  "float-div-zero": "<span style=\"color: gray\">ZeroDivide <em>exception</em></span>",
  "power": "2 raisedTo 32",
  "sqrt": "2 sqrt",
  "sqrt--1<br-/>": "<span style=\"color: gray\"><em>raises</em> DomainError</span>",
  "transcendental-functions": "exp ln<br />sin cos tan<br />arcSin arcCos arcTan",
  "transcendental-const": "Float pi<br />Float e",
  "float-truncation<br-/>": "3.14 asInteger<br />3.14 rounded<br />3.14 ceiling<br />31.4 floor",
  "abs-val": "-7 abs",
  "integer-overflow<br-/>": "<span style=\"color: gray\"><em>converted to</em> LargePositiveInteger <em>or</em> LargeNegativeInteger</span>",
  "float-overflow<br-/>": "Float infinity <span style=\"color: gray\"><em>or</em></span> Float infinity negated",
  "random-integer,-uniform-float": "rnd := Random new.<br /><br />rnd next.<br />(rnd nextInt: 100) - 1.",
  "seed-random-numbers<br-/>": "rnd := Random new.<br />rnd :seed 17.",
  "bit-operators<br-/>": "5 bitShift: 1<br />5 bitShift: -1<br />5 bitAnd: 1<br />5 bitOr: 1<br />5 bitInvert",
  "binary-octal-hex-literals": "",
  "radix": ""
},
"strings": {
  "str-type": "",
  "str-literal": "'don''t say \"no\"'.",
  "new-line-in-str-literal": "<span style=\"color: gray\"><em>no</em></span><br /><br /><span style=\"color: gray\">\" print newline in Transcript:\"</span><br />Transcript cr.",
  "str-literal-esc": "<span style=\"color: gray\"><em>none</em></span>",
  "var-interpolation": "",
  "str-concat": "'hello, ', 'world'",
  "str-replicate": "",
  "str-join": "",
  "split": "",
  "fmt-str": "",
  "translate-case": "'hello' asUppercase<br />'HELLO' asLowercase",
  "trim": "",
  "pad": "",
  "str-to-num": "12' asInteger + 7",
  "num-to-str": "7 printString, ' items'",
  "prefix-suffix-test": "",
  "str-len": "'hello' byteSize",
  "index-substr": "'foo bar' indexOfAnyOf: 'bar'",
  "extract-substr": "'foo bar' copyFrom: 5 to: 7",
  "char-literal": "$A",
  "lookup-char": "",
  "chr-ord": "65 asCharacter<br />$A asciiValue",
  "str-to-char-array": ""
},
"regexes": {
  "regex-match": "",
  "regex-literal": "",
  "char-class-abbrev": "",
  "regex-anchors": "",
  "case-insensitive-regex": "",
  "regex-modifiers": "",
  "subst": "",
  "match-prematch-postmatch": "",
  "group-capture": "",
  "named-grouped-capture": "",
  "scan": "",
  "backreference": ""
},
"dates-time": {
  "broken-down-datetime-type": "",
  "current-datetime": "Date today.<br />Time now.",
  "unix-epoch": "",
  "current-unix-epoch": "",
  "strftime": "",
  "strptime": "",
  "parse-date": "",
  "get-date-parts": "",
  "get-time-parts": "",
  "date-from-parts": "",
  "date-subtraction": "",
  "add-time-duration": "",
  "local-tmz": "",
  "tmz-offset": "",
  "microseconds": "",
  "sleep": "",
  "timeout": ""
},
"arrays": {
  "resizable-array-literal": "nums := OrderedCollection new.<br />nums add: 1; add: 2; add: 3; add: 4.<br /><br /><span style=\"color: gray\">\"creates immutable array:\"</span><br />nums := #(1 2 3 4)",
  "resizable-array-size": "nums size",
  "empty-test": "",
  "resizable-array-lookup": "nums at: 1",
  "resizable-array-update": "",
  "out-of-bounds-behavior": "",
  "index-of-element<br-/>": "",
  "slice": "nums copyFrom: 2 to: 3",
  "slice-to-end": "",
  "concatenation": "",
  "copy": "",
  "manipulate-back-of-array": "a := OrderedCollection new.<br />a add: 6; add: 7; add: 8.<br /><br />a add: 9.<br />a removeLast.",
  "manipulate-front-of-array": "a := OrderedCollection new.<br />a add: 6; add: 7; add: 8.<br /><br />a addFirst: 5.<br />a removeFirst.",
  "array-iteration": "nums do: [:o| Transcript show: o printString; cr]",
  "reverse": "",
  "sort": "",
  "dedupe": "",
  "membership<br-/>": "nums includes: 7",
  "intersection": "",
  "union": "",
  "relative-complement": "",
  "map<br-/>": "#(1 2 3) collect: [ :o | o*o ]",
  "filter<br-/>": "#(1 2 3) select: [:o | o &gt; 1]",
  "reduce<br-/>": "#(1 2 3) inject: 0 into: [:m :o| m + o]",
  "universal-test<br-/>": "#(1 2 3 4) allSatisfy: [:o | o even]",
  "existential-test<br-/>": "#(1 2 3 4) anySatisfy: [:o | o even]"
},
"dictionaries": {
  "dict-ctorl": "h := Dictionary new add: <span style=\"color: maroon\">'t'</span>-&gt;1; add: <span style=\"color: maroon\">'f'</span>-&gt;0; yourself",
  "dict-size": "h size",
  "dict-lookup": "h at: <span style=\"color: maroon\">'t'</span>",
  "dict-update": "",
  "dict-missing-key": "raises exception",
  "dict-is-key-present": "",
  "dict-delete": "",
  "dict-iter": "h keysAndValuesDo: [:k :v| code ]",
  "dict-key-val-arrays": "h keys<br />h values"
},
"functions": {
  "def-func": "add := [ :a :b | a + b ]",
  "call-func": "add value: 1 value: 2",
  "missing-arg": "<span style=\"color: gray\"><em>raises</em> BlockClosure <em>exception</em></span>",
  "extra-arg": "<span style=\"color: gray\"><em>raises</em> BlockClosure <em>exception</em></span>",
  "default-arg": "",
  "named-parameters": "",
  "variadic-func": "",
  "pass-by-ref": "",
  "return-value": "",
  "nested-func": "",
  "anon-func-literal": "",
  "call-anon-func": "",
  "private-state-func": "",
  "closure": ""
},
"execution-control": {
  "if": "msg := [ :s | Transcript show: s. Transcript cr ]<br /><br />n = 0<br />ifTrue: [<br /><span style=\"white-space: pre-wrap;\">  </span>msg value: 'no hits' ]<br />ifFalse: [<br /><span style=\"white-space: pre-wrap;\">  </span>n = 1<br /><span style=\"white-space: pre-wrap;\">  </span>ifTrue: [<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>msg value: '1 hit' ]<br /><span style=\"white-space: pre-wrap;\">  </span>fFalse: [<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>msg value: n printString, ' hits' ]].",
  "switch": "",
  "while": "[ i &lt; 100 ]<br />whileTrue: [<br /><span style=\"white-space: pre-wrap;\">  </span>i := i + 1 ].",
  "break-continue": "",
  "for": "1 to: 100 do: [ :i |<br /><span style=\"white-space: pre-wrap;\">  </span>msg value: i printString ]."
},
"exceptions": {
  "base-exc": "",
  "predefined-exc": "",
  "raise-exception": "Exception raiseSignal: 'bam!'.",
  "catch-all-handler": "",
  "uncaught-exception-behavior": "",
  "re-raise-exc": "",
  "last-exc-global": "",
  "def-exc": "",
  "handle-exc": "[ o risky ] on: Exception do: [ :ex |<br /><span style=\"white-space: pre-wrap;\">  </span>Transcript show: 'risky failed' ]",
  "finally-block": ""
},
"streams": {
  "standard-file-handles": "",
  "read-stdin": "",
  "end-of-file-behavior": "",
  "chomp": "",
  "print-to-stdout": "",
  "write-formatted-string-to-stdout": "",
  "open-file": "",
  "open-file-write": "",
  "set-file-handle-encoding": "",
  "open-file-for-appending": "",
  "close-file": "",
  "close-file-implicitly": "",
  "i/o-error": "",
  "encoding-error": "",
  "read-line": "",
  "file-iter": "",
  "read-file-into-array-of-strings": "",
  "read-file-into-string": "",
  "write-file": "",
  "write-line": "",
  "flush-file": "",
  "end-of-file-test": "",
  "get-and-set-file-handle-position": "",
  "open-temporary-file": "",
  "in-memory-file": ""
},
"files": {
  "file-test": "",
  "file-size": "",
  "readable-writable-executable": "",
  "chmod": "",
  "last-modification-time": "",
  "file-cp-rm-mv": "",
  "create-symlink,-symlink-test,-readlink": "",
  "tmpfile": ""
},
"file-fmt": {
  "parse-json": "",
  "generate-json": ""
},
"directories": {
  "working-directory<br-/>": "",
  "build-pathname": "",
  "dirname-basename": "",
  "absolute-pathname": "",
  "dir-iter": "",
  "glob-paths": "",
  "mkdir": "",
  "recursive-copy": "",
  "rmdir": "",
  "rm-rf": "",
  "dir-test": "",
  "generate-unused-directory": "",
  "system-temporary-file-directory": ""
},
"processes-environment": {
  "cmd-line-arg": "",
  "env-var": "",
  "pid": "",
  "exit": "",
  "external-cmd": "",
  "cmd-subst": ""
},
"libraries-namespaces": {
  "load-lib": "",
  "load-library-in-subdirectory": "",
  "hot-patch": "",
  "load-error": "",
  "main-routine-in-library": "",
  "lib-path": "",
  "lib-path-env": "",
  "library-path-command-line-option": "",
  "simple-global-identifiers": "",
  "multiple-label-identifiers": "",
  "label-separator": "",
  "namespace-decl": "",
  "child-namespace-declaration": "",
  "unqualified-import-of-namespace": "",
  "unqualified-import-of-definitions": "",
  "pkg-management": ""
},
"objects": {
  "def-class": "",
  "create-obj": "",
  "instance-var": "",
  "getter-setter": "",
  "def-method": "",
  "invoke-method": ""
},
"inheritance-polymorphism": {
  "inheritance": "",
  "mixin": "",
  "op-overload": ""
},
"reflection": {
  "object-id": "",
  "inspect-type": "",
  "types": "",
  "inspect-class": "'hello' class",
  "inspect-class-hierarchy": "",
  "has-method": "",
  "msg-passing": "",
  "eval": "",
  "list-obj-methods": "1 class selectors.",
  "list-obj-attr": "",
  "list-loaded-lib": "",
  "list-loaded-namespaces": "",
  "inspect-namespace": "",
  "pretty-print": "",
  "src-line-file": "",
  "cmd-line-doc": ""
},
"gui": {
  "pop-up-box": "",
  "button": "",
  "text-entry": "",
  "frame": "",
  "label": "",
  "image": ""
},
"net-web": {
  "hostname-ip": "",
  "http-get": "",
  "http-post": "",
  "serve-pwd": "",
  "absolute-url": "",
  "parse-url": "",
  "url-encode": "",
  "html-escape": "",
  "base64": ""
}
}
