{

"version": {
  "version-used": "<span style=\"color: gray\"><em>1.5</em></span>",
  "version": "$ tsc <span style=\"white-space: pre-wrap;\">--</span>version"
},
"grammar-execution": {
  "hello-world": "$ cat hello.ts<br />console.log(\"Hello, World!\");<br /><br />$ tsc hello.ts<br /><br />$ node hello.js<br />Hello, World!",
  "file-suffixes": ".ts .d.ts .js",
  "interpreter": "<span style=\"color: gray\"><em>none</em></span>",
  "block-delimiters": "{}",
  "statement-separator": "<span style=\"color: gray\"><em>; or newline<br /><br />newline not separator inside (), [], {}, \"\", '', or after binary operator<br /><br />newline sometimes not separator when following line would not parse as a valid statement</em></span>",
  "eol-comment": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> comment</span>",
  "multiple-line-comment": "<span style=\"color: gray\">/* line<br />another line */</span>"
},
"var-expr": {
  "local-var": "var x: number = 1;<br />var y: number = 2, z: number = 3;<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> type is inferred:</span><br />var x = 1;<br />var y = 2, z = 3;",
  "local-scope-regions": "<span style=\"color: gray\"><em>top level:<br /><span style=\"white-space: pre-wrap;\">  </span>html page<br /><br />nestable:<br /><span style=\"white-space: pre-wrap;\">  </span>function</em></span>",
  "global-var": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> no globals in TypeScript; if global is defined<br /><span style=\"white-space: pre-wrap;\">//</span> in JavaScript it can be declared.<br /><span style=\"white-space: pre-wrap;\">//</span> Run time ReferenceError if not found:</span><br />declare var g;",
  "uninitialized-var": "<span style=\"color: gray\"><em>set to</em> undefined</span>",
  "immutable-var": "",
  "const": "<span style=\"color: gray\"><em>none</em></span>",
  "assignment": "x = 1;",
  "parallel-assignment": "<span style=\"color: gray\"><em>none</em></span>",
  "swap": "var tmp = x;<br />x = y;<br />y = tmp;",
  "compound-assignment": "+= -= *= /= <span style=\"color: gray\"><em>none</em></span> %=<br />+=<br /><span style=\"color: gray\"><em>none</em></span><br /><span style=\"white-space: pre-wrap;\">&lt;&lt;= &gt;&gt;= </span>&amp;= |= ^=",
  "incr-decr": "var x = 1;<br />var y = ++x;<br />var z = <span style=\"white-space: pre-wrap;\">--</span>y;",
  "null": "null",
  "null-test": "v === null",
  "option-type": "",
  "undef-var": "undefined",
  "conditional-expr": "x &gt; 0 ? x : -x"
},
"arithmetic-logic": {
  "boolean-type": "var x: boolean = true;",
  "true-false": "true false",
  "falsehoods": "false null undefined \"\" 0 NaN",
  "logical-op": "<span style=\"white-space: pre-wrap;\">&amp;&amp; ||</span> !",
  "relational-op": "<span style=\"white-space: pre-wrap;\">===</span> !== &lt; &gt; &gt;= &lt;=<br /><br /><span style=\"color: gray\"><em>perform type coercion:</em></span><br /><span style=\"white-space: pre-wrap;\">==</span> !=",
  "min-max": "Math.min(1, 2, 3)<br />Math.max(1, 2, 3)<br /><br />Math.min.apply(Math, [1, 2, 3])<br />Math.max.apply(Math, [1, 2, 3])",
  "int-type": "<span style=\"color: gray\"><em>none; use</em> number</span>",
  "float-type": "var x: number = 3.14;",
  "arith-op": "+ - * / <span style=\"color: gray\"><em>none</em></span> %",
  "int-div": "Math.floor(x / y)",
  "int-div-zero": "<span style=\"color: gray\"><em>returns assignable value Infinity, NaN, or -Infinity depending upon whether dividend is positive, zero, or negative.<br /><br />There are literals for Infinity and NaN.</em></span>",
  "float-div": "13 / 5",
  "float-div-zero": "<span style=\"color: gray\"><em>same behavior as for integers</em></span>",
  "power": "Math.pow(2, 32)",
  "sqrt": "Math.sqrt(2)",
  "sqrt-negative-one": "NaN",
  "transcendental-func": "Math.exp Math.log Math.sin Math.cos Math.tan Math.asin Math.acos Math.atan Math.atan2",
  "transcendental-const": "Math.PI<br />Math.E",
  "float-truncation": "<span style=\"color: gray\"><em>none</em></span><br />Math.round(3.1)<br />Math.floor(3.1)<br />Math.ceil(3.1)",
  "abs-val": "Math.abs(-3)",
  "int-overflow": "<span style=\"color: gray\"><em>all numbers are floats</em></span>",
  "float-overflow": "Infinity",
  "random-num": "Math.floor(Math.random() * 100)<br />Math.random()<br /><span style=\"color: gray\"><em>none</em></span>",
  "random-seed": "<span style=\"color: gray\"><em>none</em></span>",
  "bit-op": "<span style=\"white-space: pre-wrap;\">&lt;&lt; &gt;&gt; &amp; | ^ ~</span>",
  "binary-octal-hex-literals": "<span style=\"color: gray\"><em>none</em></span><br />052 <span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> deprecated</span><br />0x2a",
  "radix": "(42).toString(7)<br /><span style=\"color: gray\"><em>??</em></span>"
},
"str": {
  "str-type": "var s: string = \"lorem ipsum\";",
  "str-literal": "\"don't say \\\"no\\\"\"<br />'don\\'t say \"no\"'",
  "newline-in-str-literal": "<span style=\"color: gray\"><em>yes</em></span>",
  "str-literal-esc": "<span style=\"color: gray\"><em>single and double quotes:</em></span><br />\\b \\f \\n \\r \\t \\v \\uhhhh \\xhh \\\" \\' \\\\",
  "here-doc": "<span style=\"color: gray\"><em>none</em></span>",
  "var-interpolation": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> None; use string concatenation.<br /><span style=\"white-space: pre-wrap;\">//</span> Both of these expressions are '11':</span><br />1 + \"1\"<br />\"1\" + 1",
  "expr-interpolation": "<span style=\"color: gray\"><em>none</em></span>",
  "format-str": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> None; use string concatenation.<br /><span style=\"white-space: pre-wrap;\">//</span> Evaluates to \"12.35\":</span><br />12.3456.toFixed(2)",
  "mutable-str": "<span style=\"color: gray\"><em>no</em></span>",
  "compare-str": "\"hello\" === \"world\"<br />\"hello\" &lt; \"world\"",
  "copy-str": "<span style=\"color: gray\"><em>none</em></span>",
  "str-concat": "s = \"Hello, \" + \"World!\";",
  "str-replicate": "var hbar = Array(80).join(\"-\");",
  "translate-case": "\"lorem\".toUpperCase()<br />\"LOREM\".toLowerCase()",
  "capitalize": "<span style=\"color: gray\"><em>none</em></span>",
  "trim": "\" lorem \".trim()<br /><span style=\"color: gray\"># some browsers:</span><br />\" lorem\".trimLeft()<br />\"lorem \".trimRight()",
  "pad": "<span style=\"color: gray\"><em>none</em></span>",
  "num-to-str": "\"value: \" + 8",
  "str-to-num": "7 + parseInt(\"12\", 10)<br />73.9 + parseFloat(\".037\")<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> 12:</span><br />parseInt(\"12A\")<br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> NaN:</span><br />parseInt(\"A\")",
  "str-join": "[\"do\", \"re\", \"mi\"].join(\" \")",
  "split": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> [ \"do\", \"re\", \"\", \"mi\", \"\" ]:</span><br />\"do re<span style=\"white-space: pre-wrap;\">  </span>mi \".split(\" \")<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> [ \"do\", \"re\", \"mi\", \"\" ]:</span><br />\"do re<span style=\"white-space: pre-wrap;\">  </span>mi \".split(/\\s+/)",
  "split-in-two": "<span style=\"color: gray\"><em>none</em></span>",
  "split-keep-delimiters": "<span style=\"color: gray\"><em>none</em></span>",
  "prefix-suffix-test": "\"foobar\".startsWith(\"foo\")<br />\"foobar\".endsWith(\"bar\")",
  "str-len": "\"lorem\".length",
  "index-substr": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> returns -1 if not found:</span><br />\"lorem ipsum\".indexOf(\"ipsum\")",
  "extract-substr": "\"lorem ipsum\".substr(6, 5)<br />\"lorem ipsum\".substring(6, 11)",
  "char-type": "",
  "lookup-char": "\"lorem ipsum\"[6]",
  "chr-ord": "String.fromCharCode(65)<br />\"A\".charCodeAt(0)",
  "str-to-char-array": "\"abcd\".split(\"\")",
  "translate-char": "<span style=\"color: gray\"><em>none</em></span>",
  "delete-char": "<span style=\"color: gray\"><em>none</em></span>",
  "squeeze-char": "<span style=\"color: gray\"><em>none</em></span>"
},
"regex": {
  "regex-literal": "/lorem|ipsum/",
  "regex-metachar": "",
  "char-class-abbrev": ". \\d \\D \\s \\S \\w \\W",
  "regex-anchors": "^ $ \\b \\B",
  "regex-test": "if (s.match(/1999/)) {<br /><span style=\"white-space: pre-wrap;\">  </span>alert(\"party!\");<br />}",
  "case-insensitive-regex": "\"Lorem\".match(/lorem/i)",
  "regex-modifiers": "g i m",
  "subst": "s = \"do re mi mi mi\";<br />s.replace(/mi/g, \"ma\");",
  "match-prematch-postmatch": "<span style=\"color: per\">m</span> = /\\d{4}/.exec(s);<br />if (m) {<br /><span style=\"white-space: pre-wrap;\">  </span>match = m[0];<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"># no prematch or postmatch</span><br />}",
  "group-capture": "rx = /^(\\d{4})-(\\d{2})-(\\d{2})$/;<br />m = rx.exec('2009-06-03');<br />yr = m[1];<br />mo = m[2];<br />dy = m[3];",
  "named-group-capture": "<span style=\"color: gray\"><em>none</em></span>",
  "scan": "var a = \"dolor sit amet\".match(/\\w+/g);",
  "backreference": "/(\\w+) \\1/.exec(\"do do\")<br /><br />\"do re\".replace(/(\\w+) (\\w+)/, '$2 $1')",
  "recursive-regex": "<span style=\"color: gray\"><em>none</em></span>"
},
"dates-time": {
  "broken-down-datetime-type": "<span style=\"color: green\">Date</span>",
  "current-datetime": "<span style=\"color: purple\">var</span> <span style=\"color: peru\">t</span> = <span style=\"color: purple\">new</span> <span style=\"color: green\">Date</span>();",
  "current-unix-epoch": "(<span style=\"color: purple\">new</span> <span style=\"color: green\">Date</span>()).getTime() / 1000",
  "broken-down-datetime-to-unix-epoch": "Math.round(t.getTime() / 1000)",
  "unix-epoch-to-broken-down-datetime": "<span style=\"color: purple\">var</span> <span style=\"color: peru\">epoch</span> = 1315716177;<br /><span style=\"color: purple\">var</span> <span style=\"color: peru\">t2</span> = <span style=\"color: purple\">new</span> <span style=\"color: green\">Date</span>(epoch * 1000);",
  "fmt-datetime": "<span style=\"color: gray\"><em>none</em></span>",
  "parse-datetime": "<span style=\"color: gray\"><em>none</em></span>",
  "parse-datetime-without-fmt": "<span style=\"color: purple\">var</span> <span style=\"color: peru\">t</span> = <span style=\"color: purple\">new</span> <span style=\"color: green\">Date</span>(<span style=\"color: maroon\">\"July 7, 1999\"</span>);",
  "date-parts": "t.getFullYear()<br />t.getMonth() + 1<br />t.getDate() <span style=\"color: gray\"># getDay() is day of week</span>",
  "time-parts": "t.getHours()<br />t.getMinutes()<br />t.getSeconds()",
  "build-datetime": "<span style=\"color: purple\">var</span> <span style=\"color: peru\">yr</span> = 1999;<br /><span style=\"color: purple\">var</span> <span style=\"color: peru\">mo</span> = 9;<br /><span style=\"color: purple\">var</span> <span style=\"color: peru\">dy</span> = 10;<br /><span style=\"color: purple\">var</span> <span style=\"color: peru\">hr</span> = 23;<br /><span style=\"color: purple\">var</span> <span style=\"color: peru\">mi</span> = 30;<br /><span style=\"color: purple\">var</span> <span style=\"color: peru\">ss</span> = 0;<br /><span style=\"color: purple\">var</span> <span style=\"color: peru\">t</span> = <span style=\"color: purple\">new</span> <span style=\"color: green\">Date</span>(yr, mo - 1, dy, hr, mi, ss);",
  "datetime-subtraction": "<span style=\"color: gray\">number <em>containing time difference in milliseconds</em></span>",
  "add-duration": "<span style=\"color: purple\">var</span> <span style=\"color: peru\">t1</span> = <span style=\"color: purple\">new</span> <span style=\"color: green\">Date</span>();<br /><span style=\"color: purple\">var</span> <span style=\"color: peru\">delta</span> = (10 * 60 + 3) * 1000;<br /><span style=\"color: purple\">var</span> <span style=\"color: peru\">t2</span> = <span style=\"color: purple\">new</span> <span style=\"color: green\">Date</span>(t1.getTime() + delta);",
  "local-tmz-determination": "",
  "tmz-info": "",
  "daylight-savings-test": "",
  "microseconds": "",
  "sleep": "<span style=\"color: gray\"><em>none</em></span>"
},
"arrays": {
  "array-literal": "var a = [1, 2, 3, 4];<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> two ways to declare type:</span><br />var a: number[] = [1, 2, 3, 4];<br />var a: Array&lt;number&gt; = [1, 2, 3, 4];",
  "array-size": "a.length",
  "array-empty": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> TypeError if a is null or undefined:</span><br />a.length === 0",
  "array-lookup": "a[0]",
  "array-update": "a[0] = \"lorem\"",
  "array-out-of-bounds": "<span style=\"color: gray\"><em>returns</em> undefined</span>",
  "array-element-index": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> returns -1 if not found:</span><br />[6, 7, 7, 8].indexOf(7)<br />[6, 7, 7, 8].lastIndexOf(7)",
  "array-slice": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> select 3rd and 4th elements:</span><br />[\"a\", \"b\", \"c\", \"d\"].slice(2, 4)<br /><span style=\"color: gray\"><em>none</em></span>",
  "array-slice-to-end": "[\"a\", \"b\", \"c\", \"d\"].slice(1)",
  "array-back": "a = [6, 7, 8];<br />a.push(9);<br />i = a.pop();",
  "array-front": "a = [6, 7, 8];<br />a.unshift(5);<br />i = a.shift();",
  "array-concatenation": "a = [1, 2, 3].concat([4, 5, 6]);",
  "replicate-array": "<span style=\"color: gray\"><em>none</em></span>",
  "array-copy": "a = [1, 2, [3, 4]];<br />a2 = a;<br />a3 = a.slice(0);<br />a4 = JSON.parse(JSON.stringify(a));",
  "array-as-func-arg": "<span style=\"color: gray\"><em>parameter contains address copy</em></span>",
  "iterate-over-array": "[1, 2, 3].forEach(function(n) {<br /><span style=\"white-space: pre-wrap;\">  </span>alert(n);<br />});",
  "indexed-array-iteration": "var len = a.length;<br />for (var i = 0; i &lt; len; i++ ) {<br /><span style=\"white-space: pre-wrap;\">  </span>alert(a[i]);<br />}",
  "range-array": "",
  "array-reverse": "var a = [1, 2, 3];<br />a.reverse();",
  "array-sort": "var a = [3, 1, 4, 2];<br />a.sort();",
  "array-dedupe": "",
  "membership": "",
  "intersection": "",
  "union": "",
  "set-diff": "",
  "map": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> callback gets 3 args:<br /><span style=\"white-space: pre-wrap;\">//</span> value, index, array</span><br />a.map(function(x) { return x * x })",
  "filter": "a.filter(function(x) { return x &gt; 1 })",
  "reduce": "a.reduce(function(m, o) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>return m + o;<br /><span style=\"white-space: pre-wrap;\">  </span>}, 0)",
  "universal-existential-test": "var a = [1, 2, 3, 4];<br />var even = function(x) {<br /><span style=\"white-space: pre-wrap;\">  </span>return x % 2 == 0;<br />};<br /><br />a.every(even)<br />a.some(even)",
  "shuffle-sample": "",
  "flatten": "",
  "zip": ""
},
"dict": {
  "dict-literal": "d = {\"t\": 1, \"f\": 0};<br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> keys do not need to be quoted if they<br /><span style=\"white-space: pre-wrap;\">//</span> are a legal JavaScript variable name<br /><span style=\"white-space: pre-wrap;\">//</span>and not a reserved word</span><br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> declare type:</span><br />var d: {[idx: string]: number} = {t: 1, f: 0}",
  "dict-size": "var size = 0;<br />for (var k in d) {<br /><span style=\"white-space: pre-wrap;\">  </span>if (d.hasOwnProperty(k)) size++;<br />}",
  "dict-lookup": "d.hasOwnProperty(\"t\") ? d[\"t\"] : undefined<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> if type of d not declared:</span><br />d.hasOwnProperty(\"t\") ? d.t : undefined",
  "dict-update": "d[\"t\"] = 2;<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> if type of d not declared:</span><br />d.t = 2;",
  "dict-missing-key": "var d = {};<br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> sets s to undefined:</span><br />var s = d[\"lorem\"];<br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> adds key/value pair:</span><br />d[\"lorem\"] = \"ipsum\";",
  "dict-key-check": "d.hasOwnProperty(\"t\");",
  "dict-delete": "delete d[\"t\"];<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> if type of d not declared:</span><br />delete d.t;",
  "dict-assoc-array": "",
  "dict-merge": "",
  "dict-invert": "",
  "dict-iter": "for (var k in d) {<br /><span style=\"white-space: pre-wrap;\">  </span>if (d.hasOwnProperty(k)) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> use k or d[k]</span><br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "dict-key-val": "",
  "dict-sort-values": "function cmp2(a, b) {<br /><span style=\"white-space: pre-wrap;\">  </span>if (a[1] &lt; b[1]) { return -1; }<br /><span style=\"white-space: pre-wrap;\">  </span>if (a[1] &gt; b[1]) { return 1; }<br /><span style=\"white-space: pre-wrap;\">  </span>return 0;<br />}<br /><br />for (p in _.pairs(d).sort(cmp2)) {<br /><span style=\"white-space: pre-wrap;\">  </span>alert(p[0] + \": \" + p[1]);<br />}",
  "dict-default-val": "<span style=\"color: gray\"><em>none</em></span>"
},
"func": {
  "def-func": "function add(x: number, y: number): number {<br /><span style=\"white-space: pre-wrap;\">  </span>return x + y;<br />}<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> parameter and return types optional:</span><br />function add(x, y) {<br /><span style=\"white-space: pre-wrap;\">  </span>return x + y;<br />}",
  "invoke-func": "add(1, 2)",
  "overload-func": "function to_number(x: string): number;<br />function to_number(x: number): number;<br />function to_number(x): number {<br /><span style=\"white-space: pre-wrap;\">  </span>if (typeof(x) == \"string\") { return parseFloat(x); }<br /><span style=\"white-space: pre-wrap;\">  </span>if (typeof(x) == \"number\") { return x; }<br />}",
  "missing-arg": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> compilation error unless arg declared optional.</span><br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> how to declare arg optional:</span><br />function safe_length(s?: string): number {<br /><span style=\"white-space: pre-wrap;\">  </span>return s === undefined ? -1 : s.length;<br />}",
  "extra-arg": "<span style=\"color: gray\"><em>compilation error</em></span>",
  "default-arg": "function my_log(x: number, base: number = 10) {<br /><span style=\"white-space: pre-wrap;\">  </span>return Math.log(x) / Math.log(base);<br />}",
  "variadic-func": "function ends(s: string, …rest: string[]): void {<br /><span style=\"white-space: pre-wrap;\">  </span>console.log(s);<br /><span style=\"white-space: pre-wrap;\">  </span>if (rest.length)<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>console.log(rest[rest.length - 1]);<br />}",
  "named-param": "<span style=\"color: gray\"><em>none</em></span>",
  "retval": "return <span style=\"color: gray\"><em>arg or</em></span> undefined. <span style=\"color: gray\"><em>If invoked with</em></span> new <span style=\"color: gray\"><em>and return value not an object, returns</em></span> this",
  "anonymous-func-literal": "var sqr: (x: number) =&gt; number = function(x) {<br /><span style=\"white-space: pre-wrap;\">  </span>return x * x;<br />}<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> lambda syntax does not bind \"this\"<br /><span style=\"white-space: pre-wrap;\">//</span> to global object:</span><br />var sqr2: (x: number) =&gt; number = (x) =&gt; {<br /><span style=\"white-space: pre-wrap;\">  </span>return x * x;<br />}",
  "invoke-anonymous-func": "sqr(2)",
  "func-as-val": "var func = add;",
  "func-with-state": "",
  "closure": "function make_counter(): () =&gt; number {<br /><span style=\"white-space: pre-wrap;\">  </span>var i = 0;<br /><br /><span style=\"white-space: pre-wrap;\">  </span>return function() {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>i += 1;<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>return i;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "generator": ""
},
"exec-control": {
  "if": "if (0 == n) {<br /><span style=\"white-space: pre-wrap;\">  </span>alert(\"no hits\");<br />} else if (1 == n) {<br /><span style=\"white-space: pre-wrap;\">  </span>alert(\"1 hit\");<br />} else {<br /><span style=\"white-space: pre-wrap;\">  </span>alert(n + \" hits\");<br />}",
  "switch": "switch (n) {<br />case 0:<br /><span style=\"white-space: pre-wrap;\">  </span>alert(\"no hits\\n\");<br /><span style=\"white-space: pre-wrap;\">  </span>break;<br />case 1:<br /><span style=\"white-space: pre-wrap;\">  </span>alert(\"one hit\\n\");<br /><span style=\"white-space: pre-wrap;\">  </span>break;<br />default:<br /><span style=\"white-space: pre-wrap;\">  </span>alert(n + \" hits\\n\");<br />}",
  "while": "while (i &lt; 100) {<br /><span style=\"white-space: pre-wrap;\">  </span>i += 1;<br />}",
  "for": "for (var i = 0; i &lt; 10; i++) {<br /><span style=\"white-space: pre-wrap;\">  </span>alert(i);<br />}",
  "break": "break",
  "continue": "continue",
  "for-local-scope": "",
  "infinite-loop": "",
  "break-from-nested-loops": "",
  "single-stmt-branch-loop": "",
  "dangling-else": ""
},
"exceptions": {
  "base-exc": "<span style=\"color: gray\"><em>Any value can be thrown.</em></span>",
  "predefined-exc": "Error<br /><span style=\"white-space: pre-wrap;\">  </span>EvalError<br /><span style=\"white-space: pre-wrap;\">  </span>RangeError<br /><span style=\"white-space: pre-wrap;\">  </span>ReferenceError<br /><span style=\"white-space: pre-wrap;\">  </span>SyntaxError<br /><span style=\"white-space: pre-wrap;\">  </span>TypeError<br /><span style=\"white-space: pre-wrap;\">  </span>URIError",
  "raise-exc": "throw new Error(\"bad arg\");",
  "catch-all-handler": "try {<br /><span style=\"white-space: pre-wrap;\">  </span>risky();<br />}<br />catch (e) {<br /><span style=\"white-space: pre-wrap;\">  </span>alert(\"risky failed\");<br />}",
  "re-raise-exc": "try {<br /><span style=\"white-space: pre-wrap;\">  </span>throw new Error(\"bam!\");<br />}<br />catch (e) {<br /><span style=\"white-space: pre-wrap;\">  </span>alert(\"re-raising<span style=\"white-space: pre-wrap;\">...</span>\");<br /><span style=\"white-space: pre-wrap;\">  </span>throw e;<br />}",
  "def-exc": "function Bam(msg) {<br /><span style=\"white-space: pre-wrap;\">  </span>this.message = msg;<br />}<br /><br />Bam.prototype = new Error;",
  "handle-exc": "try {<br /><span style=\"white-space: pre-wrap;\">  </span>throw new Bam(\"bam!\");<br />}<br />catch (e) {<br /><span style=\"white-space: pre-wrap;\">  </span>if (e instanceof Bam) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>alert(e.message);<br /><span style=\"white-space: pre-wrap;\">  </span>}<br /><span style=\"white-space: pre-wrap;\">  </span>else {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>throw e;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "finally-block": "acquire_resource();<br />try {<br /><span style=\"white-space: pre-wrap;\">  </span>risky();<br />}<br />finally {<br /><span style=\"white-space: pre-wrap;\">  </span>release_resource();<br />}"
},
"streams": {
  "std-file-handles": "process.stdin<br />process.stdout<br />process.stderr",
  "read-line-stdin": "",
  "eof": "",
  "chomp": "",
  "write-line-stdout": "console.log(\"Hello, World\");",
  "printf": "",
  "open-file": "",
  "open-file-write": "var f = fs.openSync(\"/tmp/test\", \"w\");",
  "file-encoding": "",
  "open-file-append": "",
  "close-file": "",
  "close-file-implicitly": "",
  "io-err": "",
  "encoding-err": "",
  "read-line": "",
  "file-iterate": "",
  "read-file-array": "",
  "read-file-str": "var fs = require('fs');<br /><br />var s = fs.readFileSync('/etc/hosts', 'utf8');",
  "write-str": "",
  "write-line": "",
  "flush": "",
  "eof-test": "",
  "seek": "",
  "tmp-file": "",
  "stringio": ""
},
"file": {
  "file-test": "var fs = require('fs');<br /><br />var qry = fs.existsSync('/etc/hosts');<br /><br />var stat = fs.statSync('/etc/hosts');<br />var qry2 = stat.isFile();",
  "file-size": "var fs = require('fs');<br /><br />var stat = fs.statSync('/etc/hosts');<br />var sz = stat.size;",
  "readable-writable-executable": "",
  "chmod": "var fs = require('fs');<br /><br />fs.chmodSync('/tmp/foo',<br /><span style=\"white-space: pre-wrap;\">  </span>parseInt('755', 8));",
  "last-modification-time": "var fs = require('fs');<br /><br />var stat = fs.statSync('/etc/hosts');<br />var dt = stat.mtime;",
  "file-cp-rm-mv": "<span style=\"color: gray\"># npm install fs-extra</span><br />var fs = require('fs-extra');<br /><br />fs.copySync('/tmp/foo', '/tmp/bar');<br />fs.unlinkSync('/tmp/foo');<br />fs.renameSync('/tmp/bar', '/tmp/foo');",
  "symlink": "var fs = require('fs');<br /><br />fs.symlinkSync('/etc/hosts',<br /><span style=\"white-space: pre-wrap;\">  </span>'/tmp/hosts');<br />var stat = fs.statSync('/tmp/hosts');<br />stat.isSymbolicLink();<br />var path = fs.readlinkSync(<br /><span style=\"white-space: pre-wrap;\">  </span>'/tmp/hosts');",
  "unused-file-name": ""
},
"file-fmt": {
  "parse-csv": "var fs = require('fs');<br /><span style=\"color: gray\"># npm install csv</span><br />var csv = require('csv');<br /><br />var s = fs.readFileSync('no-header.csv');<br />var a;<br />csv().from.string(s).to.array(function(d) { a = d });",
  "generate-csv": "<span style=\"color: gray\"># npm install csv</span><br />var csv = require('csv');<br /><br />var a = [['one', 'une', 'uno'],<br />['two', 'deux', 'dos']];<br /><br />var s;<br />csv().from.array(a).to.string(function (o) { s = o; });",
  "parse-json": "var s1 = '{\"t\":1,\"f\":0}';<br />var d1 = JSON.parse(s1);",
  "generate-json": "var d2 = {'t': 1, 'f': 0};<br />var s2 = JSON.stringify(d1);",
  "parse-yaml": "",
  "generate-yaml": "",
  "parse-xml": "<span style=\"color: gray\"># npm install xmldom xpath</span><br />var dom = require('xmldom').DOMParser;<br />var xpath = require('xpath');<br /><br />var xml = '&lt;a&gt;&lt;b&gt;&lt;c ref=\"3\"&gt;foo&lt;/c&gt;&lt;/b&gt;&lt;/a&gt;';<br />var doc = new dom().parseFromString(xml);<br />var nodes = xpath.select('/a/b/c', doc);<br />nodes.length;<br />nodes[0].firstChild.data;",
  "generate-xml": "<span style=\"color: gray\"># npm install xmlbuilder</span><br />var builder = require('xmlbuilder');<br /><br />var xml = builder.create('a').ele('b', {id: 123}, 'foo').end();",
  "parse-html": ""
},
"dir": {
  "working-dir": "var old_dir = process.cwd();<br /><br />process.chdir(\"/tmp\");",
  "build-pathname": "",
  "dirname-basename": "",
  "absolute-pathname": "",
  "dir-iterate": "var fs = require('fs');<br /><br />fs.readdirSync('/etc').forEach(<br /><span style=\"white-space: pre-wrap;\">  </span>function(s) { console.log(s); }<br />);",
  "glob": "",
  "mkdir": "",
  "recursive-cp": "",
  "rmdir": "",
  "rm-rf": "",
  "dir-test": "",
  "unused-dir": "",
  "system-tmp-dir": ""
},
"processes-environment": {
  "cmd-line-arg": "process.argv.slice(2)<br />process.argv[1]<br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> process.argv[0] contains \"node\"</span>",
  "env-var": "process.env[\"HOME\"]<br /><br />process.env[\"PATH\"] = \"/bin\";",
  "pid": "process.pid<br /><span style=\"color: gray\"><em>none</em></span>",
  "user-id-name": "",
  "exit": "process.exit(0);",
  "signal-handler": "",
  "executable-test": "",
  "external-cmd": "",
  "shell-esc-external-cmd": "",
  "cmd-subst": ""
},
"lib-namespaces": {
  "load-lib": "",
  "load-lib-subdir": "",
  "hot-patch": "",
  "load-err": "",
  "main-in-lib": "",
  "lib-path": "",
  "lib-path-env": "",
  "lib-path-cmd-line": "",
  "simple-global-identifiers": "",
  "multiple-label-identifiers": "",
  "label-separator": "",
  "root-namespace": "",
  "namespace-decl": "",
  "child-namespace-decl": "",
  "import-def": "",
  "import-namespace": "",
  "import-all-subnamespaces": "",
  "shadow-avoidance": ""
},
"user-defined-types": {
  "enumerated-type": "enum Color {Red, Green, Blue};<br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> assigns c the value 1:</span><br />var c: Color = Color.Green;",
  "struct-def": "interface Medals {<br /><span style=\"white-space: pre-wrap;\">  </span>country: string,<br /><span style=\"white-space: pre-wrap;\">  </span>gold: number,<br /><span style=\"white-space: pre-wrap;\">  </span>silver: number,<br /><span style=\"white-space: pre-wrap;\">  </span>bronze: number<br />};",
  "optional-struct-member": "interface Person {<br /><span style=\"white-space: pre-wrap;\">  </span>name: string,<br /><span style=\"white-space: pre-wrap;\">  </span>alma_mater?: string<br />}",
  "struct-literal": "var france: Medals = {country: \"France\",<br /><span style=\"white-space: pre-wrap;\">  </span>gold: 8,<br /><span style=\"white-space: pre-wrap;\">  </span>silver: 7,<br /><span style=\"white-space: pre-wrap;\">  </span>bronze: 9<br />};<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> not an error for the literal to contain members<br /><span style=\"white-space: pre-wrap;\">//</span> not in the struct definition</span>",
  "struct-lookup": "france.gold",
  "struct-update": "france.gold = 9;<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> assignment to members not in struct definition<br /><span style=\"white-space: pre-wrap;\">//</span> is permitted</span>",
  "type-alias": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> function:</span><br />interface BinaryOp {<br /><span style=\"white-space: pre-wrap;\">  </span>(x: number, y: number): number<br />}<br /><br />var add: BinaryOp = (x, y) =&gt; { return x + y; }<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> array or dictionary:</span><br />interface NumberSeq {<br /><span style=\"white-space: pre-wrap;\">  </span>[index: number]: number<br />}<br /><br />var primes: NumberSeq = [2, 3, 5, 7, 11];"
},
"generic-types": {
  "generic-func": "function identity&lt;T&gt;(arg: T): T {<br /><span style=\"white-space: pre-wrap;\">  </span>return arg;<br />}<br /><br />console.log(identity(\"lorem ipsum\"));",
  "generic-class": "class Holder&lt;T&gt; {<br /><span style=\"white-space: pre-wrap;\">  </span>constructor(public value: T) {}<br />}<br /><br />var holder = new Holder&lt;number&gt;(3);<br />console.log(holder.value);"
},
"objects": {
  "def-class": "class Int {<br /><span style=\"white-space: pre-wrap;\">  </span>public value: number;<br /><span style=\"white-space: pre-wrap;\">  </span>constructor(v: number) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>this.value = v;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> constructor params declared public or<br /><span style=\"white-space: pre-wrap;\">//</span> private become object attributes</span><br />class Int {<br /><span style=\"white-space: pre-wrap;\">  </span>constructor(public value: number) {}<br />}",
  "create-obj": "var i = new Int(0);<br />var i2 = new Int(7);",
  "instance-var": "",
  "getter-setter": "i.value = i.value + 1;",
  "def-method": "class Int {<br /><span style=\"white-space: pre-wrap;\">  </span>constructor(public value: number) {}<br /><span style=\"white-space: pre-wrap;\">  </span>plus(v: number) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>this.value += v;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "invoke-method": "i.plus(3);",
  "def-class-method": "class Int {<br /><span style=\"white-space: pre-wrap;\">  </span>static getInstances() {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>return Int.instances;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "invoke-class-method": "Int.getInstances()",
  "def-classs-var": "class Int {<br /><span style=\"white-space: pre-wrap;\">  </span>static instances: number = 0;<br /><span style=\"white-space: pre-wrap;\">  </span>constructor(public value: number) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>Int.instances += 1;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "class-var-getter-setter": "Int.instances = Int.instances + 1;",
  "method-missing": "",
  "destructor": ""
},
"inheritance-polymorphism": {
  "inheritance": "class Counter extends Int {<br /><span style=\"white-space: pre-wrap;\">  </span>constructor(v: number) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>super(v);<br /><span style=\"white-space: pre-wrap;\">  </span>}<br /><span style=\"white-space: pre-wrap;\">  </span>incr() {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>this.value += 1;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}"
},
"reflection": {
  "object-id": "<span style=\"color: gray\"><em>none</em></span>",
  "inspect-type": "typeof([]) === 'object'",
  "types": "number<br />string<br />boolean<br />undefined<br />function<br />object<br /><br /><span style=\"color: gray\"># these evaluate as 'object':</span><br />typeof(null)<br />typeof([])<br />typeof({})",
  "inspect-class": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> returns prototype object:</span><br />Object.getPrototypeOf(o)",
  "inspect-class-hierarchy": "var pa = Object.getPrototypeOf(o)<br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span>prototype's of prototype object:</span><br />var grandpa = Object.getPrototypeOf(pa)",
  "has-method": "o.reverse &amp;&amp; typeof(o.reverse) === 'function'",
  "msg-passing": "<span style=\"color: gray\"><em>not a standard feature</em></span>",
  "eval": "eval('1 + 1')",
  "list-obj-methods": "",
  "list-obj-attr": "",
  "list-loaded-lib": "",
  "list-loaded-namespaces": "",
  "inspect-namespace": "",
  "pretty-print": "var d = {\"lorem\": 1, \"ipsum\": [2, 3]};<br />console.log(JSON.stringify(d, null, 2));",
  "src-line-file": "",
  "cmd-line-doc": ""
},
"net-web": {
  "hostname-ip": "",
  "http-get": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> npm install request</span><br />var request = require('request');<br /><br />request('<span style=\"white-space: pre-wrap;\">http://www.google.com</span>',<br /><span style=\"white-space: pre-wrap;\">  </span>function(err, resp, body) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>if (!err &amp;&amp; resp.statusCode == 200) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>console.log(body);<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>}<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />);",
  "http-post": "",
  "serve-pwd": "",
  "absolute-url": "",
  "parse-url": "",
  "url-encode": "",
  "html-escape": "",
  "base64": ""
},
"debug-profile": {
  "check-syntax": "$ tsc <span style=\"white-space: pre-wrap;\">--</span>noEmit foo.ts",
  "lint": "$ npm install -g tslint<br />$ tslint -c ~/.tslint.json -f foo.ts"
}
}
