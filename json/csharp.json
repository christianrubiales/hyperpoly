{

"version": {
  "version-used": "<span style=\"color: gray\"><em>mono 2.10 (C# 4.0)</em></span>",
  "show-version": "$ mcs <span style=\"white-space: pre-wrap;\">--</span>version",
  "implicit-prologue": ""
},
"grammar-execution": {
  "hello-world": "$ cat hello.cs<br />using System;<br /><br />public class Hello {<br /><span style=\"white-space: pre-wrap;\">  </span>public static void Main() {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>Console.WriteLine(\"Hello, World!\");<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}<br /><br />$ mcs hello.cs<br /><br />$ mono hello.exe",
  "file-suffixes": "Foo.cs<br /><span style=\"color: gray\"><em>none</em></span><br />Foo.exe <span style=\"color: gray\"><em>or</em></span> Foo.dll<br /><br /><span style=\"color: gray\"><em>although files are often named after a class they contain, this is not required</em></span>",
  "block-delimiters": "{ }",
  "stmt-terminator": ";",
  "top-level-stmt": "",
  "eol-comment": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> comment</span>",
  "multiple-line-comment": "<span style=\"color: gray\">/* comment<br />another comment */</span>"
},
"variables-expressions": {
  "local-var": "int i;<br />int j = 3;",
  "uninitialized-local-var": "<span style=\"color: gray\"><em>compiler prevents use of uninitialized local variable</em></span>",
  "global-var": "",
  "uninitialized-global-var": "",
  "write-once-var": "const int i = 7;",
  "assignment": "",
  "compound-assignment": "",
  "incr-decr": "",
  "addr": "",
  "dereference": "",
  "type-size": "",
  "addr-arith": "",
  "unique-ptr": "",
  "ref-cnt-ptr": "",
  "weak-ptr": "",
  "allocate-heap": "object i = 0;",
  "uninitialized-heap": "",
  "free-heap": "<span style=\"color: gray\"><em>garbage collected</em></span>",
  "null": "null",
  "coalesce": "string s1 = s2 ?? \"was null\";"
},
"arithmetic-logic": {
  "boolean-type": "bool",
  "true-false": "true false",
  "falsehoods": "false",
  "logical-op": "&amp;&amp; <span style=\"white-space: pre-wrap;\">||</span> !",
  "relational-op": "== != &lt; &gt; &lt;= &gt;=",
  "int-type": "sbyte <span style=\"color: gray\"><em>1 byte</em></span><br />short <span style=\"color: gray\"><em>2 bytes</em></span><br />int <span style=\"color: gray\"><em>4 bytes</em></span><br />long <span style=\"color: gray\"><em>8 bytes</em></span>",
  "unsigned-type": "byte <span style=\"color: gray\"><em>1 byte</em></span><br />ushort <span style=\"color: gray\"><em>2 bytes</em></span><br />uint <span style=\"color: gray\"><em>4 bytes</em></span><br />ulong <span style=\"color: gray\"><em>8 bytes</em></span>",
  "float-type": "float <span style=\"color: gray\"><em>4 bytes</em></span><br />double <span style=\"color: gray\"><em>8 bytes</em></span>",
  "fixed-type": "decimal <span style=\"color: gray\"><em>12 bytes</em></span>",
  "arithmetic-op": "+ - * / %",
  "int-div": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> evaluates to 2:</span><br />7 / 3",
  "int-div-zero": "<span style=\"color: gray\"><em>Syntax error if divisor is a constant. Otherwise throws</em></span> System.DivideByZeroException",
  "float-div": "7 / (float)3",
  "float-div-zero": "float.PositiveInfinity<br />float.NaN<br />float.NegativeInfinity<br /><br /><span style=\"color: gray\"><em>constants with same names defined in</em></span> double",
  "power": "System.Math.Pow(2.0, 32.0);",
  "sqrt": "Math.Sqrt(2)",
  "sqrt-negative-one": "double.NaN",
  "transcendental-func": "using System;<br /><span style=\"white-space: pre-wrap;\"> </span><br />Math.Exp Math.Log <span style=\"color: gray\"><em>none</em></span> Math.Log10<br />Math.Sin Math.Cos Math.Tan<br />Math.Asin Math.Acos Math.Atan<br />Math.Atan2",
  "transcendental-const": "System.Math.E<br />System.Math.PI",
  "float-truncation": "using System;<br /><span style=\"white-space: pre-wrap;\"> </span><br />(long)3.77<br />Math.Round(3.77)<br />Math.Floor(3.77)<br />Math.Ceiling(3.77)",
  "absolute-val": "System.Math.Abs(-7)<br />System.Math.Abs(-7.77)",
  "int-overflow": "<span style=\"color: gray\"><em>modular arithmetic</em></span>",
  "float-overflow": "float.PositiveInfinity",
  "float-limits": "float.MaxValue<br />float.Epsilon<br />double.MaxValue<br />double.Epsilon",
  "complex-construction": "",
  "complex-decomposition": "",
  "random-num": "using System;<br /><br />Random rnd = new Random();<br /><br />int i = rnd.Next();<br />double x = rnd.NextDouble();<br /><span style=\"color: gray\"><em>none</em></span>",
  "random-seed": "using System;<br /><br />Random rnd = new Random(17);",
  "bit-op": "<span style=\"white-space: pre-wrap;\"> &lt;&lt; &gt;&gt; &amp; | ^ ~ </span>",
  "binary-octal-hex-literals": "<span style=\"color: gray\"><em>none</em></span><br />052<br />0x2a",
  "radix": ""
},
"strings": {
  "str-type": "string",
  "str-literal": "\"don't say \\\"no\\\"\"",
  "newline-literal": "<span style=\"color: gray\"><em>string literals can extend over multiple lines, but the newlines do not appear in the resulting string</em></span>",
  "str-literal-escape": "\\a \\b \\f \\n \\r \\t \\v<br />\\\\ \\\" \\'<br />\\x<span style=\"color: gray\"><em>hh</em></span> \\x<span style=\"color: gray\"><em>hhhh</em></span> \\<span style=\"color: gray\"><em>o</em></span> \\<span style=\"color: gray\"><em>oo</em></span> \\<span style=\"color: gray\"><em>ooo</em></span>",
  "allocate-str": "string s = \"hello\";<br />string t = string.Copy(s);",
  "mutable-str": "",
  "copy-str": "",
  "fmt-str": "string.Format(\"{0}: {1}\", \"Spain\", 7)",
  "compare-str": "\"hello\".CompareTo(\"world\")",
  "str-concat": "\"hello\" + \" world\"",
  "str-replicate": "",
  "translate-case": "\"hello\".ToUpper()<br />HELLO\".ToLower()",
  "trim": "\" hello \".Trim()",
  "pad": "\"hello\".PadLeft(10)",
  "num-to-str": "14.ToString()<br />14.7.ToString()",
  "str-to-num": "byte.Parse(\"14\")<br />short.Parse(\"14\")<br />int.Parse(\"14\")<br />long.Parse(\"14\")<br />float.Parse(\"14\")<br />double.Parse(\"14\")<br />decimal.Parse(\"14\")",
  "join": "System.String.Join(\", \", names)",
  "split": "string[] names = \"Bob Ned Amy\".Split(' ');",
  "serialize": "",
  "str-length": "s.Length",
  "index-substr": "\"hello\".IndexOf(\"ll\")",
  "extract-substr": "\"hello\".Substring(2, 2)",
  "char-type": "char<br />Char",
  "char-literal": "char n = 'X';",
  "test-char": "System.Char.IsLetter(Char)<br />System.Char.IsNumber(Char)<br />System.Char.IsWhiteSpace(Char)<br />System.Char.IsUpper(Char)<br />System.Char.IsLower(Char)"
},
"regexes": {
  "regex-type": "",
  "char-class-abbrev": "",
  "regex-anchors": "",
  "regex-lookahead": "",
  "regex-test": "using System.Text.RegularExpressions;<br />Regex regex = new Regex(\"ll\");<br />bool isMatch = regex.IsMatch(\"hello\");",
  "case-insensitive-regex": "",
  "regex-modifiers": "",
  "subst": "using System.Text.RegularExpressions;<br />Regex r1 = new Regex(\"ll\");<br />String s1 = r1.Replace(\"hello\", \"LL\", 1);<br />Regex r2 = new Regex(\"l\");<br />String s2 = r2.Replace(\"hello\", \"L\");",
  "match-prematch-postmatch": "",
  "group-capture": ""
},
"dates-time": {
  "date-time-type": "System.DateTime",
  "current-date-time": "using System;<br /><br />DateTime dt = DateTime.Now;",
  "unix-epoch": "using System;<br /><br />long tenM = 10 * 1000 * 1000;<br />long sec = dt.ToFileTimeUtc() / tenM;<br />long epoch = sec - 11644473600;<br /><br />long ft = (epoch + 11644473600) * tenM;<br />DateTime dt2 = DateTime.FromFileTimeUtc(ft);",
  "date-time-to-str": "dt.ToString()",
  "format-date": "String s = \"yyyy-MM-dd HH:mm:ss\");<br />String s2 = dt.ToString(s);",
  "parse-date": "using System;<br />using System.Globalization;<br /><br />CultureInfo enUS =<br /><span style=\"white-space: pre-wrap;\">  </span>new CultureInfo(\"en-US\");<br /><br />DateTime dt2 = DateTime.ParseExact(<br /><span style=\"white-space: pre-wrap;\">  </span>\"2011-05-03 17:00:00\",<br /><span style=\"white-space: pre-wrap;\">  </span>\"yyyy-MM-dd HH:mm:ss\",<br /><span style=\"white-space: pre-wrap;\">  </span>enUS);",
  "date-subtraction": "",
  "add-duration": "",
  "date-parts": "",
  "time-parts": "",
  "build-datetime": ""
},
"fixed-length-arrays": {
  "fixed-len-array-stack": "<span style=\"color: gray\"><em>arrays must be allocated on heap</em></span>",
  "fixed-len-array-heap": "int[] a = new int[10];",
  "free-fixed-len-array-heap": "<span style=\"color: gray\"><em>garbage collected</em></span>",
  "fixed-len-array-init-list": "int[] a = {1,2,3};",
  "fixed-len-array-size": "a.Length",
  "fixed-len-array-lookup": "a[0]",
  "fixed-len-array-update": "",
  "fixed-len-array-out-of-bounds": "IndexOutOfRangeException",
  "copy-fixed-len-array": "",
  "fixed-len-array-as-func-arg": "",
  "iterate-over-fixed-len-array": "foreach (string name in names) {",
  "sort-fixed-len-array": ""
},
"resizable-arrays": {
  "decl-resizable-array": "using System.Collections.Generic;<br />List&lt;string&gt; l = new List&lt;string&gt;();",
  "resizable-array-init-list": "",
  "resizable-array-size": "l.Count",
  "resizable-array-capacity": "",
  "resizable-array-empty-test": "",
  "resizable-array-lookup": "l[0]",
  "resizable-array-update": "",
  "resizable-array-out-of-bounds": "<span style=\"color: gray\"><em>throws</em></span> System.ArgumentOutOfRangeException",
  "resizable-array-elem-index": "",
  "slice-resizable-array": "",
  "slice-resizable-array-to-end": "",
  "resizable-array-back": "l.Add(\"hello\");<br />l.RemoveAt(l.Count - 1);",
  "resizable-array-front": "",
  "concat-resizable-array": "",
  "replicate-resizable-array-elem": "",
  "copy-resizable-array": "",
  "resizable-array-as-func-arg": "",
  "iterate-over-resizable-array": "foreach ( string s in l ) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>do something with s</em></span><br />}",
  "indexed-array-iteration": "",
  "reverse-array": "",
  "sort-array": "",
  "dedupe-array": "",
  "membership": ""
},
"tuples": {
  "tuple-ctor": "",
  "tuple-lookup": "",
  "tuple-decompose": "",
  "tuple-update": "",
  "tuple-len": "",
  "pair-ctor": "using System.Collections.Generic;<br />KeyValuePair&lt;string,int&gt; pr = new KeyValuePair&lt;string,int&gt;(\"hello\",5);<br />System.Console.WriteLine(\"{0} {1}\", pr.Key, pr.Value);",
  "pair-lookup": "",
  "pair-update": ""
},
"dictionaries": {
  "dict-ctor": "using System.Collections.Generic;<br />Dictionary&lt;string, int&gt; dict = new Dictionary&lt;string, int&gt;();",
  "dict-lookup": "dict.Add(\"hello\", 5);<br />dict[\"hello\"]",
  "dict-size": "dict.Count",
  "dict-delete": "dict.Remove(\"hello\");",
  "dict-missing-key": "<span style=\"color: gray\"><em>throws</em></span> KeyNotFoundException<br /><span style=\"color: gray\"><em>in</em> System.Collections.Generic</span>",
  "dict-iter": "foreach ( KeyValuePair&lt;string,int&gt; e in dict) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>use e.Key and e.Value</em></span><br />}"
},
"functions": {
  "decl-func": "",
  "def-func": "",
  "call-func": "",
  "def-static-class-method": "",
  "invoke-static-class-method": "",
  "overload-func": "<span style=\"color: gray\"><em>yes</em></span>",
  "default-arg": "<span style=\"color: gray\"><em>use method overloading</em></span>",
  "variable-num-arg": "public static string concat(params string[] args) {<br /><span style=\"white-space: pre-wrap;\">  </span>return System.String.Join(\"\",args);<br />}<br />string s = Concat.concat(\"Hello\", \", \", \"World\", \"!\")",
  "named-param": "<span style=\"color: gray\"><em>added in C# 4.0:</em></span><br />static int BMI(int weight, int height) {<br /><span style=\"white-space: pre-wrap;\">  </span>return (weight * 703) / (height * height);<br />}<br />BMI(weight: 123, height: 64);<br />BMI(height: 64, weight: 123);",
  "pass-by-val": "<span style=\"color: gray\"><em>primitive types are always passed by value</em></span>",
  "pass-by-ref": "<span style=\"color: gray\"><em>objects and arrays are always passed by reference</em></span><br /><br /><span style=\"color: gray\"><em>also out parameter</em></span>",
  "pass-by-addr": "<span style=\"color: gray\"><em>none</em></span>",
  "retval": "",
  "no-retval": "",
  "recursive-func": "",
  "anon-func-literal": "",
  "invoke-anonymous-func": "",
  "closure": "",
  "func-private-state": "",
  "func-as-val": "",
  "overload-op": "public static Rational operator+(Rational a, Rational b) {<br /><span style=\"white-space: pre-wrap;\">  </span>return new Rational(a.num*b.denom + b.num *a.denom,a.denom*b.denom);<br />}"
},
"execution-control": {
  "if": "if (i&gt;0) {<br /><span style=\"white-space: pre-wrap;\">  </span>signum = 1;<br />} else if (i==0) {<br /><span style=\"white-space: pre-wrap;\">  </span>signum = 0;<br />} else {<br /><span style=\"white-space: pre-wrap;\">  </span>signum = -1;<br />}",
  "dangling-else": "",
  "switch": "switch(i) {<br />case 0:<br /><span style=\"white-space: pre-wrap;\">  </span>0;<br /><span style=\"white-space: pre-wrap;\">  </span>break;<br />case 1:<br /><span style=\"white-space: pre-wrap;\">  </span>1;<br /><span style=\"white-space: pre-wrap;\">  </span>break;<br />default:<br /><span style=\"white-space: pre-wrap;\">  </span>-1;<br /><span style=\"white-space: pre-wrap;\">  </span>break;<br />}",
  "while": "int i = 0;<br />while (i&lt;10) {<br /><span style=\"color: gray\">…</span><br /><span style=\"white-space: pre-wrap;\">  </span>i++;<br />}",
  "for": "int i, n;<br />for (i=1,n=1; i&lt;=10; i++) {<br /><span style=\"white-space: pre-wrap;\">  </span>n *= i;<br />}",
  "break": "",
  "break-nested-loops": "",
  "continue": "",
  "goto": ""
},
"exceptions": {
  "base-exc": "",
  "predefined-exc": "",
  "raise-exc": "throw new System.Exception(\"failed\");",
  "handle-exc": "try {<br /><span style=\"white-space: pre-wrap;\">  </span>throw new System.Exception(\"failed\");<br />} catch (System.Exception e) {<br /><span style=\"white-space: pre-wrap;\">  </span>System.Console.WriteLine(e.Message);<br />}",
  "def-exc": "",
  "re-raise-exc": "",
  "catch-all-handler": "",
  "multiple-handlers": "",
  "uncaught-exc": "",
  "error-msg": "",
  "errno": "",
  "finally-clause": "try {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>risky code</em></span><br />} finally {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>perform cleanup</em></span><br />}",
  "exc-specification": "<span style=\"color: gray\"><em>no</em></span>"
},
"concurrency": {
  "start-thread": "",
  "terminate-current-thread": "",
  "terminate-other-thread": "",
  "list-threads": "",
  "wait-on-thread": "",
  "lock": "",
  "create-msg-queue": "",
  "send-msg": "",
  "receive-msg": ""
},
"file-handles": {
  "std-file-handles": "",
  "read-line-stdin": "",
  "printf": "System.Console.WriteLine(\"count: {0}\", 7);",
  "read-from-file": "using System.IO;<br /><br />StreamReader sr = new StreamReader(\"/etc/passwd\");<br />string line;<br /><br />while ((line = sr.ReadLine()) != null) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> process line</span><br />}",
  "write-to-file": "using System.IO;<br /><br />StreamWriter fout = new StreamWriter(\"/tmp/test3\");<br />int i;<br /><br />for (i = 0; i &lt; 10; i++) {<br /><span style=\"white-space: pre-wrap;\">  </span>fout.WriteLine(i.ToString());<br />}<br />fout.Close();"
},
"files": {
  "file-test": "System.IO.File.Exists(\"/etc/hosts\")",
  "file-size": "",
  "readable-writable-executable": "",
  "chmod": "",
  "file-cp-rm-mv": ""
},
"file-fmt": {
  "csv": "",
  "json": "",
  "build-xml": "",
  "parse-xml": "",
  "parse-html": ""
},
"directories": {
  "build-pathname": "",
  "dirname-basename": "",
  "absolute-pathname": "",
  "iterate-dir": "",
  "glob": "",
  "mkdir": "",
  "recursive-cp": "",
  "rmdir": "",
  "rm-rf": "",
  "dir-test": "",
  "unused-dir": "",
  "system-tmp-dir": ""
},
"processes-environment": {
  "signature-of-main": "public class <em>Foo</em> {<br /><span style=\"white-space: pre-wrap;\">  </span>public static void Main(string[] args) {",
  "first-argument<br-/>": "<span style=\"color: gray\"><em>first command line argument</em></span>",
  "environment-variable": "using System.Environment;<br />string home = GetEnvironmentVariable(\"HOME\");<br />SetEnvironmentVariable(\"EDITOR\", \"emacs\");<br />SetEnvironmentVariable(\"EDITOR\", null);",
  "iterate-through-environment-variables": "using System.Collections;<br />using System.Environment;<br />IDictionary env = GetEnvironmentVariables();<br />foreach (DictionaryEntry de in env) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>use de.Key or de.Value</em></span><br />}"
},
"libraries-namespaces": {
  "std-lib-name": "<span style=\"color: gray\"><em>Base Class Library</em></span>",
  "declare-namespace": "namespace foo {<br /><span style=\"white-space: pre-wrap;\">  </span>namespace bar {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>public class Baz {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>public const int ANSWER = 42;<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>};<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "multiple-namespaces-per-file": "<span style=\"color: gray\"><em>yes</em></span>",
  "namespaces-map-to-directories": "<span style=\"color: gray\"><em>no</em></span>",
  "import-namespace": "using foo.bar;<br />System.Console.WriteLine(Baz.ANSWER);",
  "import-part-of-namespace": "<span style=\"color: gray\"><em>none</em></span>",
  "import-symbol": "<span style=\"color: gray\"><em>none</em></span>",
  "import-static-symbol": "<span style=\"color: gray\"><em>none</em></span>",
  "import-position<br-/>": "<span style=\"color: gray\"><em>outside of class definitions</em></span>",
  "using-a-symbol-that-hasn't-been-imported": "using System.Console;<br />WriteLine(foo.bar.Baz.ANSWER);",
  "app-env": "",
  "multiple-installations": "",
  "pkg-manager": ""
},
"user-defined-types": {
  "typedef": "<span style=\"color: gray\"><em>none</em></span>",
  "enum": "public enum DayOfWeek { MON, TUE, WED, THU, FRI, SAT, SUN };<br />DayOfWeek d = DayOfWeek.TUE;",
  "struct-definition": "public class MedalCount {<br /><span style=\"white-space: pre-wrap;\">  </span>public string country;<br /><span style=\"white-space: pre-wrap;\">  </span>public int gold;<br /><span style=\"white-space: pre-wrap;\">  </span>public int silver;<br /><span style=\"white-space: pre-wrap;\">  </span>public int bronze;<br />}",
  "struct-declaration": "MedalCount spain = new MedalCount();",
  "struct-initialization": "<span style=\"color: gray\"><em>no object literal syntax; define a constructor</em></span>",
  "struct-member-assignment": "spain.country = \"Spain\";<br />spain.gold = 3;<br />spain.silver = 7;<br />spain.bronze = 4;",
  "struct-member-access": "int spain_total = spain.gold + spain.silver + spain.bronze;"
},
"generic-types": {
  "define-generic-type": "public class Foo&lt;A&gt; {<br /><span style=\"white-space: pre-wrap;\">  </span>public A a;<br /><span style=\"white-space: pre-wrap;\">  </span>public Foo(A a) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>this.a = a;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "instantiate-generic-type": "Foo&lt;string&gt; f = new Foo&lt;string&gt;(\"foo\");",
  "generic-function": "",
  "generic-array": "public class Bar&lt;C&gt; {<br /><span style=\"white-space: pre-wrap;\">  </span>public C[] a;<br /><span style=\"white-space: pre-wrap;\">  </span>public Bar(C c) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>this.a = new C[10];<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "value-parameter": "",
  "template-parameter": "",
  "template-specialization": "",
  "multiple-type-parameters": "",
  "generic-type-parameters": "",
  "template-parameters": "",
  "variadic-template": ""
},
"objects": {
  "str-equal": "<span style=\"color: gray\"><em>value comparison</em></span>",
  "define-class": "public class Rational {<br /><span style=\"white-space: pre-wrap;\">  </span>public int num;<br /><span style=\"white-space: pre-wrap;\">  </span>public int denom;<br />}",
  "class-definition-location": "",
  "constructor": "public Rational(int n, int d) {<br /><span style=\"white-space: pre-wrap;\">  </span>if (0 == d) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>throw new System.Exception(\"zero denominator\");<br /><span style=\"white-space: pre-wrap;\">  </span>}<br /><span style=\"white-space: pre-wrap;\">  </span>if (d &lt; 0) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>this.num = -1 * n;<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>this.denom = -1 * d;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br /><span style=\"white-space: pre-wrap;\">  </span>else {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>this.num = n;<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>this.denom = d;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "create-object": "Rational r = new Rational(7,3);",
  "destructor": "~Rational() {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>perform cleanup</em></span><br />}",
  "destroy-object<br-/>": "<span style=\"color: gray\"><em>none</em></span>",
  "define-method": "public int Height() {<br /><span style=\"white-space: pre-wrap;\">  </span>return (System.Math.Abs(this.num) &gt; this.denom) ? System.Math.Abs(this.num) : this.denom;<br />}",
  "invoke-method": "r.Height();",
  "define-class-method": "<span style=\"color: gray\"><em>declare static in class definition</em></span>",
  "invoke-class-method": "",
  "name-of-receiver": "this",
  "access-control": "<span style=\"color: gray\"><em>access keywords available for methods and members:</em></span><br />public class Foo {<br /><span style=\"white-space: pre-wrap;\">  </span>private int privateInt1;<br /><span style=\"white-space: pre-wrap;\">  </span>int privateInt2;<br /><span style=\"white-space: pre-wrap;\">  </span>protected int protectedInt;<br /><span style=\"white-space: pre-wrap;\">  </span>public int publicInt;<br />}",
  "anonymous-class": ""
},
"inheritance-polymorphism": {
  "dynamic-dispatch": "<span style=\"color: gray\"><em>declare as virtual in base class and override in derived class</em></span>",
  "static-dispatch": "<span style=\"color: gray\"><em>dispatch static by default; compiler error if same method defined in base and derived class and not marked virtual in base class</em></span>",
  "subclass": "",
  "invoking-superclass-constructor": "",
  "mark-class-underivable-or-method-unoverrideable": "sealed",
  "root-class<br-/>": "System.Object",
  "root-class-methods": "Equals()<br />Finalize()<br />GetHashCode()<br />GetType()<br />MemberwiseClone()<br />ReferenceEquals()<br />ToString()"
},
"reflection": {
  "get-type-class-of-object": "object o = new object();<br />System.Type t = o.GetType();<br /><span style=\"color: gray\"><em>or</em></span><br />System.type t = typeof(o);",
  "get-type-class-from-string": "using System;<br />Type t = Type.GetType(\"object\");",
  "get-type-class-from-type-identifier": "System.Type t = typeof(object);",
  "class-name<br-/>": "t.ToString();",
  "get-methods": "using System.Reflection;<br />System.Type t = typeof(object);<br />MethodInfo[] a = t.GetMethods();",
  "has-method": "<span style=\"color: gray\"><em>null if method not found:</em></span><br />MethodInfo m = t.GetMethod(\"ToString\");",
  "invoke-method-object": "m.Invoke(o);"
},
"net-web": {
  "get-local-hostname,-dns-lookup,-reverse-dns-lookup": "",
  "http-get": "",
  "http-post": "",
  "absolute-url": "",
  "parse-url": "",
  "url-encode": "",
  "base64-encode/decode": ""
},
"unit-tests": {
  "test-class": "",
  "run-all-tests": "",
  "assert-equal": "",
  "assert-approx": "",
  "assert-exc": "",
  "setup": "",
  "teardown": ""
},
"debugging-profiling": {
  "flag-for-stronger-warnings": "",
  "suppress-warnings": "",
  "treat-warnings-as-errors": "",
  "run-debugger": "",
  "debugger-cmds": "",
  "benchmark-code": "",
  "profile-code": "",
  "memory-tool": ""
}
}
