{

"version": {
  "version-used": "<span style=\"color: gray\"><em>7.0</em></span>",
  "version": "$ php <span style=\"white-space: pre-wrap;\">--</span>version",
  "implicit-prologue": "<span style=\"color: gray\"># sudo apt install php-mbstring</span>"
},
"grammar-execution": {
  "interpreter": "$ php -f foo.php",
  "repl": "$ php -a",
  "cmd-line-program": "$ php -r 'echo \"hi!\\n\";'",
  "block-delimiters": "{}",
  "statement-separator": ";<br /><br /><span style=\"color: gray\"><em>statements must be semicolon terminated inside {}</em></span>",
  "source-code-encoding": "<span style=\"color: gray\"><em>none</em></span>",
  "eol-comment": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> comment<br /># comment</span>",
  "multiple-line-comment": "<span style=\"color: gray\">/* comment line<br />another line */</span>"
},
"var-expr": {
  "local-var": "<span style=\"color: gray\"># in function body:</span><br />$x = 1;<br />list($y, $z) = [2, 3];",
  "file-scope-var": "<span style=\"color: gray\"><em>none</em></span>",
  "global-var": "$g = 1;<br /><br />function incr_global() {<br /><span style=\"white-space: pre-wrap;\">  </span>global $g;<br /><span style=\"white-space: pre-wrap;\">  </span>++$g;<br />}",
  "const": "define(\"PI\", 3.14);<br /><br />const PI = 3.14;",
  "assignment": "$v = 1;",
  "parallel-assignment": "list($x, $y, $z) = [1 ,2, 3];<br /><br /><span style=\"color: gray\"># 3 is discarded:</span><br />list($x, $y) = [1, 2, 3];<br /><br /><span style=\"color: gray\"># $z set to NULL:</span><br />list($x, $y, $z) = [1, 2];",
  "swap": "list($x, $y) = [$y, $x];",
  "compound-assignment": "+= -= *= <span style=\"color: gray\"><em>none</em></span> /= %= <span style=\"white-space: pre-wrap;\">**</span>=<br />.= <span style=\"color: gray\"><em>none</em></span><br />&amp;= |= <span style=\"color: gray\"><em>none</em></span><br /><span style=\"white-space: pre-wrap;\">&lt;&lt;= &gt;&gt;= </span>&amp;= |= ^=",
  "incr-decr": "$x = 1;<br />$y = ++$x;<br />$z = <span style=\"white-space: pre-wrap;\">--</span>$y;",
  "null": "NULL <span style=\"color: gray\"># case insensitive</span>",
  "null-test": "is_null($v)<br />! isset($v)",
  "undef-var": "<span style=\"color: gray\"><em>Evaluates as</em></span> NULL",
  "conditional-expr": "$x &gt; 0 ? $x : -$x"
},
"arithmetic-logic": {
  "true-false": "TRUE FALSE <span style=\"color: gray\"># case insensitive</span>",
  "falsehoods": "FALSE NULL 0 0.0 \"\" \"0\" []",
  "logical-op": "&amp;&amp; <span style=\"white-space: pre-wrap;\">||</span> !<br /><span style=\"color: gray\"><em>lower precedence:</em></span><br />and or xor",
  "relational-op": "== != <span style=\"color: gray\"><em>or</em></span> &lt;&gt; &gt; &lt; &gt;= &lt;=<br /><span style=\"color: gray\"><em>no conversion:</em></span> === !==",
  "min-max": "min(1, 2, 3)<br />max(1, 2, 3)<br />$a = [1, 2, 3]<br />min($a)<br />max($a)",
  "arith-op": "+ - * / <span style=\"color: gray\"><em>none</em></span> %",
  "int-div": "(int)(22 / 7)",
  "divmod": "<span style=\"color: gray\"><em>none</em></span>",
  "int-div-zero": "<span style=\"color: gray\"><em>returns</em> FALSE <em>with warning</em></span>",
  "float-div": "22 / 7",
  "float-div-zero": "<span style=\"color: gray\"><em>returns</em> FALSE <em>with warning</em></span>",
  "power": "pow(2, 32)",
  "sqrt": "sqrt(2)",
  "sqrt-negative-one": "NaN",
  "transcendental-func": "exp log sin cos tan asin acos atan atan2",
  "transcendental-const": "M_PI M_E",
  "float-truncation": "(int)$x<br />round($x)<br />ceil($x)<br />floor($x)",
  "abs-val": "abs($x)",
  "int-overflow": "<span style=\"color: gray\"><em>converted to float</em></span>",
  "float-overflow": "INF",
  "rational-construction": "<span style=\"color: gray\"><em>none</em></span>",
  "rational-decomposition": "<span style=\"color: gray\"><em>none</em></span>",
  "complex-construction": "<span style=\"color: gray\"><em>none</em></span>",
  "complex-decomposition": "<span style=\"color: gray\"><em>none</em></span>",
  "random-num": "rand(0,99)<br />lcg_value()<br /><span style=\"color: gray\"><em>none</em></span>",
  "random-seed": "srand(17);<br /><br /><span style=\"color: gray\"><em>none</em></span>",
  "bit-op": "<span style=\"white-space: pre-wrap;\">&lt;&lt; &gt;&gt; &amp; | ^ ~</span>",
  "binary-octal-hex-literals": "0b101010<br />052<br />0x2a",
  "radix": "base_convert(\"42\", 10, 7);<br />base_convert(\"60\", 7, 10);"
},
"strings": {
  "str-type": "<span style=\"color: gray\"># array of bytes:</span><br />string",
  "str-literal": "\"don't say \\\"no\\\"\"<br />'don\\'t say \"no\"'",
  "newline-in-str-literal": "'first line<br />second line'<br /><br />\"first line<br />second line\"",
  "str-literal-esc": "<span style=\"color: gray\"><em>double quoted:</em></span><br />\\f \\n \\r \\t \\v \\x<span style=\"color: gray\"><em>hh</em></span> \\$ \\\" \\\\ \\<span style=\"color: gray\"><em>ooo</em></span><br /><br /><span style=\"color: gray\"><em>single quoted:</em></span><br />\\' \\\\",
  "here-doc": "$word = \"amet\";<br /><br />$s = <span style=\"white-space: pre-wrap;\">&lt;&lt;&lt;</span>EOF<br />lorem ipsum<br />dolor sit $word<br />EOF;",
  "var-interpolation": "$count = 3;<br />$item = \"ball\";<br />echo \"$count ${item}s\\n\";",
  "expr-interpolation": "<span style=\"color: gray\"><em>none</em></span>",
  "format-str": "$fmt = \"lorem %s %d %f\";<br />sprintf($fmt, \"ipsum\", 13, 3.7);",
  "mutable-str": "$s = \"bar\";<br />$s2 = $s;<br /><span style=\"color: gray\"># sets s to \"baz\"; s2 is unchanged:</span><br />$s[2] = \"z\";",
  "copy-str": "$s2 = $s;",
  "str-concat": "$s = \"Hello, \";<br />$s2 = $s . \"World!\";",
  "str-replicate": "$hbar = str_repeat(\"-\", 80);",
  "translate-case": "mb_strtoupper(\"lorem\")<br />mb_strtolower(\"LOREM\")<br /><span style=\"color: gray\"># strtoupper/strtolower are ASCII only</span>",
  "capitalize": "<span style=\"color: gray\"># ASCII only:</span><br />ucfirst(strtolower(\"lorem\"))<br />ucwords(strtolower(\"lorem ipsum\"))<br /><span style=\"color: gray\"># Unicode title case:</span><br />mb_convert_case(\"lorem ipsum\", MB_CASE_TITLE)",
  "trim": "trim(\" lorem \")<br />ltrim(\" lorem\")<br />rtrim(\"lorem \")",
  "pad": "$s = \"lorem\";<br />$delta = strlen($s) - mb_strlen($s);<br />str_pad($s, 10 + $delta)<br />str_pad(\"$s, 10 + $delta, \" \", STR_PAD_LEFT)<br />str_pad($s, 10 + $delta, \" \", STR_PAD_BOTH)",
  "num-to-str": "\"value: \" . 8",
  "str-to-num": "7 + \"12\"<br />73.9 + \".037\"<br /><br /><span style=\"color: gray\"># 12:</span><br />0 + \"12A\"<br /><span style=\"color: gray\"># 0:</span><br />0 + \"A\"",
  "str-join": "$a = [\"do\", \"re\", \"mi\", \"fa\"];<br />implode(\" \", $a)",
  "split": "<span style=\"color: gray\"># [ \"do\", \"re\", \"\", \"mi\", \"\" ]:</span><br />explode(\" \", \"do re<span style=\"white-space: pre-wrap;\">  </span>mi \")<br /><br /><span style=\"color: gray\"># [ \"do\", \"re\", \"mi\", \"\" ]:</span><br />preg_split('/\\s+/', \"do re<span style=\"white-space: pre-wrap;\">  </span>mi \")",
  "split-in-two": "preg_split('/\\s+/', \"do re mi fa\", 2)",
  "split-keep-delimiters": "preg_split('/(\\s+)/', \"do re mi fa\",<br /><span style=\"white-space: pre-wrap;\">  </span>NULL, PREG_SPLIT_DELIM_CAPTURE)",
  "prefix-suffix-test": "",
  "str-len": "mb_strlen(\"lorem\")<br /><span style=\"color: gray\"># strlen() counts bytes</span>",
  "index-substr": "<span style=\"color: gray\"># returns FALSE if not found:</span><br />mb_strpos(\"do re re\", \"re\")<br />mb_strrpos(\"do re re\", \"re\")",
  "extract-substr": "mb_substr(\"lorem ipsum\", 6, 5)<br /><span style=\"color: gray\"><em>none</em></span><br /><span style=\"color: gray\"><em>none</em></span>",
  "bytes-type": "string",
  "bytes-to-str": "<span style=\"color: gray\"><em>strings are byte arrays</em></span>",
  "str-to-bytes": "<span style=\"color: gray\"><em>strings are byte arrays</em></span>",
  "lookup-char": "mb_substr(\"lorem ipsum\", 6, 1)<br /><span style=\"color: gray\"># byte lookup:</span><br />\"lorem ipsum\"[6]",
  "chr-ord": "<span style=\"color: gray\"># ASCII only:</span><br />chr(65)<br />ord(\"A\")",
  "str-to-char-array": "str_split(\"abcd\")",
  "translate-char": "$ins = implode(range(\"a\", \"z\"));<br />$outs = substr($ins, 13, 13) .<br /><span style=\"white-space: pre-wrap;\">  </span>substr($ins, 0, 13);<br />strtr(\"hello\", $ins, $outs)",
  "delete-char": "$vowels = str_split(\"aeiou\");<br />$s = \"disemvowel me\";<br />$s = str_replace($vowels, \"\", $s);",
  "squeeze-char": "$s = \"too<span style=\"white-space: pre-wrap;\">   </span>much<span style=\"white-space: pre-wrap;\">   </span>space\";<br />$s = = preg_replace('/(\\s)+/', '\\1', $s);"
},
"regexes": {
  "regex-literal": "'/lorem|ipsum/'<br />'(/etc/hosts)'",
  "ascii-char-class-abbrev": ".<span style=\"white-space: pre-wrap;\">   </span>[^\\n]<br />\\d<span style=\"white-space: pre-wrap;\">  </span>[0-9]<br />\\D<span style=\"white-space: pre-wrap;\">  </span>[^0-9]<br />\\h<span style=\"white-space: pre-wrap;\">  </span>[ \\t]<br />\\H<span style=\"white-space: pre-wrap;\">  </span>[^ \\t]<br />\\s<span style=\"white-space: pre-wrap;\">  </span>[ \\t\\r\\n\\f]<br />\\S<span style=\"white-space: pre-wrap;\">  </span>[^ \\t\\r\\n\\f]<br />\\w<span style=\"white-space: pre-wrap;\">  </span>[A-Za-z0-9_]<br />\\W<span style=\"white-space: pre-wrap;\">  </span>[^A-Za-z0-9_]",
  "unicode-char-class-abbrev": "<span style=\"color: gray\"><em>POSIX character classes such as</em> [[:alpha:]] <em>are available, but they match sets of ASCII characters. General category values (e.g.</em> \\p{L}, \\p{Lu}<em>) can be used. Morever, they can be used inside character classes (.e.g.</em> [\\p{L}\\p{N}]<em>).</em></span>",
  "regex-anchors": "^<span style=\"white-space: pre-wrap;\">   </span><span style=\"color: gray\"><em>start of string or line with</em> m <em>modifier</em></span><br />$<span style=\"white-space: pre-wrap;\">   </span><span style=\"color: gray\"><em>end of string or line with</em> m <em>modifier</em></span><br />\\A<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>start of string</em></span><br />\\b<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>word boundary:</em> \\w\\W <em>or</em> \\W\\w</span><br />\\B<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>non word boundary</em></span><br />\\z<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>end of string</em></span><br />\\Z<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>end of string, excluding final newline</em></span>",
  "regex-test": "if (preg_match('/1999/', $s)) {<br /><span style=\"white-space: pre-wrap;\">  </span>echo \"party!\\n\";<br />}",
  "case-insensitive-regex": "preg_match('/lorem/i', \"Lorem\")",
  "regex-modifiers": "i<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>make case insensitive</em></span><br />m<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>change meaning of</em> ^ <em>and</em> $</span><br />s<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>change meaning of</em> .</span><br />x<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>ignore whitespace outside char class</em></span>",
  "subst": "$s = \"do re mi mi mi\";<br />$s = preg_replace('/mi/', \"ma\", $s);",
  "match-prematch-postmatch": "<span style=\"color: gray\"><em>none</em></span>",
  "group-capture": "$s = \"2010-06-03\";<br />$rx = '/(\\d{4})-(\\d{2})-(\\d{2})/';<br />preg_match($rx, $s, $m);<br />list($_, $yr, $mo, $dy) = $m;",
  "named-group-capture": "$s = \"foo.txt\";<br />$rx = '/^(?P&lt;file&gt;.+)\\.(?P&lt;suffix&gt;.+)$/';<br />preg_match($rx, $s, $m);<br /><br />$m[\"file\"]<br />$m[\"suffix\"]",
  "scan": "$s = \"dolor sit amet\";<br />preg_match_all('/\\w+/', $s, $m);<br />$a = $m[0];",
  "backreference": "preg_match('/(\\w+) \\1/', \"do do\")<br /><br />$s = \"do re\";<br />$rx = '/(\\w+) (\\w+)/';<br />$s = preg_replace($rx, '\\2 \\1', $s);",
  "recursive-regex": "'/\\(([^()]*|($R))\\)/'"
},
"dates-time": {
  "broken-down-datetime-type": "DateTime",
  "current-datetime": "$t = new DateTime(\"now\");<br />$utc_tmz = new DateTimeZone(\"UTC\");<br />$utc = new DateTime(\"now\", $utc_tmz);",
  "current-unix-epoch": "$epoch = time();",
  "broken-down-datetime-to-unix-epoch": "$epoch = $t-&gt;getTimestamp();",
  "unix-epoch-to-broken-down-datetime": "$t2 = new DateTime();<br />$t2-&gt;setTimestamp(1304442000);",
  "fmt-datetime": "strftime(\"%Y-%m-%d %H:%M:%S\", $epoch);<br />date(\"Y-m-d H:i:s\", $epoch);<br />$t-&gt;format(\"Y-m-d H:i:s\");",
  "parse-datetime": "$fmt = \"Y-m-d H:i:s\";<br />$s = \"2011-05-03 10:00:00\";<br />$t = DateTime::createFromFormat($fmt,<br /><span style=\"white-space: pre-wrap;\">  </span>$s);",
  "parse-datetime-without-fmt": "$epoch = strtotime(\"July 7, 1999\");",
  "date-parts": "(int)$t-&gt;format(\"Y\")<br />(int)$t-&gt;format(\"m\")<br />(int)$t-&gt;format(\"d\")",
  "time-parts": "(int)$t-&gt;format(\"H\")<br />(int)$t-&gt;format(\"i\")<br />(int)$t-&gt;format(\"s\")",
  "build-datetime": "",
  "datetime-subtraction": "<span style=\"color: gray\"># DateInterval object if diff method used:</span><br />$fmt = \"Y-m-d H:i:s\";<br />$s = \"2011-05-03 10:00:00\";<br />$then = DateTime::createFromFormat($fmt, $s);<br />$now = new DateTime(\"now\");<br />$interval = $now-&gt;diff($then);",
  "add-duration": "$now = new DateTime(\"now\");<br />$now-&gt;add(new DateInterval(\"PT10M3S\");",
  "local-tmz-determination": "<span style=\"color: gray\"># DateTime objects can be instantiated<br /># without specifying the time zone<br /># if a default is set:</span><br />$s = \"America/Los_Angeles\";<br />date_default_timezone_set($s);",
  "nonlocal-tmz": "",
  "tmz-info": "$tmz = date_timezone_get($t);<br /><br />timezone_name_get($tmz);<br />date_offset_get($t) / 3600;",
  "daylight-savings-test": "$t-&gt;format(\"I\");",
  "microseconds": "list($frac, $sec) = explode(\" \", microtime());<br />$usec = $frac * 1000 * 1000;"
},
"arrays": {
  "array-literal": "$a = [1, 2, 3, 4];<br /><br /><span style=\"color: gray\"># older syntax:</span><br />$a = array(1, 2, 3, 4);",
  "array-size": "count($a)",
  "array-empty": "<span style=\"color: gray\"># NULL tests as empty:</span><br />!$a",
  "array-lookup": "$a[0]<br /><br /><span style=\"color: gray\"># PHP uses the same type for arrays and<br /># dictionaries; indices can be negative<br /># integers or strings</span>",
  "array-update": "$a[0] = \"lorem\";",
  "array-out-of-bounds": "$a = [];<br /><span style=\"color: gray\"># evaluates as NULL:</span><br />$a[10];<br /><span style=\"color: gray\"># increases array size to one:</span><br />$a[10] = \"lorem\";",
  "array-element-index": "$a = [\"x\", \"y\", \"y\", \"z\"];<br /><br /><span style=\"color: gray\"># returns FALSE if not found:</span><br />$i = array_search(\"y\", $a, TRUE);<br /><span style=\"color: gray\"><em>none</em></span>",
  "array-slice": "<span style=\"color: gray\"># select 3rd and 4th elements:</span><br /><span style=\"color: gray\"><em>none</em></span><br />array_slice($a, 2, 2)",
  "array-slice-to-end": "array_slice($a, 1)",
  "array-back": "$a = [6, 7, 8];<br />array_push($a, 9);<br />$a[] = 9; <span style=\"color: gray\"># same as array_push</span><br />array_pop($a);",
  "array-front": "$a = [6, 7, 8];<br />array_unshift($a, 5);<br />array_shift($a);",
  "array-concatenation": "$a = [1, 2, 3];<br />$a2 = array_merge($a, [4, 5, 6]);<br />$a = array_merge($a, [4, 5, 6]);",
  "replicate-array": "$a = array_fill(0, 10, NULL);",
  "array-copy": "$a = [1, 2, [3, 4]];<br />$a2 =&amp; $a;<br /><span style=\"color: gray\"><em>none</em></span><br />$a4 = $a;",
  "array-as-func-arg": "<span style=\"color: gray\"><em>parameter contains deep copy</em></span>",
  "iterate-over-array": "foreach ([1, 2, 3] as $i) {<br /><span style=\"white-space: pre-wrap;\">  </span>echo \"$i\\n\";<br />}",
  "indexed-array-iteration": "$a = [\"do\", \"re\", \"mi\" \"fa\"];<br />foreach ($a as $i =&gt; $s) {<br /><span style=\"white-space: pre-wrap;\">  </span>echo \"$s at index $i\\n\";<br />}",
  "range-iteration": "<span style=\"color: gray\"><em>not space efficient; use C-style for loop</em></span>",
  "range-array": "$a = range(1, 10);",
  "array-reverse": "$a = [1, 2, 3];<br /><br />array_reverse($a);<br />$a = array_reverse($a);",
  "array-sort": "$a = [\"b\", \"A\", \"a\", \"B\"];<br /><br /><span style=\"color: gray\"><em>none</em></span><br />sort($a);<br /><span style=\"color: gray\"><em>none, but</em> usort <em>sorts in place</em></span>",
  "array-dedupe": "$a = [1, 2, 2, 3];<br /><br />$a2 = array_unique($a);<br />$a = array_unique($a);",
  "membership": "in_array(7, $a)",
  "intersection": "$a = [1, 2];<br />$b = [2, 3, 4]<br />array_intersect($a, $b)",
  "union": "$a1 = [1, 2];<br />$a2 = [2, 3, 4];<br />array_unique(array_merge($a1, $a2))",
  "set-diff": "$a1 = [1, 2, 3];<br />$a2 = [2];<br />array_values(array_diff($a1, $a2))<br /><span style=\"color: gray\"><em>none</em></span>",
  "map": "array_map(function ($x) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>return $x * $x;<br /><span style=\"white-space: pre-wrap;\">  </span>}, [1, 2, 3])",
  "filter": "array_filter([1, 2, 3],<br /><span style=\"white-space: pre-wrap;\">  </span>function ($x) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>return $x&gt;1;<br /><span style=\"white-space: pre-wrap;\">  </span>})",
  "reduce": "array_reduce([1, 2, 3],<br /><span style=\"white-space: pre-wrap;\">  </span>function($x,$y) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>return $x + $y;<br /><span style=\"white-space: pre-wrap;\">  </span>}, 0)",
  "universal-existential-test": "<span style=\"color: gray\"><em>use array_filter</em></span>",
  "shuffle-sample": "$a = [1, 2, 3, 4];<br /><br />shuffle($a);<br />$samp = array_rand(|[1, 2, 3, 4], 2);",
  "flatten": "<span style=\"color: gray\"><em>none</em></span>",
  "zip": "$a = array_map(NULL,<br /><span style=\"white-space: pre-wrap;\">  </span>[1, 2, 3],<br /><span style=\"white-space: pre-wrap;\">  </span>[\"a\", \"b\", \"c\"]);<br /><br /><span style=\"color: gray\"># shorter array padded with NULLs</span>"
},
"dictionaries": {
  "dict-literal": "$d = [\"t\" =&gt; 1, \"f\" =&gt; 0];<br /><br /><span style=\"color: gray\"># older syntax:</span><br />$d = array(\"t\" =&gt; 1, \"f\" =&gt; 0);",
  "dict-size": "count($d)",
  "dict-lookup": "$d[\"t\"]",
  "dict-update": "$d[\"t\"] = 2;",
  "dict-missing-key": "$d = [];<br /><span style=\"color: gray\"># NULL:</span><br />$d[\"lorem\"];<br /><span style=\"color: gray\"># adds key/value pair:</span><br />$d[\"lorem\"] = \"ipsum\";",
  "dict-key-check": "array_key_exists(\"y\", $d);",
  "dict-delete": "$d = [1 =&gt; \"t\", 0 =&gt; \"f\"];<br />unset($d[1]);",
  "dict-assoc-array": "",
  "dict-merge": "$d1 = [\"a\" =&gt; 1, \"b\" =&gt; 2];<br />$d2 = [\"b\" =&gt; 3, \"c\" =&gt; 4];<br />$d1 = array_merge($d1, $d2);",
  "dict-invert": "$to_num = [\"t\" =&gt; 1, \"f\" =&gt; 0];<br />$to_let = array_flip($to_num);",
  "dict-iter": "foreach ($d as $k =&gt; $v) {<br /><span style=\"white-space: pre-wrap;\">  </span>echo \"value at ${k} is ${v}\";<br />}",
  "dict-key-val": "array_keys($d)<br />array_values($d)",
  "dict-sort-values": "asort($d);<br /><br />foreach ($d as $k =&gt; $v) {<br /><span style=\"white-space: pre-wrap;\">  </span>print \"$k: $v\\n\";<br />}",
  "dict-default-val": "$counts = [];<br />$counts['foo'] += 1;<br /><br /><span style=\"color: gray\"># For computed values and defaults other than<br /># zero or empty string, extend ArrayObject.</span>"
},
"functions": {
  "def-func": "function add3($x1, $x2, $x3)<br />{<br /><span style=\"white-space: pre-wrap;\">  </span>return $x1 + $x2 + $x3;<br />}",
  "invoke-func": "add3(1, 2, 3);<br /><br /><span style=\"color: gray\"># function names are case insensitive:</span><br />ADD3(1, 2, 3);",
  "missing-arg": "<span style=\"color: gray\"><em>set to</em> NULL <em>with warning</em></span>",
  "extra-arg": "<span style=\"color: gray\"><em>ignored</em></span>",
  "default-arg": "function my_log($x, $base=10)<br />{<br /><span style=\"white-space: pre-wrap;\">  </span>return log($x) / log($base);<br />}<br /><br />my_log(42);<br />my_log(42, M_E);",
  "variadic-func": "function first_and_last()<br />{<br /><br /><span style=\"white-space: pre-wrap;\">  </span>$arg_cnt = func_num_args();<br /><br /><span style=\"white-space: pre-wrap;\">  </span>if ($arg_cnt &gt;= 1) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>$n = func_get_arg(0);<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>echo \"first: \" . $n . \"\\n\";<br /><span style=\"white-space: pre-wrap;\">  </span>}<br /><br /><span style=\"white-space: pre-wrap;\">  </span>if ($arg_cnt &gt;= 2) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>$a = func_get_args();<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>$n = $a[$arg_cnt-1];<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>echo \"last: \" . $n . \"\\n\";<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "apply-func": "$a = [1, 2, 3];<br /><br />call_user_func_array(\"add3\", $a);",
  "param-alias": "function first_and_second(&amp;$a)<br />{<br /><span style=\"white-space: pre-wrap;\">  </span>return [$a[0], $a[1]];<br />}",
  "named-param": "<span style=\"color: gray\"><em>none</em></span>",
  "retval": "<span style=\"color: gray\">return <em>arg or</em> NULL</span>",
  "multiple-retval": "function first_and_second(&amp;$a)<br />{<br /><span style=\"white-space: pre-wrap;\">  </span>return [$a[0], $a[1]];<br />}<br /><br />$a = [6, 7, 8];<br />list($x, $y) =<br /><span style=\"white-space: pre-wrap;\">  </span>first_and_second($a);",
  "anonymous-func-literal": "$square = function ($x) {<br /><span style=\"white-space: pre-wrap;\">  </span>return $x * $x;<br />};",
  "invoke-anonymous-func": "$square(2)",
  "func-as-val": "$func = \"add3\";",
  "private-state-func": "function counter()<br />{<br /><span style=\"white-space: pre-wrap;\">  </span>static $i = 0;<br /><span style=\"white-space: pre-wrap;\">  </span>return ++$i;<br />}<br /><br />echo counter();",
  "closure": "function make_counter()<br />{<br /><span style=\"white-space: pre-wrap;\">  </span>$i = 0;<br /><span style=\"white-space: pre-wrap;\">  </span>return function () use (&amp;$i) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>return ++$i;<br /><span style=\"white-space: pre-wrap;\">  </span>};<br />}<br /><br />$nays = make_counter();<br />echo $nays();",
  "generator": "<span style=\"color: gray\"># PHP 5.5:</span><br />function make_counter() {<br /><span style=\"white-space: pre-wrap;\">  </span>$i = 0;<br /><span style=\"white-space: pre-wrap;\">  </span>while (1) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>yield ++$i;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}<br /><br />$nays = make_counter();<br /><span style=\"color: gray\"># does not return a value:</span><br />$nays-&gt;next();<br /><span style=\"color: gray\"># runs generator if generator has not<br /># yet yielded:</span><br />echo $nays-&gt;current();",
  "decorator": "",
  "invoke-op-like-func": ""
},
"execution-control": {
  "if": "if ( 0 == $n ) {<br /><span style=\"white-space: pre-wrap;\">  </span>echo \"no hits\\n\";<br />} elseif ( 1 == $n ) {<br /><span style=\"white-space: pre-wrap;\">  </span>echo \"one hit\\n\";<br />} else {<br /><span style=\"white-space: pre-wrap;\">  </span>echo \"$n hits\\n\";<br />}",
  "switch": "switch ($n) {<br />case 0:<br /><span style=\"white-space: pre-wrap;\">  </span>echo \"no hits\\n\";<br /><span style=\"white-space: pre-wrap;\">  </span>break;<br />case 1:<br /><span style=\"white-space: pre-wrap;\">  </span>echo \"one hit\\n\";<br /><span style=\"white-space: pre-wrap;\">  </span>break;<br />default:<br /><span style=\"white-space: pre-wrap;\">  </span>echo \"$n hits\\n\";<br />}",
  "while": "while ( $i &lt; 100 ) { $i++; }",
  "for": "for ($i = 1; $i &lt;= 10; $i++) {<br /><span style=\"white-space: pre-wrap;\">  </span>echo \"$i\\n\";<br />}",
  "break": "break",
  "continue": "continue",
  "statement-modifiers": "<span style=\"color: gray\"><em>none</em></span>"
},
"exceptions": {
  "base-exc": "Exception",
  "predefined-exc": "Exception<br /><span style=\"white-space: pre-wrap;\">  </span>LogicException<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>BadFunctionCallException<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>BadMethodCallException<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>DomainException<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>InvalidArgumentException<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>LengthException<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>OutOfRangeException<br /><span style=\"white-space: pre-wrap;\">  </span>RuntimeException<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>OutOfBoundsException<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>OverflowException<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>RangeException<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>UnderflowException<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>UnexpectedValueException",
  "raise-exc": "throw new Exception(\"bad arg\");",
  "catch-all-handler": "try {<br /><span style=\"white-space: pre-wrap;\">  </span>risky();<br />} catch (Exception $e) {<br /><span style=\"white-space: pre-wrap;\">  </span>echo \"risky failed: \",<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>$e-&gt;getMessage(), \"\\n\";<br />}",
  "re-raise-exc": "",
  "last-exc-global": "<span style=\"color: gray\"><em>none</em></span>",
  "def-exc": "class Bam extends Exception<br />{<br /><span style=\"white-space: pre-wrap;\">  </span>function <span style=\"white-space: pre-wrap;\">__</span>construct()<br /><span style=\"white-space: pre-wrap;\">  </span>{<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>parent::<span style=\"white-space: pre-wrap;\">__</span>construct(\"bam!\");<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "handle-exc": "try {<br /><span style=\"white-space: pre-wrap;\">  </span>throw new Bam;<br />} catch (Bam $e) {<br /><span style=\"white-space: pre-wrap;\">  </span>echo $e-&gt;getMessage(), \"\\n\";<br />}",
  "finally-block": "<span style=\"color: gray\"><em>PHP 5.5:</em></span><br />acquire_resource();<br />try {<br /><span style=\"white-space: pre-wrap;\">  </span>risky();<br />}<br />finally {<br /><span style=\"white-space: pre-wrap;\">  </span>release_resource();<br />}"
},
"threads": {
  "start-thread": "<span style=\"color: gray\"><em>none</em></span>",
  "wait-on-thread": "",
  "sleep": "<span style=\"color: gray\"># a float argument will be truncated<br /># to an integer:</span><br />sleep(1);",
  "timeout": "<span style=\"color: gray\"><em>use</em> set_time_limit <em>to limit execution time of the entire script; use</em> stream_set_timeout <em>to limit time spent reading from a stream opened with</em> fopen <em>or</em> fsockopen</span>"
}
}
