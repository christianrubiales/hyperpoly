{

"version": {
  "version-used": "<span style=\"color: gray\"><em>6.3</em></span>",
  "version": "$ node <span style=\"white-space: pre-wrap;\">--</span>version",
  "implicit-prologue": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> npm install lodash</span><br />const _ = require('lodash');"
},
"grammar-execution": {
  "interpreter": "$ node foo.js",
  "repl": "$ node",
  "cmd-line-program": "$ node -e \"console.log('hi!');\"",
  "block-delimiters": "{}",
  "statement-separator": "<span style=\"color: gray\"><em>; or newline<br /><br />newline not separator inside (), [], {}, \"\", '', or after binary operator<br /><br />newline sometimes not separator when following line would not parse as a valid statement</em></span>",
  "source-code-encoding": "<span style=\"color: gray\"><em>source is always UTF-8</em></span>",
  "eol-comment": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> comment</span>",
  "multiple-line-comment": "<span style=\"color: gray\">/* line<br />another line */</span>"
},
"var-expr": {
  "local-var": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> new in ES6:</span><br />let x = 1;<br />let y = 2, z = 3;<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> older alternative to let:</span><br />var x = 1;<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> let local scope is nearest<br /><span style=\"white-space: pre-wrap;\">//</span> enclosing block; var local scope<br /><span style=\"white-space: pre-wrap;\">//</span> is nearest function body.<br /><br /><span style=\"white-space: pre-wrap;\">//</span> var variables are visible to all code<br /><span style=\"white-space: pre-wrap;\">//</span> in the function body; even code<br /><span style=\"white-space: pre-wrap;\">//</span> preceding the var statement.</span>",
  "file-scope-var": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> outside any function body:</span><br />let n = 1;<br /><br />incrFileVar () { n++; }",
  "global-var": "global.g = 1;<br /><br />incrGlobal () { global.g++; }",
  "const": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> new in ES6</span><br />const PI = 3.14;",
  "assignment": "v = 1;",
  "parallel-assignment": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> new in ES6:</span><br />let [x, y, z] = [1, 2, 3];",
  "swap": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> new in ES6:</span><br />[x, y] = [y, x];",
  "compound-assignment": "+= -= *= /= <span style=\"color: gray\"><em>none</em></span> %=<br />+=<br /><span style=\"color: gray\"><em>none</em></span><br /><span style=\"white-space: pre-wrap;\">&lt;&lt;= &gt;&gt;= </span>&amp;= |= ^=",
  "incr-decr": "let x = 1;<br />let y = ++x;<br />let z = <span style=\"white-space: pre-wrap;\">--</span>y;",
  "null": "null",
  "null-test": "v === null",
  "undef-var": "<span style=\"color: gray\"><em>Evaluates as</em></span> undefined<br /><br /><span style=\"color: gray\"><em>Use the triple equality</em></span> === <span style=\"color: gray\"><em>operator to test for this value.</em></span>",
  "conditional-expr": "x &gt; 0 ? x : -x"
},
"arithmetic-logic": {
  "true-false": "true false",
  "falsehoods": "false null undefined '' 0 NaN",
  "logical-op": "<span style=\"white-space: pre-wrap;\">&amp;&amp; ||</span> !",
  "relational-op": "<span style=\"white-space: pre-wrap;\">===</span> !== &lt; &gt; &gt;= &lt;=<br /><br /><span style=\"color: gray\"><em>perform type coercion:</em></span><br /><span style=\"white-space: pre-wrap;\">==</span> !=",
  "min-max": "Math.min(1, 2, 3)<br />Math.max(1, 2, 3)<br /><br />Math.min.apply(Math, [1, 2, 3])<br />Math.max.apply(Math, [1, 2, 3])",
  "arith-op": "+ - * / <span style=\"color: gray\"><em>none</em></span> %",
  "int-div": "Math.floor(22 / 7)",
  "divmod": "<span style=\"color: gray\"><em>none</em></span>",
  "int-div-zero": "<span style=\"color: gray\"><em>Returns Infinity, NaN, or -Infinity depending upon sign of dividend.<br /><br />There are literals for Infinity and NaN.</em></span>",
  "float-div": "22 / 7",
  "float-div-zero": "<span style=\"color: gray\"><em>same behavior as for integers</em></span>",
  "power": "Math.pow(2, 32)",
  "sqrt": "Math.sqrt(2)",
  "sqrt-negative-one": "NaN",
  "transcendental-func": "Math.exp Math.log Math.sin Math.cos Math.tan Math.asin Math.acos Math.atan Math.atan2",
  "transcendental-const": "Math.PI<br />Math.E",
  "float-truncation": "<span style=\"color: gray\"><em>none</em></span><br />Math.round(3.1)<br />Math.floor(3.1)<br />Math.ceil(3.1)",
  "abs-val": "Math.abs(-3)",
  "int-overflow": "<span style=\"color: gray\"><em>all numbers are floats</em></span>",
  "float-overflow": "Infinity",
  "rational-construction": "<span style=\"color: gray\"><em>none</em></span>",
  "rational-decomposition": "<span style=\"color: gray\"><em>none</em></span>",
  "complex-construction": "<span style=\"color: gray\"><em>none</em></span>",
  "complex-decomposition": "<span style=\"color: gray\"><em>none</em></span>",
  "random-num": "Math.floor(Math.random() * 100)<br />Math.random()<br /><span style=\"color: gray\"><em>none</em></span>",
  "random-seed": "<span style=\"color: gray\"><em>none</em></span>",
  "bit-op": "<span style=\"white-space: pre-wrap;\">&lt;&lt; &gt;&gt; &amp; | ^ ~</span>",
  "binary-octal-hex-literals": "<span style=\"color: gray\"><em>none</em></span><br />052 <span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> deprecated</span><br />0x2a",
  "radix": "(42).toString(7)<br />parseInt('60', 7)"
},
"str": {
  "str-type": "String",
  "str-literal": "'don\\'t say \"no\"'<br />\"don't say \\\"no\\\"\"",
  "newline-in-str-literal": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> backquote literals only:</span><br /><span style=\"white-space: pre-wrap;\">`</span>first line<br />second line<span style=\"white-space: pre-wrap;\">`</span><br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> Backslashes can be used to break<br /><span style=\"white-space: pre-wrap;\">//</span> long strings.</span>",
  "str-literal-esc": "<span style=\"color: gray\"><em>single and double quotes:</em></span><br />\\b \\f \\n \\r \\t \\v \\x<span style=\"color: gray\"><em>hh</em></span> \\\" \\' \\\\<br />\\u<span style=\"color: gray\"><em>hhhh</em></span> \\u{<span style=\"color: gray\"><em>hhhhh</em></span>}",
  "here-doc": "<span style=\"color: gray\"><em>none</em></span>",
  "var-interpolation": "let count = 3;<br />let item = 'ball';<br />let s = <span style=\"white-space: pre-wrap;\">`</span>${count} ${item}s<span style=\"white-space: pre-wrap;\">`</span>;",
  "expr-interpolation": "<span style=\"white-space: pre-wrap;\">`</span>1 + 1 = ${1 + 1}<span style=\"white-space: pre-wrap;\">`</span>",
  "format-str": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> None; use string concatenation.<br /><span style=\"white-space: pre-wrap;\">//</span> Evaluates to \"12.35\":</span><br />12.3456.toFixed(2)",
  "mutable-str": "<span style=\"color: gray\"><em>no</em></span>",
  "copy-str": "<span style=\"color: gray\"><em>none</em></span>",
  "str-concat": "s = 'Hello, ' + 'World!';",
  "str-replicate": "let hbar = _.repeat('-', 80);",
  "translate-case": "'lorem'.toUpperCase()<br />'LOREM'.toLowerCase()",
  "capitalize": "_.capitalize('lorem');<br /><span style=\"color: gray\"><em>none</em></span>",
  "trim": "' lorem '.trim()<br />' lorem'.trimLeft()<br />'lorem '.trimRight()",
  "pad": "_.padStart('lorem', 10)<br />_.padEnd('lorem', 10)<br />_.pad('lorem', 10)",
  "num-to-str": "'value: ' + 8",
  "str-to-num": "7 + parseInt('12;, 10)<br />73.9 + parseFloat('.037')<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> 12:</span><br />parseInt('12A')<br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> NaN:</span><br />parseInt('A')",
  "str-join": "['do', 're', 'mi'].join(' ')",
  "split": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> [ 'do', 're', '', 'mi', '' ]:</span><br />'do re<span style=\"white-space: pre-wrap;\">  </span>mi '.split(' ')<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> [ 'do', 're', 'mi', '' ]:</span><br />'do re<span style=\"white-space: pre-wrap;\">  </span>mi '.split(/\\s+/)",
  "split-in-two": "'do re mi fa'.split(/\\s+/, 2)",
  "split-keep-delimiters": "<span style=\"color: gray\"><em>none</em></span>",
  "prefix-suffix-test": "'foobar'.startsWith('foo')<br />'foobar'.endsWith('bar')",
  "str-len": "'lorem'.length",
  "index-substr": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> returns -1 if not found:</span><br />'lorem ipsum'.indexOf('ipsum')",
  "extract-substr": "'lorem ipsum'.substr(6, 5)<br />'lorem ipsum'.substring(6, 11)",
  "bytes-type": "Buffer",
  "bytes-to-str": "let a = Buffer.from([0xce, 0xbb]);<br />let s = a.toString('utf-8');",
  "str-to-bytes": "a = Buffer.from('\\u03bb')",
  "lookup-char": "'lorem ipsum'[6]",
  "chr-ord": "String.fromCharCode(65)<br />'A'.charCodeAt(0)",
  "str-to-char-array": "'abcd'.split('')",
  "translate-char": "<span style=\"color: gray\"><em>none</em></span>",
  "delete-char": "<span style=\"color: gray\"><em>none</em></span>",
  "squeeze-char": "<span style=\"color: gray\"><em>none</em></span>"
},
"regex": {
  "regex-literal": "/lorem|ipsum/",
  "ascii-char-class-abbrev": ".<span style=\"white-space: pre-wrap;\">   </span>[^\\n]<br />\\d<span style=\"white-space: pre-wrap;\">  </span>[0-9]<br />\\D<span style=\"white-space: pre-wrap;\">  </span>[^0-9]<br />\\s<span style=\"white-space: pre-wrap;\">  </span>[ \\t\\r\\n\\f]<br />\\S<span style=\"white-space: pre-wrap;\">  </span>[^ \\t\\r\\n\\f]<br />\\w<span style=\"white-space: pre-wrap;\">  </span>[A-Za-z0-9_]<br />\\W<span style=\"white-space: pre-wrap;\">  </span>[^A-Za-z0-9_]",
  "unicode-char-class-abbrev": "<span style=\"color: gray\"><em>none</em></span>",
  "regex-anchors": "^<span style=\"white-space: pre-wrap;\">   </span><span style=\"color: gray\"><em>start of string or line with</em> m <em>modifier</em></span><br />$<span style=\"white-space: pre-wrap;\">   </span><span style=\"color: gray\"><em>end of string or line with</em> m <em>modifier</em></span><br />\\b<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>word boundary:</em> \\w\\W <em>or</em> \\W\\w</span><br />\\B<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>non word boundary</em></span>",
  "regex-test": "if (s.match(/1999/)) {<br /><span style=\"white-space: pre-wrap;\">  </span>console.log('party!');<br />}",
  "case-insensitive-regex": "'Lorem'.match(/lorem/i)",
  "regex-modifiers": "g<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>used for global substitution and scanning</em></span><br />i<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>make case insensitive</em></span><br />m<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>change meaning of</em> ^ <em>and</em> $</span><br />u<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\">\\u{} <em>syntax and astral character support</em></span><br />y<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>used to scan in loop</em></span>",
  "subst": "s = 'do re mi mi mi';<br />s.replace(/mi/g, 'ma');",
  "match-prematch-postmatch": "m = /\\d{4}/.exec(s);<br />if (m) {<br /><span style=\"white-space: pre-wrap;\">  </span>match = m[0];<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> no prematch or postmatch</span><br />}",
  "group-capture": "rx = /^(\\d{4})-(\\d{2})-(\\d{2})$/;<br />m = rx.exec('2009-06-03');<br />yr = m[1];<br />mo = m[2];<br />dy = m[3];",
  "named-group-capture": "<span style=\"color: gray\"><em>none</em></span>",
  "scan": "let a = 'dolor sit amet'.match(/\\w+/g);",
  "backreference": "/(\\w+) \\1/.exec('do do')<br /><br />'do re'.replace(/(\\w+) (\\w+)/, '$2 $1')",
  "recursive-regex": "<span style=\"color: gray\"><em>none</em></span>"
},
"dates-time": {
  "broken-down-datetime-type": "Date",
  "current-datetime": "let t = new Date();",
  "current-unix-epoch": "(new Date()).getTime() / 1000",
  "broken-down-datetime-to-unix-epoch": "Math.round(t.getTime() / 1000)",
  "unix-epoch-to-broken-down-datetime": "let epoch = 1315716177;<br />let t2 = new Date(epoch * 1000);",
  "fmt-datetime": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> npm install moment</span><br />let moment = require('moment');<br /><br />let t = moment(new Date());<br />let fmt = 'YYYY-MM-DD HH:mm:ss';<br />console.log(t.format(fmt));",
  "parse-datetime": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> npm install moment</span><br />let moment = require('moment');<br /><br />let fmt = 'YYYY-MM-DD HH:mm:ss';<br />let s = '2011-05-03 10:00:00';<br />let t = moment(s, fmt);",
  "parse-datetime-without-fmt": "let t = new Date('July 7, 1999');",
  "date-parts": "t.getFullYear()<br />t.getMonth() + 1<br />t.getDate() <span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> getDay() is day of week</span>",
  "time-parts": "t.getHours()<br />t.getMinutes()<br />t.getSeconds()",
  "build-datetime": "let yr = 1999;<br />let mo = 9;<br />let dy = 10;<br />let hr = 23;<br />let mi = 30;<br />let ss = 0;<br />let t = new Date(yr, mo - 1, dy,<br /><span style=\"white-space: pre-wrap;\">  </span>hr, mi, ss);",
  "datetime-subtraction": "<span style=\"color: gray\">number <em>containing time difference in milliseconds</em></span>",
  "add-duration": "let t1 = new Date();<br />let delta = (10 * 60 + 3) * 1000;<br />let t2 = new Date(t1.getTime() + delta);",
  "local-tmz-determination": "<span style=\"color: gray\">TZ environment variable or host time zone</span>",
  "nonlocal-tmz": "",
  "tmz-info": "",
  "daylight-savings-test": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> npm install moment</span><br />let moment = require('moment');<br /><br />moment(new Date()).isDST()",
  "microseconds": "t.getMilliseconds() * 1000<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> [sec, nanosec] since system boot:</span><br />process.hrtime()"
},
"arrays": {
  "array-literal": "a = [1, 2, 3, 4]",
  "array-size": "a.length",
  "array-empty": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> TypeError if a is null or undefined:</span><br />a.length === 0",
  "array-lookup": "a[0]",
  "array-update": "a[0] = 'lorem'",
  "array-out-of-bounds": "<span style=\"color: gray\"><em>returns</em> undefined</span>",
  "array-element-index": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> return -1 if not found:</span><br />[6, 7, 7, 8].indexOf(7)<br />[6, 7, 7, 8].lastIndexOf(7)",
  "array-slice": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> select 3rd and 4th elements:</span><br />['a', 'b', 'c', 'd'].slice(2, 4)<br /><span style=\"color: gray\"><em>none</em></span>",
  "array-slice-to-end": "['a', 'b', 'c', 'd'].slice(1)",
  "array-back": "a = [6, 7, 8];<br />a.push(9);<br />i = a.pop();",
  "array-front": "a = [6, 7, 8];<br />a.unshift(5);<br />i = a.shift();",
  "array-concatenation": "a = [1, 2, 3].concat([4, 5, 6]);",
  "replicate-array": "Array(10).fill(null)",
  "array-copy": "a = [1, 2, [3, 4]];<br />a2 = a;<br />a3 = a.slice(0);<br />a4 = JSON.parse(JSON.stringify(a));",
  "array-as-func-arg": "<span style=\"color: gray\"><em>parameter contains address copy</em></span>",
  "iterate-over-array": "[6, 7, 8].forEach((n) =&gt; {<br /><span style=\"white-space: pre-wrap;\">  </span>console.log(n);<br />});<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> new in ES6:</span><br />for (let n of [6, 7, 8]) {<br /><span style=\"white-space: pre-wrap;\">  </span>console.log(n);<br />}",
  "indexed-array-iteration": "for (let i = 0; i &lt; a.length; ++i) {<br /><span style=\"white-space: pre-wrap;\">  </span>console.log(a[i]);<br />}<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> indices not guaranteed to be in order:</span><br />for (let i in a) {<br /><span style=\"white-space: pre-wrap;\">  </span>console.log(a[i]);<br />}",
  "range-iteration": "<span style=\"color: gray\"><em>not space efficient; use C-style for loop</em></span>",
  "range-array": "let a = _.range(1, 11);",
  "array-reverse": "let a = [1, 2, 3];<br /><br />let a2 = a.slice(0).reverse();<br />a.reverse();",
  "array-sort": "let a = [3, 1, 4, 2];<br /><br />let a2 = a.slice(0).sort();<br />a.sort();",
  "array-dedupe": "let a = [1, 2, 2, 3];<br /><br />let a2 = _.uniq(a);<br />a = _.uniq(a);",
  "membership": "a.includes(7)",
  "intersection": "_.intersection([1, 2], [2, 3, 4])",
  "union": "_.union([1, 2], [2, 3, 4])",
  "set-diff": "_.difference([1, 2, 3], [2])<br /><span style=\"color: gray\"><em>none</em></span>",
  "map": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> callback gets 3 args:<br /><span style=\"white-space: pre-wrap;\">//</span> value, index, array</span><br />a.map((x) =&gt; x * x)",
  "filter": "a.filter((x) =&gt; x &gt; 1)",
  "reduce": "a.reduce((m, o) =&gt; m + o, 0)",
  "universal-existential-test": "let a = [1, 2, 3, 4];<br /><br />a.every((n) =&gt; n % 2 === 0)<br />a.some((n) =&gt; n % 2 === 0)",
  "shuffle-sample": "let a = [1, 2, 3, 4];<br /><br />a = _.shuffle(a);<br />let samp = _.sampleSize([1, 2, 3, 4], 2);",
  "flatten": "let a = [1, [2, [3, 4]]];<br /><br />let a2 = _.flatten(a);<br />let a3 = _.flattenDeep(a);",
  "zip": "let a = _.zip([1, 2, 3], ['a', 'b', 'c']);<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> shorter array padded with undefined:</span><br />_.zip([1, 2, 3], ['a', 'b'])"
},
"dictionaries": {
  "dict-literal": "d = {t: 1, f: 0};<br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> keys do not need to be quoted if they<br /><span style=\"white-space: pre-wrap;\">//</span> are a legal JavaScript variable name<br /><span style=\"white-space: pre-wrap;\">//</span> and not a reserved word</span>",
  "dict-size": "_.size(d)<br />Object.getOwnPropertyNames(d).length",
  "dict-lookup": "d.hasOwnProperty(\"t\") ? d[\"t\"] : undefined<br />d.hasOwnProperty(\"t\") ? d.t : undefined<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> JavaScript dictionaries are objects<br /><span style=\"white-space: pre-wrap;\">//</span> and inherit properties from Object.</span>",
  "dict-update": "d['t'] = 2;<br />d.t = 2;",
  "dict-missing-key": "let d = {};<br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> undefined:</span><br />d[\"lorem\"];<br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> adds key/value pair:</span><br />d[\"lorem\"] = \"ipsum\";",
  "dict-key-check": "d.hasOwnProperty(\"t\");",
  "dict-delete": "delete d[\"t\"];<br />delete d.t;",
  "dict-assoc-array": "let a = [['a', 1], ['b', 2], ['c', 3]];<br />let d = _.fromPairs(a);<br /><br /><span style=\"color: gray\"><em>none</em></span>",
  "dict-merge": "let d1 = {a: 1, b: 2};<br />let d2 = {b: 3, c: 4};<br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> d2 overwrites shared keys in d1:</span><br />d1 = _.assignIn(d1, d2);",
  "dict-invert": "let let2num = {t: 1, f: 0};<br />let num2let = _.invert(let2num);",
  "dict-iter": "for (let k in d) {<br /><span style=\"white-space: pre-wrap;\">  </span>console.log(<span style=\"white-space: pre-wrap;\">`</span>value at ${k} is ${d[k]}<span style=\"white-space: pre-wrap;\">`</span>);<br />}",
  "dict-key-val": "Object.keys(d)<br />_.values(d)",
  "dict-sort-values": "let cmp = (a, b) =&gt; a[1] - b[1];<br />let d = {t: 1, f: 0};<br /><br />for (let p of _.toPairs(d).sort(cmp)) {<br /><span style=\"white-space: pre-wrap;\">  </span>console.log(p);<br />}",
  "dict-default-val": "<span style=\"color: gray\"><em>none</em></span>"
},
"functions": {
  "def-func": "function add3 (x1, x2, x3) {<br /><span style=\"white-space: pre-wrap;\">  </span>return x1 + x2 + x3;<br />}",
  "invoke-func": "add3(1, 2, 3)",
  "missing-arg": "<span style=\"color: gray\"><em>set to</em> undefined</span>",
  "extra-arg": "<span style=\"color: gray\"><em>ignored</em></span>",
  "default-arg": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> new in ES6:</span><br />function myLog (x, base = 10) {<br /><span style=\"white-space: pre-wrap;\">  </span>return Math.log(x) / Math.log(base);<br />}",
  "variadic-func": "function firstAndLast() {<br /><span style=\"white-space: pre-wrap;\">  </span>if (arguments.length &gt;= 1) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>console.log('first: ' + arguments[0]);<br /><span style=\"white-space: pre-wrap;\">  </span>}<br /><span style=\"white-space: pre-wrap;\">  </span>if (arguments.length &gt;= 2) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>console.log('last: ' + arguments[1]);<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">// ...</span> operator new in ES6:</span><br />function firstAndLast(<span style=\"white-space: pre-wrap;\">...</span>a) {<br /><span style=\"white-space: pre-wrap;\">  </span>if (a.length &gt;= 1) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>console.log('first: ' + a[0]);<br /><span style=\"white-space: pre-wrap;\">  </span>}<br /><span style=\"white-space: pre-wrap;\">  </span>if (a.length &gt;= 2) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>console.log('last: ' + a[1]);<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "apply-func": "let a = [1, 2, 3];<br /><br />let sum = add3(<span style=\"white-space: pre-wrap;\">...</span>a);",
  "param-alias": "<span style=\"color: gray\"><em>none</em></span>",
  "named-param": "<span style=\"color: gray\"><em>none</em></span>",
  "retval": "<span style=\"color: gray\">return <em>arg or</em> undefined.</span><br /><br /><span style=\"color: gray\"><em>If invoked with</em> new <em>and</em> return <em>value not an object, returns</em> this.</span>",
  "multiple-retval": "function firstAndSecond(a) {<br /><span style=\"white-space: pre-wrap;\">  </span>return [a[0], a[1]];<br />}<br /><br />let [x, y] = firstAndSecond([6, 7, 8]);<br />",
  "anonymous-func-literal": "let square = function (x) {<br /><span style=\"white-space: pre-wrap;\">  </span>return x * x;<br />};<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> =&gt; new in ES6:</span><br />let square = (x) =&gt; { return x * x; };<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> expression body variant:</span><br />let square = (x) =&gt; x * x;",
  "invoke-anonymous-func": "square(2)<br /><br />((x) =&gt; (x * x)(2)",
  "func-as-val": "let func = add3;",
  "private-state-func": "function counter() {<br /><span style=\"white-space: pre-wrap;\">  </span>counter.i += 1;<br /><span style=\"white-space: pre-wrap;\">  </span>return counter.i;<br />}<br /><br />counter.i = 0;<br />console.log(counter());",
  "closure": "function makeCounter () {<br /><span style=\"white-space: pre-wrap;\">  </span>let i = 0;<br /><br /><span style=\"white-space: pre-wrap;\">  </span>return function () {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>i += 1;<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>return i;<br /><span style=\"white-space: pre-wrap;\">  </span>};<br />}<br /><br />let nays = makeCounter();<br />console.log(nays());",
  "generator": "function * makeCounter () {<br /><span style=\"white-space: pre-wrap;\">  </span>let i = 0;<br /><span style=\"white-space: pre-wrap;\">  </span>while (true) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>yield ++i;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}<br /><br />let nays = makeCounter();<br />for (let cnt of nays) {<br /><span style=\"white-space: pre-wrap;\">  </span>console.log(cnt);<br /><span style=\"white-space: pre-wrap;\">  </span>if (cnt &gt; 100) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>break;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "decorator": "<span style=\"color: gray\"><em>none</em></span>",
  "invoke-op-like-func": "<span style=\"color: gray\"><em>none</em></span>"
},
"execution-control": {
  "if": "if (n === 0) {<br /><span style=\"white-space: pre-wrap;\">  </span>console.log('no hits');<br />} else if (n === 1) {<br /><span style=\"white-space: pre-wrap;\">  </span>console.log('1 hit');<br />} else {<br /><span style=\"white-space: pre-wrap;\">  </span>console.log(n + ' hits');<br />}",
  "switch": "switch (n) {<br />case 0:<br /><span style=\"white-space: pre-wrap;\">  </span>console.log('no hits\\n;);<br /><span style=\"white-space: pre-wrap;\">  </span>break;<br />case 1:<br /><span style=\"white-space: pre-wrap;\">  </span>console.log('one hit\\n');<br /><span style=\"white-space: pre-wrap;\">  </span>break;<br />default:<br /><span style=\"white-space: pre-wrap;\">  </span>console.log(n + ' hits\\n');<br />}",
  "while": "while (i &lt; 100) {<br /><span style=\"white-space: pre-wrap;\">  </span>i += 1;<br />}",
  "for": "for (let i = 0; i &lt; 10; ++i) {<br /><span style=\"white-space: pre-wrap;\">  </span>console.log(i);<br />}",
  "break": "for (let i = 30; i &lt; 50; ++i) {<br /><span style=\"white-space: pre-wrap;\">  </span>if (i % 7 === 0) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>console.log('first multiple: ' + i);<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>break;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "continue": "for (let i = 30; i &lt; 50; ++i) {<br /><span style=\"white-space: pre-wrap;\">  </span>if (i % 7 === 0) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>continue;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br /><span style=\"white-space: pre-wrap;\">  </span>console.log('not divisible: ' + i);<br />}",
  "statement-modifiers": "<span style=\"color: gray\"><em>none</em></span>"
},
"exceptions": {
  "base-exc": "<span style=\"color: gray\"><em>Any value can be thrown.</em></span>",
  "predefined-exc": "Error<br /><span style=\"white-space: pre-wrap;\">  </span>EvalError<br /><span style=\"white-space: pre-wrap;\">  </span>RangeError<br /><span style=\"white-space: pre-wrap;\">  </span>ReferenceError<br /><span style=\"white-space: pre-wrap;\">  </span>SyntaxError<br /><span style=\"white-space: pre-wrap;\">  </span>TypeError<br /><span style=\"white-space: pre-wrap;\">  </span>URIError",
  "raise-exc": "throw new Error(\"bad arg\");",
  "catch-all-handler": "try {<br /><span style=\"white-space: pre-wrap;\">  </span>risky();<br />} catch (e) {<br /><span style=\"white-space: pre-wrap;\">  </span>console.log(<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>'risky failed: ' + e.message);<br />}",
  "re-raise-exc": "try {<br /><span style=\"white-space: pre-wrap;\">  </span>throw new Error(\"bam!\");<br />} catch (e) {<br /><span style=\"white-space: pre-wrap;\">  </span>console.log('re-raising<span style=\"white-space: pre-wrap;\">...</span>');<br /><span style=\"white-space: pre-wrap;\">  </span>throw e;<br />}",
  "last-exc-global": "<span style=\"color: gray\"><em>none</em></span>",
  "def-exc": "function Bam(msg) {<br /><span style=\"white-space: pre-wrap;\">  </span>this.message = msg;<br />}<br /><br />Bam.prototype = new Error;",
  "handle-exc": "try {<br /><span style=\"white-space: pre-wrap;\">  </span>throw new Bam(\"bam!\");<br />} catch (e) {<br /><span style=\"white-space: pre-wrap;\">  </span>if (e instanceof Bam) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>console.log(e.message);<br /><span style=\"white-space: pre-wrap;\">  </span>}<br /><span style=\"white-space: pre-wrap;\">  </span>else {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>throw e;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "finally-block": "acquireResource();<br />try {<br /><span style=\"white-space: pre-wrap;\">  </span>risky();<br />} finally {<br /><span style=\"white-space: pre-wrap;\">  </span>releaseResource();<br />}"
},
"threads": {
  "start-thread": "",
  "wait-on-thread": "",
  "sleep": "",
  "timeout": ""
}
}
