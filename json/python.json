{

"version": {
  "version-used": "<span style=\"color: gray\"><em>3.5</em></span>",
  "version": "$ python -V<br />$ python <span style=\"white-space: pre-wrap;\">--</span>version",
  "implicit-prologue": "import os, re, sys"
},
"grammar-execution": {
  "interpreter": "$ python foo.py",
  "repl": "$ python",
  "cmd-line-program": "$ python -c 'print(\"hi!\")'",
  "block-delimiters": ": <span style=\"color: gray\"><em>and offside rule</em></span>",
  "statement-separator": "<span style=\"color: gray\"><em>newline or</em></span> ;<br /><br /><span style=\"color: gray\"><em>newlines not separators inside (), [], {}, triple quote literals, or after backslash: <span style=\"white-space: pre-wrap;\">\\</span></em></span>",
  "source-code-encoding": "<span style=\"color: gray\"><em>Python 3 source is UTF-8 by default; Python 2 source is US-ASCII</em></span><br /><br /><span style=\"color: gray\"># -*- coding: us-ascii -*-</span>",
  "eol-comment": "<span style=\"color: gray\"># comment</span>",
  "multiple-line-comment": "<span style=\"color: gray\"><em>use triple quote string literal:</em></span><br /><br />'''comment line<br />another line'''"
},
"var-expr": {
  "local-var": "<span style=\"color: gray\"># in function body:</span><br />x = 1<br />y, z = 2, 3",
  "file-scope-var": "<span style=\"color: gray\"><em>none</em></span>",
  "global-var": "g = 1<br /><br />def incr_global():<br /><span style=\"white-space: pre-wrap;\">  </span>global g<br /><span style=\"white-space: pre-wrap;\">  </span>g += 1",
  "const": "<span style=\"color: gray\"># uppercase identifiers<br /># constant by convention</span><br />PI = 3.14",
  "assignment": "<span style=\"color: gray\"># assignments can be chained<br /># but otherwise don't return values:</span><br />v = 1",
  "parallel-assignment": "x, y, z = 1, 2, 3<br /><br /><span style=\"color: gray\"># raises ValueError:</span><br />x, y = 1, 2, 3<br /><br /><span style=\"color: gray\"># raises ValueError:</span><br />x, y, z = 1, 2",
  "swap": "x, y = y, x",
  "compound-assignment": "<span style=\"color: gray\"># do not return values:</span><br />+= -= *= /= <span style=\"white-space: pre-wrap;\">//</span>= %= <span style=\"white-space: pre-wrap;\">**</span>=<br />+= *=<br />&amp;= <span style=\"white-space: pre-wrap;\">|</span>= ^=<br /><span style=\"white-space: pre-wrap;\">&lt;&lt;= &gt;&gt;= </span>&amp;= |= ^=",
  "incr-decr": "<span style=\"color: gray\"><em>none</em></span>",
  "null": "None",
  "null-test": "v is None",
  "undef-var": "<span style=\"color: gray\"><em>raises</em></span> NameError",
  "conditional-expr": "x if x &gt; 0 else -x"
},
"arithmetic-logic": {
  "true-false": "True False",
  "falsehoods": "False None 0 0.0 '' [] {}",
  "logical-op": "and or not",
  "relational-op": "<span style=\"color: gray\"><em>relational operators are chainable:</em></span><br />== != &gt; &lt; &gt;= &lt;=",
  "min-max": "min(1, 2, 3)<br />max(1, 2, 3)<br /><br />min([1, 2, 3])<br />max([1, 2, 3])",
  "arith-op": "+ - * / // %<br /><br /><span style=\"color: gray\"><em>In Python 2, / performs integer division.</em></span>",
  "int-div": "22 // 7",
  "divmod": "q, r = divmod(22, 7)",
  "int-div-zero": "<span style=\"color: gray\"><em>raises</em> ZeroDivisionError</span>",
  "float-div": "22 / 7<br /><br /><span style=\"color: gray\"># Python 2:</span><br />float(22) / 7",
  "float-div-zero": "<span style=\"color: gray\"><em>raises</em> ZeroDivisionError</span>",
  "power": "2 <span style=\"white-space: pre-wrap;\">**</span> 32",
  "sqrt": "import math<br /><br />math.sqrt(2)",
  "sqrt-negative-one": "<span style=\"color: gray\"># raises ValueError:</span><br />import math<br />math.sqrt(-1)<br /><br /><span style=\"color: gray\"># returns complex float:</span><br />import cmath<br />cmath.sqrt(-1)",
  "transcendental-func": "from math import exp, log, \\<br />sin, cos, tan, asin, acos, atan, atan2",
  "transcendental-const": "import math<br /><br />math.pi math.e",
  "float-truncation": "import math<br /><br />int(x)<br />int(round(x))<br />math.ceil(x)<br />math.floor(x)",
  "abs-val": "abs(x)",
  "int-overflow": "<span style=\"color: gray\"><em>becomes arbitrary length integer of type</em> long</span>",
  "float-overflow": "<span style=\"color: gray\"><em>raises</em> OverflowError</span>",
  "rational-construction": "from fractions import Fraction<br /><br />x = Fraction(22, 7)",
  "rational-decomposition": "x.numerator<br />x.denominator",
  "complex-construction": "z = 1 + 1.414j",
  "complex-decomposition": "import cmath<br /><br />z.real<br />z.imag<br />cmath.phase(z)<br />abs(z)<br />z.conjugate()",
  "random-num": "import random<br /><br />random.randint(0, 99)<br />random.random()<br />random.gauss(0, 1)",
  "random-seed": "import random<br /><br />random.seed(17)<br />seed = random.getstate()<br />random.setstate(seed)",
  "bit-op": "<span style=\"white-space: pre-wrap;\">&lt;&lt; &gt;&gt; &amp; | ^ ~</span>",
  "binary-octal-hex-literals": "0b101010<br />0o52<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">#</span> also 052 in Python 2</span><br />0x2a",
  "radix": "<span style=\"color: gray\"><em>none</em></span><br />int('60', 7)"
},
"str": {
  "str-type": "str<br /><br /><span style=\"color: gray\"># Python 2:</span><br />unicode",
  "str-literal": "'don\\'t say \"no\"'<br />\"don't say \\\"no\\\"\"<br />\"don't \" 'say \"no\"'<br /><br /><span style=\"color: gray\"># Python 2 (and Python 3):</span><br />u'lorem'<br />u\"ipsum\"",
  "newline-in-str-literal": "<span style=\"color: gray\"># triple quote literals only:</span><br />'''first line<br />second line'''<br /><br />\"\"\"first line<br />second line\"\"\"",
  "str-literal-esc": "\\<span style=\"color: gray\"><em>newline</em></span> \\\\ \\' \\\" \\a \\b \\f \\n \\r \\t \\v \\<span style=\"color: gray\"><em>ooo</em></span> \\x<span style=\"color: gray\"><em>hh</em></span> \\u<span style=\"color: gray\"><em>hhhh</em></span> \\U<span style=\"color: gray\"><em>hhhhhhhh</em></span><br /><br /><span style=\"color: gray\"><em>In Python 2,</em> \\u <em>and</em> \\U <em>only available in string literals with</em> u <em>prefix</em></span>",
  "here-doc": "<span style=\"color: gray\"><em>none</em></span>",
  "var-interpolation": "count = 3<br />item = 'ball'<br />print('{count} {item}s'.format(<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">**</span>locals()))",
  "expr-interpolation": "'1 + 1 = {}'.format(1 + 1)",
  "format-str": "'lorem %s %d %f' % ('ipsum', 13, 3.7)<br /><br />fmt = 'lorem {0} {1} {2}'<br />fmt.format('ipsum', 13, 3.7)",
  "mutable-str": "<span style=\"color: gray\"><em>no</em></span>",
  "copy-str": "<span style=\"color: gray\"><em>none</em></span>",
  "str-concat": "s = 'Hello, '<br />s2 = s + 'World!'<br /><br /><span style=\"color: gray\"># juxtaposition can be used to<br /># concatenate literals:</span><br />s2 = 'Hello, ' \"World!\"",
  "str-replicate": "hbar = '-' * 80",
  "translate-case": "'lorem'.upper()<br />'LOREM'.lower()",
  "capitalize": "import string<br /><br />'lorem'.capitalize()<br />string.capwords('lorem ipsum')",
  "trim": "' lorem '.strip()<br />' lorem'.lstrip()<br />'lorem '.rstrip()",
  "pad": "'lorem'.ljust(10)<br />'lorem'.rjust(10)<br />'lorem'.center(10)",
  "num-to-str": "'value: ' + str(8)",
  "str-to-num": "7 + int('12')<br />73.9 + float('.037')<br /><br /><span style=\"color: gray\"># raises ValueError:</span><br />int('12A')<br /><span style=\"color: gray\"># raises ValueError:</span><br />int('A')",
  "str-join": "' '.join(['do', 're', 'mi', 'fa'])<br /><br /><span style=\"color: gray\"># raises TypeError:</span><br />' '.join([1, 2, 3])",
  "split": "<span style=\"color: gray\"># ['do', 're', '', 'mi', '']:</span><br />'do re<span style=\"white-space: pre-wrap;\">  </span>mi '.split(' ')<br /><br /><span style=\"color: gray\"># ['do', 're', 'mi']:</span><br />'do re<span style=\"white-space: pre-wrap;\">  </span>mi '.split()",
  "split-in-two": "'do re mi fa'.split(None, 1)",
  "split-keep-delimiters": "re.split('(\\s+)', 'do re mi fa')",
  "prefix-suffix-test": "'foobar'.startswith('foo')<br />'foobar'.endswith('bar')",
  "str-len": "len('lorem')",
  "index-substr": "<span style=\"color: gray\"># raises ValueError if not found:</span><br />'do re re'.index('re')<br />'do re re'.rindex('re')<br /><br /><span style=\"color: gray\"># returns -1 if not found:</span><br />'do re re'.find('re')<br />'do re re'.rfind('re')",
  "extract-substr": "<span style=\"color: gray\"><em>none</em></span><br /><span style=\"color: gray\"><em>none</em></span><br />'lorem ipsum'[6:11]",
  "bytes-type": "bytes<br /><br /><span style=\"color: gray\"># In Python 2, str also byte array type</span>",
  "bytes-to-str": "s = b'\\xce\\xbb'.decode('utf-8')",
  "str-to-bytes": "a = '\\u03bb'.encode('utf-8')<br /><br /><span style=\"color: gray\"># Python 2:</span><br />a = u'\\u03bb'.encode('utf-8')",
  "lookup-char": "'lorem ipsum'[6]",
  "chr-ord": "chr(65)<br />ord('A')",
  "str-to-char-array": "list('abcd')",
  "translate-char": "from string import ascii_lowercase<br /><br />ins = ascii_lowercase<br />outs = ins[13:] + ins[:13]<br />table = str.maketrans(ins, outs)<br />'hello'.translate(table)",
  "delete-char": "table = {ord(ch): None for ch in \"aeiou\"}<br />\"disemvowel me\".translate(table)",
  "squeeze-char": "re.sub('(\\s)+', r'\\1',<br /><span style=\"white-space: pre-wrap;\">  </span>'too<span style=\"white-space: pre-wrap;\">   </span>much<span style=\"white-space: pre-wrap;\">   </span>space')"
},
"regex": {
  "regex-literal": "re.compile(r'lorem|ipsum')<br /><span style=\"color: gray\"><em>none</em></span>",
  "ascii-char-class-abbrev": ".<span style=\"white-space: pre-wrap;\">   </span>[^\\n]<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>with</em> re.S <em>modifier matches all chars</em></span><br />\\d<span style=\"white-space: pre-wrap;\">  </span>[0-9]<br />\\D<span style=\"white-space: pre-wrap;\">  </span>[^0-9]<br />\\s<span style=\"white-space: pre-wrap;\">  </span>[ \\t\\r\\n\\f]<br />\\S<span style=\"white-space: pre-wrap;\">  </span>[^ \\t\\r\\n\\f]<br />\\w<span style=\"white-space: pre-wrap;\">  </span>[A-Za-z0-9_]<br />\\W<span style=\"white-space: pre-wrap;\">  </span>[^A-Za-z0-9_]<br /><br /><span style=\"color: gray\"><em>In Python 3, the above definitions are used when</em> re.A <em>is in effect.</em></span>",
  "unicode-char-class-abbrev": ".<span style=\"white-space: pre-wrap;\">   </span>[^\\n]<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>with</em> re.S <em>modifier matches all chars</em></span><br />\\d<span style=\"white-space: pre-wrap;\">  </span>[<span style=\"color: gray\"><em>Nd</em></span>]<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\">Nd: <em>Number, decimal digit</em></span><br />\\D<span style=\"white-space: pre-wrap;\">  </span>[^<span style=\"color: gray\"><em>Nd</em></span>]<br />\\s<span style=\"white-space: pre-wrap;\">  </span>[<span style=\"color: gray\"><em>Z</em></span>\\t\\n\\r\\f\\v\\x1c\\x1d\\x1e\\x1f\\x85]<br />\\S<span style=\"white-space: pre-wrap;\">  </span>[^<span style=\"color: gray\"><em>Z</em></span>\\t\\n\\r\\f\\v\\x1c\\x1d\\x1e\\x1f\\x85]<br />\\w [<span style=\"color: gray\"><em>LN</em></span>_]<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\">L: <em>Letter</em>; N: <em>Number</em></span><br />\\W [<span style=\"color: gray\">^<em>LN</em></span>_]<br /><br /><span style=\"color: gray\"><em>In Python 2, the above definitions are used when</em> re.U <em>is in effect.</em></span>",
  "regex-anchors": "^<span style=\"white-space: pre-wrap;\">   </span><span style=\"color: gray\"><em>start of string or line with</em> re.M</span><br />$<span style=\"white-space: pre-wrap;\">   </span><span style=\"color: gray\"><em>end of string or line with</em> re.M</span><br />\\A<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>start of string</em></span><br />\\b<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>word boundary:</em> \\w\\W <em>or</em> \\W\\w</span><br />\\B<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>non word boundary</em></span><br />\\Z<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>end of string</em></span>",
  "regex-test": "if re.search('1999', s):<br /><span style=\"white-space: pre-wrap;\">  </span>print('party!')",
  "case-insensitive-regex": "re.search('lorem', 'Lorem', re.I)",
  "regex-modifiers": "re.A<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>change meaning of</em> \\b \\B \\d \\D \\s \\S \\w \\W</span><br />re.I<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>make case insensitive</em></span><br />re.M<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>change meaning of</em> ^ <em>and</em> $</span><br />re.S<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>change meaning of</em> .</span><br />re.X<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>ignore whitespace outside char class</em></span>",
  "subst": "s = 'do re mi mi mi'<br />s = re.compile('mi').sub('ma', s)",
  "match-prematch-postmatch": "m = re.search('\\d{4}', s)<br />if m:<br /><span style=\"white-space: pre-wrap;\">  </span>match = m.group()<br /><span style=\"white-space: pre-wrap;\">  </span>prematch = s[0:m.start(0)]<br /><span style=\"white-space: pre-wrap;\">  </span>postmatch = s[m.end(0):len(s)]",
  "group-capture": "rx = '(\\d{4})-(\\d{2})-(\\d{2})'<br />m = re.search(rx, '2010-06-03')<br />yr, mo, dy = m.groups()",
  "named-group-capture": "rx = '^(?P&lt;file&gt;.+)\\.(?P&lt;suffix&gt;.+)$'<br />m = re.search(rx, 'foo.txt')<br /><br />m.groupdict()['file']<br />m.groupdict()['suffix']",
  "scan": "s = 'dolor sit amet'<br />a = re.findall('\\w+', s)",
  "backreference": "<span style=\"color: gray\"><em>none</em></span><br /><br />rx = re.compile('(\\w+) (\\w+)')<br />rx.sub(r'\\2 \\1', 'do re')",
  "recursive-regex": "<span style=\"color: gray\"><em>none</em></span>"
},
"dates-time": {
  "broken-down-datetime-type": "datetime.datetime",
  "current-datetime": "import datetime<br /><br />t = datetime.datetime.now()<br />utc = datetime.datetime.utcnow()",
  "current-unix-epoch": "import datetime<br /><br />t = datetime.datetime.now()<br />epoch = int(t.strftime(\"%s\"))",
  "broken-down-datetime-to-unix-epoch": "from datetime import datetime as dt<br /><br />epoch = int(t.strftime(\"%s\"))",
  "unix-epoch-to-broken-down-datetime": "t = dt.fromtimestamp(1304442000)",
  "fmt-datetime": "t.strftime('%Y-%m-%d %H:%M:%S')",
  "parse-datetime": "from datetime import datetime<br /><br />s = '2011-05-03 10:00:00'<br />fmt = '%Y-%m-%d %H:%M:%S'<br />t = datetime.strptime(s, fmt)",
  "parse-datetime-without-fmt": "<span style=\"color: gray\"># pip install python-dateutil</span><br />import dateutil.parser<br /><br />s = 'July 7, 1999'<br />t = dateutil.parser.parse(s)",
  "date-parts": "t.year<br />t.month<br />t.day",
  "time-parts": "t.hour<br />t.minute<br />t.second",
  "build-datetime": "import datetime<br /><br />yr = 1999<br />mo = 9<br />dy = 10<br />hr = 23<br />mi = 30<br />ss = 0<br />t = datetime.datetime(yr, mo, dy, hr, mi, ss)",
  "datetime-subtraction": "<span style=\"color: gray\">datetime.timedelta <em>object</em></span><br /><br /><span style=\"color: gray\"><em>use</em> total_seconds() <em>method to convert to float representing difference in seconds</em></span>",
  "add-duration": "import datetime<br /><br />delta = datetime.timedelta(<br /><span style=\"white-space: pre-wrap;\">  </span>minutes=10,<br /><span style=\"white-space: pre-wrap;\">  </span>seconds=3)<br />t = datetime.datetime.now() + delta",
  "local-tmz-determination": "<span style=\"color: gray\"><em>a</em> datetime <em>object has no time zone information unless a</em> tzinfo <em>object is provided when it is created</em></span>",
  "nonlocal-tmz": "<span style=\"color: gray\"># pip install pytz</span><br />import pytz<br />import datetime<br /><br />tmz = pytz.timezone('Asia/Tokyo')<br />utc = datetime.datetime.utcnow()<br />utc_dt = datetime.datetime(<br /><span style=\"white-space: pre-wrap;\">  </span>*utc.timetuple()[0:5],<br /><span style=\"white-space: pre-wrap;\">  </span>tzinfo=pytz.utc)<br />jp_dt = utc_dt.astimezone(tmz)",
  "tmz-info": "import time<br /><br />tm = time.localtime()<br /><span style=\"white-space: pre-wrap;\">  </span><br />time.tzname[tm.tm_isdst]<br />(time.timezone / -3600) + tm.tm_isdst",
  "daylight-savings-test": "import time<br /><br />tm = time.localtime()<br /><span style=\"white-space: pre-wrap;\">  </span><br />tm.tm_isdst",
  "microseconds": "t.microsecond"
},
"arrays": {
  "array-literal": "a = [1, 2, 3, 4]",
  "array-size": "len(a)",
  "array-empty": "<span style=\"color: gray\"># None tests as empty:</span><br />not a",
  "array-lookup": "a[0]<br /><br /><span style=\"color: gray\"># returns last element:</span><br />a[-1]",
  "array-update": "a[0] = 'lorem'",
  "array-out-of-bounds": "a = []<br /><span style=\"color: gray\"># raises IndexError:</span><br />a[10]<br /><span style=\"color: gray\"># raises IndexError:</span><br />a[10] = 'lorem'",
  "array-element-index": "a = ['x', 'y', 'y', 'z']<br /><br /><span style=\"color: gray\"># raises ValueError if not found:</span><br />a.index('y')<br /><span style=\"color: gray\"><em>none</em></span>",
  "array-slice": "<span style=\"color: gray\"># select 3rd and 4th elements:</span><br />a[2:4]<br />a[<span style=\"white-space: pre-wrap;\">2:2</span> + 2]",
  "array-slice-to-end": "a[1:]",
  "array-back": "a = [6, 7, 8]<br />a.append(9)<br />a.pop()",
  "array-front": "a = [6, 7, 8]<br />a.insert(0, 5)<br />a.pop(0)",
  "array-concatenation": "a = [1, 2, 3]<br />a2 = a + [4, 5, 6]<br />a.extend([4, 5, 6])",
  "replicate-array": "a = [None] * 10<br />a = [None for i in range(0, 10)]",
  "array-copy": "import copy<br /><br />a = [1,2,[3,4]]<br />a2 = a<br />a3 = list(a)<br />a4 = copy.deepcopy(a)",
  "array-as-func-arg": "<span style=\"color: gray\"><em>parameter contains address copy</em></span>",
  "iterate-over-array": "for i in [1, 2, 3]:<br /><span style=\"white-space: pre-wrap;\">  </span>print(i)",
  "indexed-array-iteration": "a = ['do', 're', 'mi', 'fa']<br />for i, s in enumerate(a):<br /><span style=\"white-space: pre-wrap;\">  </span>print('%s at index %d' % (s, i))",
  "range-iteration": "<span style=\"color: gray\"># use range() in Python 3:</span><br />for i in xrange(1, 1000001):<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>code</em></span>",
  "range-array": "a = range(1, 11)<br /><span style=\"color: gray\"><em>Python 3:</em></span><br />a = list(range(1, 11))",
  "array-reverse": "a = [1, 2, 3]<br /><br />a[::-1]<br />a.reverse()",
  "array-sort": "a = ['b', 'A', 'a', 'B']<br /><br />sorted(a)<br />a.sort()<br /><span style=\"color: gray\"># custom binary comparision<br /># removed from Python 3:</span><br />a.sort(key=str.lower)",
  "array-dedupe": "a = [1, 2, 2, 3]<br /><br />a2 = list(set(a))<br />a = list(set(a))",
  "membership": "7 in a",
  "intersection": "{1, 2} &amp; {2, 3, 4}",
  "union": "{1, 2} | {2, 3, 4}",
  "set-diff": "{1, 2, 3} - {2}<br />{1, 2} ^ {2, 3, 4}",
  "map": "map(lambda x: x * x, [1, 2, 3])<br /><span style=\"color: gray\"># or use list comprehension:</span><br />[x * x for x in [1, 2, 3]]",
  "filter": "filter(lambda x: x &gt; 1, [1, 2, 3])<br /><span style=\"color: gray\"># or use list comprehension:</span><br />[x for x in [1, 2, 3] if x &gt; 1]",
  "reduce": "<span style=\"color: gray\"># import needed in Python 3 only</span><br />from functools import reduce<br /><br />reduce(lambda x, y: x + y, [1, 2, 3], 0)",
  "universal-existential-test": "all(i % 2 == 0 for i in [1, 2, 3, 4])<br />any(i % 2 == 0 for i in [1, 2, 3, 4])",
  "shuffle-sample": "from random import shuffle, sample<br /><br />a = [1, 2, 3, 4]<br />shuffle(a)<br />samp = sample([1, 2, 3, 4], 2)",
  "flatten": "<span style=\"color: gray\"><em>none</em></span>",
  "zip": "list(zip([1, 2, 3], ['a', 'b', 'c']))<br /><br /><span style=\"color: gray\"># extras in longer array dropped:</span><br />list(zip([1, 2, 3], ['a', 'b']))"
},
"dict": {
  "dict-literal": "d = {'t': 1, 'f': 0}",
  "dict-size": "len(d)",
  "dict-lookup": "d['t']",
  "dict-update": "d['t'] = 2<br /><br /><span style=\"color: gray\"># provide default to avoid KeyError:</span><br />d.get('t', None)",
  "dict-missing-key": "d = {}<br /><span style=\"color: gray\"># raises KeyError:</span><br />d['lorem']<br /><span style=\"color: gray\"># adds key/value pair:</span><br />d['lorem'] = 'ipsum'",
  "dict-key-check": "'y' in d",
  "dict-delete": "d = {1: True, 0: False}<br />del d[1]",
  "dict-assoc-array": "a = [['a', 1], ['b', 2], ['c', 3]]<br />d = dict(a)<br /><br />a = ['a', 1, 'b', 2, 'c', 3]<br />d = dict(zip(a[::2], a[1::2]))",
  "dict-merge": "d1 = {'a': 1, 'b': 2}<br />d2 = {'b': 3, 'c': 4}<br />d1.update(d2)",
  "dict-invert": "to_num = {'t': 1, 'f': 0}<br /><span style=\"color: gray\"># dict comprehensions added in 2.7:</span><br />to_let = {v: k for k, v<br /><span style=\"white-space: pre-wrap;\">  </span>in to_num.items()}",
  "dict-iter": "for k, v in d.items():<br /><span style=\"white-space: pre-wrap;\">  </span>print('value at {} is {}'.format(k, v)<br /><br /><span style=\"color: gray\"># Python 2: use iteritems()</span>",
  "dict-key-val": "list(d.keys())<br />list(d.values())<br /><br /><span style=\"color: gray\"># keys() and values return iterators<br /># in Python 3 and lists in Python 2</span>",
  "dict-sort-values": "from operator import itemgetter<br /><br />pairs = sorted(d.items(), key=itemgetter(1))<br /><br />for k, v in pairs:<br /><span style=\"white-space: pre-wrap;\">  </span>print('{}: {}'.format(k, v))",
  "dict-default-val": "from collections import defaultdict<br /><br />counts = defaultdict(lambda: 0)<br />counts['foo'] += 1<br /><br />class Factorial(dict):<br /><span style=\"white-space: pre-wrap;\">  </span>def <span style=\"white-space: pre-wrap;\">__missing__</span>(self, k):<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>if k &gt; 1:<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>return k * self[k-1]<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>else:<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>return 1<br /><br />factorial = Factorial()"
},
"func": {
  "def-func": "def add3(x1, x2, x3):<br /><span style=\"white-space: pre-wrap;\">  </span>return x1 + x2 + x3",
  "invoke-func": "add3(1, 2, 3)",
  "missing-arg": "<span style=\"color: gray\"><em>raises</em> TypeError <em>if number of arguments doesn't match function arity</em></span>",
  "extra-arg": "<span style=\"color: gray\"><em>raises</em> TypeError <em>if number of arguments doesn't match function arity</em></span>",
  "default-arg": "import math<br /><br />def my_log(x, base=10):<br /><span style=\"white-space: pre-wrap;\">  </span>return math.log(x) / math.log(base)<br /><br />my_log(42)<br />my_log(42, math.e)",
  "variadic-func": "def first_and_last(*a):<br /><br /><span style=\"white-space: pre-wrap;\">  </span>if len(a) &gt;= 1:<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>print('first: ' + str(a[0]))<br /><br /><span style=\"white-space: pre-wrap;\">  </span>if len(a) &gt;= 2:<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>print('last: ' + str(a[-1]))",
  "apply-func": "a = [2, 3]<br /><br />add3(1, *a)<br /><br /><span style=\"color: gray\"># splat operator can only be used once<br /># and must appear after other<br /># unnamed arguments</span>",
  "param-alias": "<span style=\"color: gray\"><em>none</em></span>",
  "named-param": "def fequal(x, y, eps=0.01):<br /><span style=\"white-space: pre-wrap;\">  </span>return abs(x - y) &lt; eps<br /><br />fequal(1.0, 1.001)<br />fequal(1.0, 1.001, eps=0.1<span style=\"white-space: pre-wrap;\">**</span>10)",
  "retval": "<span style=\"color: gray\">return <em>arg or</em> None</span>",
  "multiple-retval": "def first_and_second(a):<br /><span style=\"white-space: pre-wrap;\">  </span>return a[0], a[1]<br /><br />x, y = first_and_second([6, 7, 8])",
  "anonymous-func-literal": "<span style=\"color: gray\"># body must be an expression:</span><br />square = lambda x: x * x",
  "invoke-anonymous-func": "square(2)<br /><br />(lambda x: x * x)(2)",
  "func-as-val": "func = add3",
  "private-state-func": "<span style=\"color: gray\"># state not private:</span><br />def counter():<br /><span style=\"white-space: pre-wrap;\">  </span>counter.i += 1<br /><span style=\"white-space: pre-wrap;\">  </span>return counter.i<br /><br />counter.i = 0<br />print(counter())",
  "closure": "def make_counter():<br /><span style=\"white-space: pre-wrap;\">  </span>i = 0<br /><span style=\"white-space: pre-wrap;\">  </span>def counter():<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"># new in Python 3:</span><br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>nonlocal i<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>i += 1<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>return i<br /><span style=\"white-space: pre-wrap;\">  </span>return counter<br /><br />nays = make_counter()<br />print(nays())",
  "generator": "<span style=\"color: gray\"># cf. itertools library</span><br /><br />def make_counter():<br /><span style=\"white-space: pre-wrap;\">  </span>i = 0<br /><span style=\"white-space: pre-wrap;\">  </span>while True:<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>i += 1<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>yield i<br /><br />nays = make_counter()<br /><span style=\"color: gray\"># Python 2: nays.next()</span><br />print(next(nays))<br /><br />for cnt in nays:<br /><span style=\"white-space: pre-wrap;\">  </span>print(cnt)<br /><span style=\"white-space: pre-wrap;\">  </span>if cnt &gt; 100:<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>break<br /><br /><span style=\"color: gray\"># Returning without yielding raises<br /># StopIteration exception.</span>",
  "decorator": "def logcall(f):<br /><span style=\"white-space: pre-wrap;\">  </span>def wrapper(*a, **opts):<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>print('calling ' + f.<span style=\"white-space: pre-wrap;\">__name__</span>)<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>f(*a, **opts)<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>print('called ' + f.<span style=\"white-space: pre-wrap;\">__name__</span>)<br /><span style=\"white-space: pre-wrap;\">  </span>return wrapper<br /><br />@logcall<br />def square(x):<br /><span style=\"white-space: pre-wrap;\">  </span>return x * x",
  "invoke-op-like-func": "import operator<br /><br />operator.mul(3, 7)<br /><br />a = ['foo', 'bar', 'baz']<br />operator.itemgetter(2)(a)"
},
"exec-control": {
  "if": "if 0 == n:<br /><span style=\"white-space: pre-wrap;\">  </span>print('no hits')<br />elif 1 == n:<br /><span style=\"white-space: pre-wrap;\">  </span>print('one hit')<br />else:<br /><span style=\"white-space: pre-wrap;\">  </span>print(str(n) + ' hits')",
  "switch": "<span style=\"color: gray\"><em>none</em></span>",
  "while": "while i &lt; 100:<br /><span style=\"white-space: pre-wrap;\">  </span>i += 1",
  "for": "for i in range(1, 11):<br /><span style=\"white-space: pre-wrap;\">  </span>print(i)",
  "break": "break",
  "continue": "continue",
  "statement-modifiers": "<span style=\"color: gray\"><em>none</em></span>"
},
"exceptions": {
  "base-exc": "BaseException<br /><br /><span style=\"color: gray\"><em>User-defined exceptions should subclass</em> Exception.</span><br /><br /><span style=\"color: gray\"><em>In Python 2 old-style classes can be thrown.</em></span>",
  "predefined-exc": "BaseException<br /><span style=\"white-space: pre-wrap;\">  </span>Exception<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>TypeError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>ImportError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>AssertionError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>ArithmeticError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>FloatingPointError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>OverflowError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>ZeroDivisionError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>SyntaxError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>OSError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>MemoryError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>StopIteration<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>Error<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>SystemError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>ValueError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>UnicodeError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>UnicodeEncodeError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>UnicodeDecodeError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>UnicodeTranslateError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>UnsupportedOperation<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>NameError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>AttributeError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>RuntimeError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>LookupError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>IndexError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>KeyError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>EOFError<br /><span style=\"white-space: pre-wrap;\">  </span>GeneratorExit<br /><span style=\"white-space: pre-wrap;\">  </span>KeyboardInterrupt<br /><span style=\"white-space: pre-wrap;\">  </span>SystemExit",
  "raise-exc": "raise Exception('bad arg')",
  "catch-all-handler": "try:<br /><span style=\"white-space: pre-wrap;\">  </span>risky()<br />except:<br /><span style=\"white-space: pre-wrap;\">  </span>print('risky failed')",
  "re-raise-exc": "try:<br /><span style=\"white-space: pre-wrap;\">  </span>raise Exception('bam!')<br />except:<br /><span style=\"white-space: pre-wrap;\">  </span>print('re-raising<span style=\"white-space: pre-wrap;\">...</span>')<br /><span style=\"white-space: pre-wrap;\">  </span>raise",
  "last-exc-global": "<span style=\"color: gray\"><em>last exception:</em> sys.exc_info()[1]</span>",
  "def-exc": "class Bam(Exception):<br /><span style=\"white-space: pre-wrap;\">  </span>def <span style=\"white-space: pre-wrap;\">__init__</span>(self):<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>super(Bam, self).<span style=\"white-space: pre-wrap;\">__init__</span>('bam!')",
  "handle-exc": "try:<br /><span style=\"white-space: pre-wrap;\">  </span>raise Bam()<br />except Bam as e:<br /><span style=\"white-space: pre-wrap;\">  </span>print(e)",
  "finally-block": "acquire_resource()<br />try:<br /><span style=\"white-space: pre-wrap;\">  </span>risky()<br />finally:<br /><span style=\"white-space: pre-wrap;\">  </span>release_resource()"
},
"threads": {
  "start-thread": "class sleep10(threading.Thread):<br /><span style=\"white-space: pre-wrap;\">  </span>def run(self):<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>time.sleep(10)<br /><br />thr = sleep10()<br />thr.start()",
  "wait-on-thread": "thr.join()",
  "sleep": "import time<br /><br />time.sleep(0.5)",
  "timeout": "import signal, time<br /><br />class Timeout(Exception): pass<br /><br />def timeout_handler(signo, fm):<br /><span style=\"white-space: pre-wrap;\">  </span>raise Timeout()<br /><br />signal.signal(signal.SIGALRM,<br /><span style=\"white-space: pre-wrap;\">  </span>timeout_handler)<br /><br />try:<br /><span style=\"white-space: pre-wrap;\">  </span>signal.alarm(5)<br /><span style=\"white-space: pre-wrap;\">  </span>might_take_too_long()<br />except Timeout:<br /><span style=\"white-space: pre-wrap;\">  </span>pass<br />signal.alarm(0)"
}
}
