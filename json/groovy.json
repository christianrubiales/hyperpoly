{

"version": {
  "version-used": "<span style=\"color: gray\"><em>2.3</em></span>",
  "show-version": "$ groovy -v",
  "implicit-prologue": ""
},
"grammar-execution": {
  "interpreter": "$ echo 'println \"hi!\"' &gt; hi.groovy<br />$ groovy hi.groovy",
  "repl": "$ groovysh",
  "cmd-line-program": "$ groovy -e 'println \"hi world!\"'",
  "block-delimiters": "{}",
  "stmt-separator": "<span style=\"color: gray\"><em>newline or</em> ;</span><br /><br /><span style=\"color: gray\"><em>newline not a separator inside (), [], triple quote literal, or after binary operator or backslash.</em></span>",
  "expr-stmt": "<span style=\"color: gray\"><em>yes</em></span>",
  "source-code-encoding": "",
  "eol-comment": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> comment</span>",
  "multiple-line-comment": "<span style=\"color: gray\">/* comment<br />another comment */</span>"
},
"var-expr": {
  "local-var": "x = 1<br />def y = 2<br />Integer z = 3",
  "local-scope-region": "",
  "global-var": "",
  "const": "",
  "assignment": "x = 1",
  "parallel-assignment": "(x, y, z) = [1, 2, 3]<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> 3 is discarded:</span><br />(x, y) = [1, 2, 3]<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> z is set to null:</span><br />(x, y, z) = [1, 2]",
  "swap": "(x, y) = [y, x]",
  "compound-assignment": "",
  "incr-decr": "",
  "null": "null",
  "null-test": "v == null",
  "undef-var": "<span style=\"color: gray\"><em>raises</em> groovy.lang.MissingPropertyException</span>",
  "conditional-expr": "x &gt; 0 ? x : -x"
},
"arithmetic-logic": {
  "true-false": "true false",
  "falsehoods": "false null 0 0.0 \"\" [] [:]",
  "logical-op": "&amp;&amp; <span style=\"white-space: pre-wrap;\">||</span> !",
  "relational-expr": "x &gt; 0",
  "relational-op": "== != &gt; &lt; &gt;= &lt;=",
  "min-max": "[1, 2, 3].min()<br />[1, 2, 3].max()<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> binary functions:</span><br />Math.min(1, 2)<br />Math.max(1, 2)",
  "three-val-comparison": "",
  "arith-expr": "1 + 3",
  "arith-op": "+ - * / <span style=\"color: gray\"><em>??</em></span> %",
  "int-div": "Math.floor(x / y)",
  "int-div-zero": "<span style=\"color: gray\"><em>raises</em> java.lang.ArithmeticException</span>",
  "float-div": "x / y",
  "float-div-zero": "<span style=\"color: gray\"><em>raises</em> java.lang.ArithmeticException</span>",
  "power": "2 ** 32",
  "sqrt": "Math.sqrt(2)",
  "sqrt-negative-one": "Double.NaN",
  "transcendental-func": "Math.exp Math.log Math.sin Math.cos Math.tan Math.asin Math.acos Math.atan Math.atan2",
  "transcendental-const": "Math.PI<br />Math.E",
  "float-truncation": "(int)3.1<br />Math.round(3.1)<br />(int)Math.floor(3.1)<br />(int)Math.ceil(3.1)",
  "absolute-val": "Math.abs(-3)",
  "int-overflow": "<span style=\"color: gray\"><em>becomes type</em> java.math.BigInteger</span>",
  "float-overflow": "Double.POSITIVE_INFINITY",
  "rational-construction": "",
  "rational-decomposition": "",
  "complex-construction": "",
  "complex-decomposition": "",
  "random-num": "rnd = new Random()<br />rnd.nextInt(100)<br />rnd.nextDouble()",
  "random-seed": "rnd = new Random()<br />rnd.setSeed(17)",
  "bit-op": "<span style=\"white-space: pre-wrap;\">&lt;&lt; &gt;&gt; &amp; | ^ ~</span>",
  "binary-oct-hex-literals": "",
  "radix": ""
},
"str": {
  "str-literal": "\"don't say \\\"no\\\"\"<br />'don\\'t say \"no\"'<br />\"\"\"don't say \"no\\\"\"\"\"<br />'''don't say \"no\"'''<br />/don't say \"no\"/",
  "str-literal-newline": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> triple quote literals only:</span><br />\"\"\"foo<br />bar\"\"\"<br /><br />'''foo<br />bar'''",
  "char-esc": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> single and double quotes<br /><span style=\"white-space: pre-wrap;\">//</span> including triple quotes:</span><br />\\b \\f \\n \\r \\t<br /><span style=\"white-space: pre-wrap;\">\\\\</span> \\\" \\'<br />\\u<span style=\"color: gray\"><em>hhhh</em></span> \\<span style=\"color: gray\"><em>o</em></span> \\<span style=\"color: gray\"><em>oo</em></span> \\<span style=\"color: gray\"><em>ooo</em></span><br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> slash quotes:</span><br />\\/",
  "here-doc": "<span style=\"color: gray\"><em>none</em></span>",
  "var-interpolation": "count = 3<br />item = \"ball\"<br /><br />\"$count ${item}s\"<br />\"\"\"$count ${item}s\"\"\"",
  "expr-interpolation": "\"1 + 1 = ${1 + 1}\"<br />\"\"\"1 + 1 = ${1 + 1}\"\"\"",
  "str-concat": "s = \"Hello, \" + \"World!\"",
  "str-replicate": "hbar = \"-\" * 80",
  "sprintf": "fmt = \"lorem %s %d %.2f\"<br />String.format(fmt, \"ipsum\", 13, 3.7)",
  "case": "\"lorem\".toUpperCase()<br />\"LOREM\".toLowerCase()",
  "capitalize": "\"lorem\".capitalize()<br /><span style=\"color: gray\"><em>none</em></span>",
  "trim": "\" lorem \".trim()",
  "pad": "\"lorem\".padRight(10)<br />\"lorem\".padLeft(10)<br />\"lorem.center(10)",
  "str-to-num": "7 + Integer.parseInt(\"12\")<br />73.9 + Double.parseDouble(\".037\")",
  "num-to-str": "\"value: \" + 8<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> explicit conversion:</span><br />8.toString()",
  "join": "[\"do\", \"re\", \"mi\"].join(\" \")",
  "split": "\"do re mi\".split()",
  "split-in-two": "",
  "split-keep-delimiters": "",
  "str-length": "\"lorem\".size()<br />\"lorem\".length()",
  "index-substr": "\"lorem ipsum\".indexOf(\"ipsum\")",
  "extract-substr": "\"lorem ipsum\".substring(6, 11)",
  "lookup-char": "\"lorem ipsum\"[6]",
  "chr-ord": "(Character)65<br />(Integer)'A'",
  "str-to-char-array": "",
  "translate-char": "",
  "delete-char": "",
  "squeeze-char": ""
},
"regex": {
  "regex-literal": "",
  "char-class-abbrev": "<span style=\"color: gray\"><em>char class abbrevs:</em></span><br />. \\d \\D \\s \\S \\w \\W<br /><br /><span style=\"color: gray\"><em>anchors:</em></span> ^ $ \\b",
  "regex-anchors": "",
  "regex-match": "s = \"it is 1999\"<br /><br />if (s =~ /1999/) {<br /><span style=\"white-space: pre-wrap;\">  </span>println(\"party!\")<br />}",
  "case-insensitive-regex": "\"Lorem\" =~ /(?i)lorem/",
  "regex-modifiers": "i s",
  "subst": "\"do re mi mi mi\".replaceAll(/mi/, \"ma\")",
  "match-prematch-postmatch": "",
  "group-capture": "s = \"2010-06-03\"<br />m = s =~ /(\\d{4})-(\\d{2})-(\\d{2})/<br />yr = m.group(1)<br />mo = m.group(2)<br />dy = m.group(3)",
  "named-group-capture": "",
  "scan": "",
  "backreference": "\"do do\" =~ /(\\w+) \\1/<br /><br />rx = /(\\w+) (\\w+)/<br />\"do re\".replaceAll(rx, '$2 $1')",
  "recursive-regex": ""
},
"dates-time": {
  "date-time-type": "",
  "current-date-time": "t = new Date()",
  "unix-epoch": "Math.round(t.getTime() / 1000)<br />t = new Date(1315716177 * 1000)",
  "current-unix-epoch": "",
  "strftime": "",
  "strptime": "",
  "parse-date": "",
  "get-date-parts": "",
  "get-time-parts": "",
  "date-from-parts": "",
  "date-subtraction": "",
  "add-time-duration": "",
  "local-tmz": "",
  "tmz-offset": "",
  "microseconds": "",
  "sleep": "",
  "timeout": ""
},
"arrays": {
  "array-literal": "a = [1, 2, 3, 4]",
  "quote-words": "",
  "array-size": "a.size",
  "array-lookup": "a[0]",
  "array-update": "a[0] = 'lorem'",
  "array-out-of-bounds": "<span style=\"color: gray\"><em>returns</em> null</span>",
  "array-element-index": "[6, 7, 7, 8].indexOf(7)<br />[6, 7, 7, 8].lastIndexOf(7)<br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> returns -1 if not found</span>",
  "array-slice": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> ['b', 'c']:</span><br />['a', 'b', 'c', 'd'][1..2]",
  "array-slice-to-end": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> ['b', 'c', 'd']:</span><br />['a', 'b', 'c', 'd'][1..-1]",
  "array-back": "a = [6, 7, 8]<br />a.push(9)<br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> also:</span><br />a <span style=\"white-space: pre-wrap;\">&lt;&lt;</span> 9<br />i = a.pop()",
  "array-front": "a = [6, 7, 8]<br />a.add(0, 5)<br />i = a.remove(0)",
  "array-concat": "[1, 2, 3] + [4, 5, 6]",
  "array-replicate": "a = [null] * 10",
  "array-copy": "",
  "array-arg": "",
  "array-iter": "for (i in [1, 2, 3, 4]) {<br /><span style=\"white-space: pre-wrap;\">  </span>println i<br />}",
  "range-iteration": "",
  "range-array": "",
  "array-reverse": "a = [1, 2, 3]<br />a.reverse()",
  "array-sort": "a = [3, 1, 4, 2]<br />a.sort()",
  "array-dedupe": "a = [1, 2, 2, 3]<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> modifies array in place:</span><br />a.unique()",
  "membership": "[1, 2, 3].contains(7)<br />![1, 2, 3].contains(7)",
  "intersection": "[1, 2].intersect([2, 3])",
  "union": "([1, 2] + [2, 3, 4]).unique()",
  "set-diff": "[1 2 3] - [2]",
  "map": "[1, 2, 3].collect() { n -&gt; n * n }",
  "filter": "[1, 2, 3].findAll() { x -&gt; x &gt; 2 }",
  "reduce": "[1, 2, 3].inject(0) { x, y -&gt; x + y }",
  "universal-existential-test": "<span style=\"color: gray\"><em>none</em></span>",
  "shuffle": "a = [1, 2, 3, 4]<br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> no return value:</span><br />Collections.shuffle(a)",
  "zip": "[[1,2,3], ['a', 'b', 'c']].transpose()"
},
"dict": {
  "dict-literal": "d = [\"t\": 1, \"f\": 0]",
  "dict-size": "d.size()",
  "dict-lookup": "d[\"t\"]",
  "dict-update": "d[\"t\"] = 2",
  "dict-out-of-bounds": "<span style=\"color: gray\"><em>returns</em> null</span>",
  "dict-key-check": "d.containsKey(\"t\")",
  "dict-delete": "",
  "dict-assoc-array": "",
  "dict-merge": "",
  "dict-invert": "",
  "dict-iter": "",
  "dict-key-val-array": "",
  "dict-sort-val": "",
  "dict-default-val": ""
},
"func": {
  "func-def": "def (x, y) {<br /><span style=\"white-space: pre-wrap;\">  </span>x + y<br />}",
  "func-invocation": "add(1, 2)<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> parens are optional:</span><br />add 1, 2",
  "nested-func": "",
  "missing-arg": "<span style=\"color: gray\"><em>raises</em> groovy.lang.MissingMethodException</span>",
  "extra-arg": "<span style=\"color: gray\"><em>raises</em> groovy.lang.MissingMethodException</span>",
  "default-arg": "",
  "var-arg": "",
  "apply-func": "",
  "retval": "<span style=\"color: gray\">return <em>arg or last expression evaluated</em></span>",
  "multiple-retval": "<span style=\"color: gray\"><em>none</em></span>",
  "lambda-decl": "sqr = { x -&gt; Math.sqrt x }",
  "lambda-invocation": "sqr(2)",
  "func-as-val": "",
  "private-state-func": "",
  "closure": "",
  "generator": ""
},
"exec-control": {
  "if": "if (n == 0) {<br /><span style=\"white-space: pre-wrap;\">  </span>println(\"no hits\")<br />}<br />else if (n == 1) {<br /><span style=\"white-space: pre-wrap;\">  </span>println(\"one hit\")<br />}<br />else {<br /><span style=\"white-space: pre-wrap;\">  </span>println(n + \" hits\")<br />}",
  "while": "while (i &lt; 100) {<br /><span style=\"white-space: pre-wrap;\">  </span>i += 1<br />}",
  "break-continue": "break continue",
  "for": "for (i = 0; i &lt; 10; i++) {<br /><span style=\"white-space: pre-wrap;\">  </span>println i<br />}",
  "stmt-modifiers": ""
},
"exceptions": {
  "raise-exc": "throw new Exception(\"bad arg\")",
  "catch-exc": "",
  "last-exc-global": "",
  "finally-ensure": "",
  "uncaught-exc": ""
},
"streams": {
  "standard-file-handles": "System.in<br />System.out<br />System.err",
  "read-stdin": "",
  "eof": "",
  "chomp": "",
  "print-to-stdout": "print(\"Hello, World!\\n\")<br />println(\"Hello, World!\")<br />System.out.print(\"Hello, World!\\n\")<br />System.out.println(\"Hello, World!\")",
  "printf": "printf(\"%.2f\\n\", 3.1415)",
  "open-file": "f = new File(\"/etc/hosts\")<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> optional traditional file handle:</span><br />f2 = f.newInputStream()",
  "open-file-write": "f = new File(\"/etc/hosts\")<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> optional traditional file handle:</span><br />f2 = f.newOutputStream()",
  "file-encoding": "new File('/tmp/a_file.txt').withWriter('utf-8') {<br /><span style=\"white-space: pre-wrap;\">  </span>f -&gt; f.writeLine 'λαμβδα'<br />}",
  "open-file-append": "",
  "close-file": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> traditional file handle:</span><br />f2.close()",
  "close-file-implicitly": "",
  "io-err": "",
  "encoding-err": "",
  "read-line": "",
  "file-iter": "",
  "read-file-array": "a = f.readLines()",
  "read-file-str": "s = f.text",
  "write-file": "",
  "write-line": "",
  "flush-file": "",
  "eof-test": "",
  "seek": "",
  "open-tmp-file": "",
  "in-memory-stream": ""
},
"file": {
  "file-test": "f = new File('/etc/hosts')<br /><br />f.exists()<br />f.isFile()",
  "file-size": "f = new File('/etc/hosts')<br /><br />f.length()",
  "readable-writable-executable": "f = new File('etc/hosts')<br /><br />f.canRead()<br />f.canWrite()<br />f.canExecute()",
  "chmod": "f = new File(\"/tmp/foo\")<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> set owner permissions:</span><br />f.setReadable(true)<br />f.setWritable(true)<br />f.setExecutable(true)<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> set owner/group/other permissions:</span><br />f.setReadable(true, false)<br />f.setWritable(true, false)<br />f.setExecutable(true, false)",
  "last-modification-time": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> milliseconds since Unix epoch:</span><br />new File(\"/etc/passwd\").lastModified()",
  "file-cp-rm-mv": "<span style=\"color: gray\"><em>??</em></span><br />new File(\"/tmp/foo\").delete()<br />new File(\"/tmp/bar\").renameTo(\"/tmp/foo\")",
  "symlink": "",
  "tmpfile": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> args are prefix and suffix:</span><br />f = File.createTempFile(\"foo\", \".txt\")"
},
"file-fmt": {
  "parse-csv": "",
  "generate-csv": "",
  "parse-json": "import groovy.json.JsonSlurper<br /><br />jsonSlurper = new JsonSlurper()<br />data = jsonSlurper.parseText('{\"t\": 1, \"f\": 0}')",
  "generate-json": "import groovy.json.JsonOutput<br /><br />JsonOutput.toJson([\"t\": 1, \"f\": 0])",
  "parse-xml": "",
  "generate-xml": ""
},
"dir": {
  "working-dir": "System.getProperty(\"user.dir\")<br /><br /><span style=\"color: gray\"><em>none</em></span>",
  "build-pathname": "",
  "dirname-basename": "f = new File(\"/etc/hosts\")<br />f.getParent()<br />f.getName()",
  "absolute-pathname": "new File(\"foo\").getAbsolutePath()<br />new File(\"/foo\").getAbsolutePath()<br />new File(\"../foo\").getCanonicalPath()<br />new File(\".\").getCanonicalPath()",
  "dir-iter": "",
  "glob": "",
  "mkdir": "new File(\"/tmp/foo/bar\").mkdirs()",
  "recursive-cp": "",
  "rmdir": "",
  "rm-rf": "",
  "dir-test": "new File(\"/tmp\").isDirectory()",
  "unused-dir": "",
  "system-tmp-dir": ""
},
"processes-environment": {
  "cmd-line-arg": "args.size()<br />args[0]<br />args[1]<br />…",
  "program-name": "<span style=\"color: gray\"><em>none</em></span>",
  "env-var": "System.getenv(\"HOME\")",
  "pid": "<span style=\"color: gray\"><em>none</em></span>",
  "user-id-name": "<span style=\"color: gray\"><em>none</em></span>",
  "exit": "System.exit(0)",
  "signal-handler": "<span style=\"color: gray\"><em>none</em></span>",
  "exec-test": "new File(\"/bin/ls\").canExecute()",
  "external-cmd": "buffer = new StringBuffer()<br />p = 'ls'.execute()<br />p.waitForProcessOutput(buffer, buffer)<br />buffer.toString()",
  "shell-esc-external-cmd": "<span style=\"color: gray\"><em>none</em></span>",
  "cmd-subst": "<span style=\"color: gray\"><em>none</em></span>"
},
"option-parsing": {
  "cmd-line-opt": ""
},
"lib-namespaces": {
  "compile-lib": "$ cat Foo.groovy<br />class Foo {<br /><span style=\"white-space: pre-wrap;\">  </span>static int add(int a, int b) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>a + b<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}<br /><br />$ groovyc foo.groovy",
  "load-lib": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> import Foo from Foo.groovy:</span><br />import Foo",
  "load-lib-subdir": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> import Foo from bar/Foo.groovy:</span><br />import bar.Foo",
  "hot-patch": "<span style=\"color: gray\"><em>none</em></span>",
  "load-err": "org.codehaus.groovy.control.MultipleCompilationErrorsException",
  "main-in-lib": "class Foo {<br /><span style=\"white-space: pre-wrap;\">  </span>static void main(String… args) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>println \"main was called\"<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "lib-path": "<span style=\"color: gray\"><em>none</em></span>",
  "lib-path-env": "$ CLASSPATH=lib groovy main.groovy",
  "lib-path-cmd-line": "$ groovy -cp lib main.groovy",
  "simple-global-id": "<span style=\"color: gray\"><em>only class identifiers are global</em></span>",
  "multiple-label-id": "<span style=\"color: gray\"><em>Classes defined inside a file with a package declaration at the top.</em></span>",
  "namespace-label-separator": "foo.bar.Baz()",
  "namespace-decl": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> all non-classes in namespace of a class:</span><br />class Foo {<br /><br />}",
  "subnamespace-decl": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> define class foo.Bar:</span><br />package foo<br /><br />class Bar {<br /><br />}",
  "import-def": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> all imports are unqualified:</span><br />import foo.Bar<br />import foo.Baz",
  "import-namespace": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> import all classes in foo:</span><br />import foo.*",
  "shadow-avoidance": "import java.math.BigInteger as BigInt",
  "pkg-management": ""
},
"objects": {
  "def-class": "class Int {<br /><span style=\"white-space: pre-wrap;\">  </span>public int value<br /><span style=\"white-space: pre-wrap;\">  </span>Int (int n) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>value = n<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "create-obj": "o = new Int(3)",
  "blank-obj": "",
  "instance-var-visibility": "",
  "obj-literal": "",
  "set-attr": "o.value = 4",
  "get-attr": "o.value",
  "def-method": "",
  "invoke-method": "",
  "method-missing": "",
  "def-class-method": "",
  "invoke-class-method": "",
  "def-class-var": "",
  "get-set-class-var": ""
},
"inheritance-polymorphism": {
  "subclass": ""
},
"reflection": {
  "inspect-type": "o.class<br />o.getClass()",
  "basic-types": "",
  "inspect-class": "",
  "has-method": "",
  "msg-passing": "",
  "eval": "",
  "methods": "\"lorem\".metaClass.methods",
  "attributes": "",
  "loaded-lib": "",
  "loaded-namespaces": "",
  "inspect-namespace": "",
  "pretty-print": "",
  "src-line-file": "",
  "cmd-line-doc": ""
},
"net-web": {
  "hostname-ip": "",
  "http-get": "",
  "http-post": "",
  "absolute-url": "",
  "parse-url": "",
  "url-encode": "",
  "base64": ""
},
"unit-tests": {
  "test-class": "",
  "run-test": "",
  "assert-equal": "",
  "assert-approx": "",
  "assert-regex": "",
  "assert-exc": "",
  "test-setup": "",
  "test-teardown": ""
},
"debug-profile": {
  "check-syntax": "",
  "warning-flag": "",
  "lint": "",
  "debugger": "",
  "debugger-cmd": "",
  "benchmark-code": "",
  "profile-code": ""
}
}
