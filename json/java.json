{

"version": {
  "version-used": "<span style=\"color: gray\"><em>java 1.7</em></span>",
  "show-version": "$ javac -version",
  "implicit-prologue": ""
},
"grammar-execution": {
  "hello-world": "$ cat Hello.java<br />public class Hello {<br /><span style=\"white-space: pre-wrap;\">  </span>public static void main(String[] args) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>System.out.println(\"Hello, World!\");<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}<br /><br />$ javac Hello.java<br /><br />$ java Hello",
  "file-suffixes": "Foo.java<br /><span style=\"color: gray\"><em>none</em></span><br />Foo.class<br /><br /><span style=\"color: gray\">Foo.java <em>must define a single top level class</em> Foo</span>",
  "block-delimiters": "{ }",
  "stmt-terminator": ";",
  "top-level-stmt": "<span style=\"color: gray\"><em>each file contains the following elements in order:<br /><br />(1) optional package directive<br />(2) zero or more import directives<br />(3) one public class definition and zero or more private class definitions</em></span>",
  "eol-comment": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> comment</span>",
  "multiple-line-comment": "<span style=\"color: gray\">/* comment<br />another comment */</span>"
},
"variables-expressions": {
  "local-var": "int i;<br />int j = 3;",
  "uninitialized-local-var": "<span style=\"color: gray\"><em>compiler error</em></span>",
  "global-var": "<span style=\"color: gray\"><em>foo/Foo.java:</em></span><br />package foo;<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> globals must be declared inside a<br /><span style=\"white-space: pre-wrap;\">//</span> class:</span><br />public class Foo {<br /><span style=\"white-space: pre-wrap;\">  </span>public static int bar;<br />}<br /><br /><span style=\"color: gray\"><em>UseFoo.java:</em></span><br />import foo.Foo;<br /><br />public class UseFoo {<br /><span style=\"white-space: pre-wrap;\">  </span>public static void main(String[] args) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>System.out.println(Foo.bar);<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "uninitialized-global-var": "<span style=\"color: gray\"><em>Zero initialized.</em></span>",
  "write-once-var": "final int i = 7;",
  "assignment": "int n;<br />n = 3;",
  "compound-assignment": "+= -= *= /= %=<br /><span style=\"white-space: pre-wrap;\">&lt;&lt;= &gt;&gt;= </span>&amp;= ^= |=<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">&gt;&gt;=</span> <em>is arithmetic right shift,</em> <span style=\"white-space: pre-wrap;\">&gt;&gt;&gt;=</span> <em>is logical right shift</em></span>",
  "incr-decr": "int n = 1;<br />int one = n++;<br />int three = ++n;<br />int two = <span style=\"white-space: pre-wrap;\">--</span>n;",
  "addr": "<span style=\"color: gray\"><em>none</em></span>",
  "dereference": "<span style=\"color: gray\"><em>none</em></span>",
  "type-size": "<span style=\"color: gray\"><em>none</em></span>",
  "addr-arith": "<span style=\"color: gray\"><em>none</em></span>",
  "unique-ptr": "<span style=\"color: gray\"><em>none</em></span>",
  "ref-cnt-ptr": "<span style=\"color: gray\"><em>none</em></span>",
  "weak-ptr": "<span style=\"color: gray\"><em>none</em></span>",
  "allocate-heap": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> Primitive types are stack allocated.<br /><span style=\"white-space: pre-wrap;\">//</span> Use a wrapper class to store on the<br /><span style=\"white-space: pre-wrap;\">//</span> heap:</span><br />Integer i = new Integer(0);",
  "uninitialized-heap": "<span style=\"color: gray\"><em>zero-initialized</em></span>",
  "free-heap": "<span style=\"color: gray\"><em>garbage collected</em></span>",
  "null": "null",
  "coalesce": "String s1 = s2 == null ? \"was null\" : s2;"
},
"arithmetic-logic": {
  "boolean-type": "boolean",
  "true-false": "true false",
  "falsehoods": "false",
  "logical-op": "&amp;&amp; <span style=\"white-space: pre-wrap;\">||</span> !",
  "relational-op": "== != &lt; &gt; &lt;= &gt;=",
  "int-type": "byte n1;<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> 1 byte</span><br />short n2; <span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> 2 bytes</span><br />int n3;<span style=\"white-space: pre-wrap;\">   </span><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> 4 bytes</span><br />long n4;<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> 8 bytes</span>",
  "unsigned-type": "char n1;<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span>2 bytes</span>",
  "float-type": "float x1;<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> 4 bytes</span><br />double x2; <span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> 8 bytes</span>",
  "fixed-type": "<span style=\"color: gray\"><em>none</em></span>",
  "arithmetic-op": "+ - * / %",
  "int-div": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> evaluates to 2:</span><br />7 / 3",
  "int-div-zero": "<span style=\"color: gray\"><em>throws</em></span> java.lang.ArithmeticException",
  "float-div": "7 / (float)3",
  "float-div-zero": "Float.POSITIVE_INFINITY<br />Float.NaN<br />Float.NEGATIVE_INFINITY<br /><br /><span style=\"color: gray\"><em>constants with same names defined in</em></span> Double",
  "power": "Math.pow(2.0, 32.0);",
  "sqrt": "Math.sqrt(2)",
  "sqrt-negative-one": "Double.NaN",
  "transcendental-func": "Math.exp Math.log <span style=\"color: gray\"><em>none</em></span> Math.log10<br />Math.sin Math.cos Math.tan<br />Math.asin Math.acos Math.atan<br />Math.atan2",
  "transcendental-const": "Math.E<br />Math.PI",
  "float-truncation": "(long)3.77<br />Math.round(3.77)<br />(long)Math.floor(3.77)<br />(long)Math.ceil(3.77)",
  "absolute-val": "Math.abs(-7)<br />Math.abs(-7.77)",
  "int-overflow": "<span style=\"color: gray\"><em>modular arithmetic</em></span>",
  "float-overflow": "Float.POSITIVE_INFINITY",
  "float-limits": "Float.MAX_VALUE<br />Float.MIN_VALUE<br />Double.MAX_VALUE<br />Double.MIN_VALUE",
  "complex-construction": "",
  "complex-decomposition": "",
  "random-num": "import java.util.Random;<br /><br />Random rnd = new Random();<br /><br />int i = rnd.nextInt(100);<br />double x = rnd.nextDouble();<br />double y = rnd.nextGaussian();",
  "random-seed": "import java.util.Random;<br /><br />Random rnd = new Random();<br /><br />rnd.setSeed(17);<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> seed can also be passed to constructor</span>",
  "bit-op": "<span style=\"white-space: pre-wrap;\"> &lt;&lt; &gt;&gt; &amp; | ^ ~ </span><br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">&gt;&gt;</span> <em>is arithmetic right shift, <span style=\"white-space: pre-wrap;\">&gt;&gt;&gt;</span> is logical right shift</em></span>",
  "binary-octal-hex-literals": "<span style=\"color: gray\"><em>none in Java 1.6</em></span><br />052<br />0x2a",
  "radix": "Integer.toString(42, 7)<br />Integer.parseInt(\"60\", 7)"
},
"strings": {
  "str-type": "java.lang.String",
  "str-literal": "\"don't say\\\"no\\\"\"",
  "newline-literal": "<span style=\"color: gray\"><em>no</em></span>",
  "str-literal-escape": "\\b \\f \\n \\r \\t<br />\\\\ \\\" \\'<br />\\u<span style=\"color: gray\"><em>hhhh</em></span> \\<span style=\"color: gray\"><em>o</em></span> \\<span style=\"color: gray\"><em>oo</em></span> \\<span style=\"color: gray\"><em>ooo</em></span>",
  "allocate-str": "String s = \"hello\";<br />String t = new String(s);",
  "mutable-str": "<span style=\"color: gray\">String <em>objects are immutable.</em></span><br /><br /><span style=\"color: gray\">StringBuffer <em>has</em> append(), delete(), deleteCharAt(), insert(), replace(), setCharAt().</span>",
  "copy-str": "String s = \"bar\";<br />StringBuffer sb = new StringBuffer(s);<br />sb.setCharAt(2, 'z');<br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> s contains \"bar\"; s2 contains \"baz\":</span><br />String s2 = sb.toString();",
  "fmt-str": "String.format(\"%s: %d\", \"Spain\", 7)",
  "compare-str": "\"hello\".compareTo(\"world\")",
  "str-concat": "\"hello\" + \" world\"",
  "str-replicate": "import java.util.Arrays;<br /><br />char[] a = new char[80];<br />Arrays.fill(a, '-');<br />String s = new String(a);",
  "translate-case": "\"hello\".toUpperCase()<br />\"HELLO\".toLowerCase()",
  "trim": "\" hello \".trim()",
  "pad": "",
  "num-to-str": "Integer.toString(14)<br />Long.toString(14)<br />Double.toString(14.7)",
  "str-to-num": "Byte.parseByte(\"14\")<br />Short.parseShort(\"14\")<br />Integer.parseInt(\"14\")<br />Long.parseLong(\"14\")<br />Float.parseFloat(\"14.7\")<br />Double.parseDouble(\"14.7\")",
  "join": "",
  "split": "\"Bob Ned Amy\".split(\" \")",
  "serialize": "",
  "str-length": "s.length()",
  "index-substr": "\"hello\".indexOf(\"ll\")",
  "extract-substr": "\"hello\".substring(2,4)",
  "char-type": "char<br />Character",
  "char-literal": "char n = 'X';",
  "test-char": ""
},
"regexes": {
  "regex-type": "",
  "char-class-abbrev": "",
  "regex-anchors": "",
  "regex-lookahead": "",
  "regex-test": "boolean isMatch = \"hello\".matches(\".*ll.*\");",
  "case-insensitive-regex": "",
  "regex-modifiers": "",
  "subst": "String s1 = \"hello\".replace(\"ll\",\"LL\");<br />String s2 = \"hello\".replaceAll(\"l\",\"L\");",
  "match-prematch-postmatch": "",
  "group-capture": ""
},
"dates-time": {
  "date-time-type": "java.util.Date",
  "current-date-time": "import java.util.Date;<br /><br />long millis = System.currentTimeMillis();<br />Date dt = new Date(millis);",
  "unix-epoch": "long epoch = dt.getTime() / 1000;<br /><br />Date dt2 = new Date(epoch * 1000);",
  "date-time-to-str": "dt.toString()",
  "format-date": "String s = \"yyyy-MM-dd HH:mm:ss\";<br />DateFormat fmt = new SimpleDateFormat(s);<br />String s2 = fmt.format(dt);",
  "parse-date": "String s = \"2011-05-03 17:00:00\";<br />Date dt2 = fmt.parse(s);",
  "date-subtraction": "<span style=\"color: gray\"><em>difference in milliseconds as a long:</em></span><br />dt2.getTime() - dt.getTime()",
  "add-duration": "long day_ms = 24 * 3600 * 1000;<br />Date dt = new Date(dt.getTime() + day_ms));",
  "date-parts": "import java.util.Date;<br />import java.util.Calendar;<br />import java.util.GregorianCalendar;<br /><br />Date dt = new Date();<br />GregorianCalendar cal = new GregorianCalendar();<br />cal.setTime(dt);<br /><br />cal.get(Calendar.YEAR)<br />cal.get(Calendar.MONTH) + 1<br />cal.get(Calendar.DAY_OF_MONTH)",
  "time-parts": "import java.util.Date;<br />import java.util.Calendar;<br />import java.util.GregorianCalendar;<br /><br />Date dt = new Date();<br />GregorianCalendar cal = new GregorianCalendar();<br />cal.setTime(dt);<br /><br />cal.get(Calendar.HOUR_OF_DAY)<br />cal.get(Calendar.MINUTE)<br />cal.get(Calendar.SECOND)",
  "build-datetime": "import java.util.GregorianCalendar;<br /><br />int yr = 2015, mo = 5, dy = 31;<br />int hr = 9, mi = 0, ss = 0;<br />GregorianCalendar cal =<br /><span style=\"white-space: pre-wrap;\">  </span>new GregorianCalendar(yr, mo - 1, dy, hr, mi, ss);<br />Date dt = cal.getTime();"
},
"fixed-length-arrays": {
  "fixed-len-array-stack": "<span style=\"color: gray\"><em>arrays must be allocated on heap</em></span>",
  "fixed-len-array-heap": "int[] a = new int[10];",
  "free-fixed-len-array-heap": "<span style=\"color: gray\"><em>garbage collected</em></span>",
  "fixed-len-array-init-list": "int[] a = {1,2,3};",
  "fixed-len-array-size": "a.length",
  "fixed-len-array-lookup": "a[0]",
  "fixed-len-array-update": "",
  "fixed-len-array-out-of-bounds": "ArrayIndexOutOfBoundsException",
  "copy-fixed-len-array": "",
  "fixed-len-array-as-func-arg": "",
  "iterate-over-fixed-len-array": "for (String name : names) {",
  "sort-fixed-len-array": ""
},
"resizable-arrays": {
  "decl-resizable-array": "java.util.Vector&lt;String&gt; vec = new java.util.Vector&lt;String&gt;();",
  "resizable-array-init-list": "",
  "resizable-array-size": "vec.size()",
  "resizable-array-capacity": "",
  "resizable-array-empty-test": "",
  "resizable-array-lookup": "vec.elementAt(0)",
  "resizable-array-update": "",
  "resizable-array-out-of-bounds": "<span style=\"color: gray\"><em>throws</em></span> ArrayIndexOutOfBoundsException",
  "resizable-array-elem-index": "",
  "slice-resizable-array": "",
  "slice-resizable-array-to-end": "",
  "resizable-array-back": "vec.add(\"hello\");<br /><span style=\"color: gray\"><em>or</em></span><br />vec.add(vec.size(), \"hello\");<br />vec.removeElementAt(vec.size()-1);",
  "resizable-array-front": "",
  "concat-resizable-array": "",
  "replicate-resizable-array-elem": "",
  "copy-resizable-array": "",
  "resizable-array-as-func-arg": "",
  "iterate-over-resizable-array": "for ( String s : vec ) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>do something with s</em></span><br />}",
  "indexed-array-iteration": "",
  "reverse-array": "",
  "sort-array": "",
  "dedupe-array": "",
  "membership": ""
},
"tuples": {
  "tuple-ctor": "",
  "tuple-lookup": "",
  "tuple-decompose": "",
  "tuple-update": "",
  "tuple-len": "",
  "pair-ctor": "",
  "pair-lookup": "",
  "pair-update": ""
},
"dictionaries": {
  "dict-ctor": "java.util.TreeMap&lt;String, Integer&gt; m = new java.util.TreeMap&lt;String, Integer&gt;();",
  "dict-lookup": "m.put(\"hello\", 5);<br />m.get(\"hello\")",
  "dict-size": "m.size()",
  "dict-delete": "m.remove(\"hello\");",
  "dict-missing-key": "null",
  "dict-iter": "for ( java.util.Map.Entry&lt;String, Integer&gt; e : m.entrySet() ) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>use e.getKey() or e.getValue()</em></span><br />}"
},
"functions": {
  "decl-func": "",
  "def-func": "",
  "call-func": "",
  "def-static-class-method": "",
  "invoke-static-class-method": "",
  "overload-func": "<span style=\"color: gray\"><em>yes</em></span>",
  "default-arg": "<span style=\"color: gray\"><em>use method overloading</em></span>",
  "variable-num-arg": "public static String concat(String first, String… rest) {<br /><span style=\"white-space: pre-wrap;\">  </span>StringBuilder sb = new StringBuilder(first);<br /><span style=\"white-space: pre-wrap;\">  </span>for (String arg: rest) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>sb.append(arg);<br /><span style=\"white-space: pre-wrap;\">  </span>}<br /><span style=\"white-space: pre-wrap;\">  </span>return sb.toString();<br />}<br />String s = Concat.concat(\"Hello\", \", \", \"World\", \"!\");",
  "named-param": "<span style=\"color: gray\"><em>none</em></span>",
  "pass-by-val": "<span style=\"color: gray\"><em>primitive types are always passed by value</em></span>",
  "pass-by-ref": "<span style=\"color: gray\"><em>objects and arrays are always passed by reference</em></span>",
  "pass-by-addr": "<span style=\"color: gray\"><em>none</em></span>",
  "retval": "",
  "no-retval": "",
  "recursive-func": "",
  "anon-func-literal": "",
  "invoke-anonymous-func": "",
  "closure": "",
  "func-private-state": "",
  "func-as-val": "",
  "overload-op": "<span style=\"color: gray\"><em>none</em></span>"
},
"execution-control": {
  "if": "if (i&gt;0) {<br /><span style=\"white-space: pre-wrap;\">  </span>signum = 1;<br />} else if (i==0) {<br /><span style=\"white-space: pre-wrap;\">  </span>signum = 0;<br />} else {<br /><span style=\"white-space: pre-wrap;\">  </span>signum = -1;<br />}",
  "dangling-else": "",
  "switch": "switch(i) {<br />case 0:<br /><span style=\"white-space: pre-wrap;\">  </span>0;<br /><span style=\"white-space: pre-wrap;\">  </span>break;<br />case 1:<br /><span style=\"white-space: pre-wrap;\">  </span>1;<br /><span style=\"white-space: pre-wrap;\">  </span>break;<br />default:<br /><span style=\"white-space: pre-wrap;\">  </span>-1;<br /><span style=\"white-space: pre-wrap;\">  </span>break;<br />}",
  "while": "int i = 0;<br />while (i&lt;10) {<br /><span style=\"color: gray\">…</span><br /><span style=\"white-space: pre-wrap;\">  </span>i++;<br />}",
  "for": "int n = 1;<br />for (int i=1; i&lt;=10; i++) {<br /><span style=\"white-space: pre-wrap;\">  </span>n *= i;<br />}",
  "break": "",
  "break-nested-loops": "",
  "continue": "",
  "goto": ""
},
"exceptions": {
  "base-exc": "<span style=\"color: gray\"><em>Any type which implements the interface</em> java.lang.Throwable <em>can be thrown.<br /><br />Exceptions thrown by the language and the standard libraries derive from</em> java.lang.Errror <em>or</em> java.lang.Exception.</span>",
  "predefined-exc": "<span style=\"color: gray\"><em>java.lang.Throwable</em></span><br /><span style=\"white-space: pre-wrap;\">  </span>java.lang.Error<br /><span style=\"white-space: pre-wrap;\">  </span>java.lang.Exception<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>java.lang.IOException<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>java.lang.RuntimeException<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>java.lang.ArithmeticException<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>java.lang.IllegalArgumentException<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>java.lang.IndexOutOfBoundsException<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>java.lang.NullPointerException",
  "raise-exc": "throw new Exception(\"failed\");",
  "handle-exc": "try {<br /><span style=\"white-space: pre-wrap;\">  </span>throw new Exception(\"failed\");<br />}<br />catch (Exception e) {<br /><span style=\"white-space: pre-wrap;\">  </span>System.out.println(e.getMessage());<br />}",
  "def-exc": "",
  "re-raise-exc": "",
  "catch-all-handler": "",
  "multiple-handlers": "",
  "uncaught-exc": "",
  "error-msg": "",
  "errno": "",
  "finally-clause": "try {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>risky code</em></span><br />} finally {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>perform cleanup</em></span><br />}",
  "exc-specification": "<span style=\"color: gray\"><em>yes</em></span>"
},
"concurrency": {
  "start-thread": "",
  "terminate-current-thread": "",
  "terminate-other-thread": "",
  "list-threads": "",
  "wait-on-thread": "",
  "lock": "",
  "create-msg-queue": "",
  "send-msg": "",
  "receive-msg": ""
},
"file-handles": {
  "std-file-handles": "System.in<br />System.out<br />System.err",
  "read-line-stdin": "",
  "printf": "System.out.printf(\"count: %d\", 7);",
  "read-from-file": "import java.io.BufferedReader;<br />import java.io.FileReader;<br /><br />BufferedReader in = new BufferedReader(new FileReader(\"/etc/passwd\"));<br />String line;<br /><br />while ((line = in.readLine()) != null) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> process line</span><br />}",
  "write-to-file": "import java.io.BufferedWriter;<br />import java.io.FileWriter;<br /><br />BufferedWriter fout = new BufferedWriter(new FileWriter(\"/tmp/test2\"));<br />int i;<br /><br />for (i = 0; i &lt; 10; i++) {<br /><span style=\"white-space: pre-wrap;\">  </span>fout.write(String.format(\"%d\", i));<br /><span style=\"white-space: pre-wrap;\">  </span>fout.newLine();<br />}<br />fout.close();"
},
"files": {
  "file-test": "import java.io.File;<br /><br />File f = new File(\"/etc/hosts\");<br />f.exists()<br />f.isFile()",
  "file-size": "import java.io.File;<br /><br />File f = new File(\"/etc/hosts\");<br />f.length()",
  "readable-writable-executable": "import java.io.File;<br /><br />File f = new File(\"/etc/hosts\");<br /><br />f.canRead()<br />f.canWrite()<br />f.canExecute()",
  "chmod": "import java.io.File;<br /><br />File f = new File(\"/tmp/foo\");<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> sets owner perms; to turn perms off<br /><span style=\"white-space: pre-wrap;\">//</span> set arg to false:</span><br />f.setReadable(true);<br />f.setWritable(true);<br />f.setExecutable(true);<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> if 2nd arg is false, perms are<br /><span style=\"white-space: pre-wrap;\">//</span> for owner, group, and other:</span><br />f.setReadable(true, false);<br />f.setWritable(true, false);<br />f.setExecutable(true, false);",
  "file-cp-rm-mv": "import java.io.File;<br /><br /><span style=\"color: gray\"><em>??</em></span><br /><br />File f2 = new File(\"/tmp/foo\");<br />f2.delete();<br /><br />File f3 = new File(\"/tmp/bar\");<br />f3.renameTo(new File(\"/tmp/bar\"));"
},
"file-fmt": {
  "csv": "",
  "json": "",
  "build-xml": "",
  "parse-xml": "",
  "parse-html": ""
},
"directories": {
  "build-pathname": "import java.io.File;<br /><br />File root = File.listRoots()[0];<br />File etc = new File(root, \"etc\");<br />File hosts = new File(etc, \"hosts\");<br />String path = hosts.getPath();",
  "dirname-basename": "import java.io.File;<br /><br />File f = new File(\"/etc/hosts\");<br />String dirname = f.getParent();<br />String basename = f.getName();",
  "absolute-pathname": "import java.io.File;<br /><br />File f = new File(\"foo\");<br />String abspath = f.getAbsolutePath();<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> getCanonicalPath() expands .. and .:</span><br />File f2 = new File(\"../foo\");<br />String abspath2 = f2.getCanonicalPath();<br />File f3 = new File(\"./foo\");<br />String abspath3 = f3.getCanonicalPath();",
  "iterate-dir": "import java.io.File;<br /><br />File dir = new File(\"/etc\");<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> iterate over names:</span><br />for (String name: dir.list()) {<br /><span style=\"white-space: pre-wrap;\">  </span>System.out.println(name);<br />}<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> iterate over file objects:</span><br />for (File f: dir.listFiles()) {<br /><span style=\"white-space: pre-wrap;\">  </span>System.out.println(f.getName());<br />}",
  "glob": "",
  "mkdir": "import java.io.File;<br /><br />File f = new File(\"/tmp/foo/bar\");<br />f.mkdirs();",
  "recursive-cp": "",
  "rmdir": "",
  "rm-rf": "",
  "dir-test": "import java.io.File;<br /><br />File f = new File(\"/tmp\");<br />f.isDirectory()",
  "unused-dir": "",
  "system-tmp-dir": ""
},
"processes-environment": {
  "signature-of-main": "public class <em>Foo</em> {<br /><span style=\"white-space: pre-wrap;\">  </span>public static void main(String[] args) {",
  "first-argument<br-/>": "<span style=\"color: gray\"><em>first command line argument</em></span>",
  "environment-variable": "String home = System.getenv(\"HOME\");",
  "iterate-through-environment-variables": "import java.util.Map;<br />Map&lt;String, String&gt; env = System.getenv();<br />for (String name : env.keySet()) {<br /><span style=\"white-space: pre-wrap;\">  </span>String value = env.get(name));<br />}"
},
"libraries-namespaces": {
  "std-lib-name": "<span style=\"color: gray\"><em>Java API</em></span>",
  "declare-namespace": "package foo.bar;<br />public class Baz {<br /><span style=\"white-space: pre-wrap;\">  </span>public static final int ANSWER = 42;<br />}",
  "multiple-namespaces-per-file": "<span style=\"color: gray\"><em>no</em></span>",
  "namespaces-map-to-directories": "<span style=\"color: gray\"><em>yes</em></span>",
  "import-namespace": "import foo.bar.*;<br />System.out.println(Baz.ANSWER);",
  "import-part-of-namespace": "<span style=\"color: gray\"><em>none</em></span>",
  "import-symbol": "import foo.bar.Baz;<br />System.out.println(Baz.ANSWER);",
  "import-static-symbol": "import static foo.bar.Baz.ANSWER;<br />System.out.println(ANSWER);",
  "import-position<br-/>": "<span style=\"color: gray\"><em>after package and before type definitions</em></span>",
  "using-a-symbol-that-hasn't-been-imported": "System.out.println(foo.bar.Baz.ANSWER);",
  "app-env": "",
  "multiple-installations": "<span style=\"color: gray\"><em>set</em> JAVA_HOME <em>environment variable to directory containing a</em> bin <em>subdirectory with</em> java, javac, <em>and other command line tools. Put</em> $JAVA_HOME/bin <em>at front of search path.</em></span>",
  "pkg-manager": ""
},
"user-defined-types": {
  "typedef": "<span style=\"color: gray\"><em>none</em></span>",
  "enum": "public enum DayOfWeek { MON, TUE, WED, THU, FRI, SAT, SUN };<br />DayOfWeek d = DayOfWeek.TUE;",
  "struct-definition": "public class MedalCount {<br /><span style=\"white-space: pre-wrap;\">  </span>public String country;<br /><span style=\"white-space: pre-wrap;\">  </span>public int gold;<br /><span style=\"white-space: pre-wrap;\">  </span>public int silver;<br /><span style=\"white-space: pre-wrap;\">  </span>public int bronze;<br />}",
  "struct-declaration": "MedalCount spain = new MedalCount();",
  "struct-initialization": "<span style=\"color: gray\"><em>no object literal syntax; define a constructor</em></span>",
  "struct-member-assignment": "spain.country = \"Spain\";<br />spain.gold = 3;<br />spain.silver = 7;<br />spain.bronze = 4;",
  "struct-member-access": "int spain_total = spain.gold + spain.silver + spain.bronze;"
},
"generic-types": {
  "define-generic-type": "public class Foo&lt;A&gt; {<br /><span style=\"white-space: pre-wrap;\">  </span>public A a;<br /><span style=\"white-space: pre-wrap;\">  </span>public Foo(A a) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>this.a = a;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "instantiate-generic-type": "Foo&lt;String&gt; f = new Foo&lt;String&gt;(\"foo\");",
  "generic-function": "",
  "generic-array": "<span style=\"color: gray\"><em>not permitted. Use</em> Object <em>as the element type for the array or use an</em> ArrayList.</span>",
  "value-parameter": "",
  "template-parameter": "",
  "template-specialization": "",
  "multiple-type-parameters": "",
  "generic-type-parameters": "",
  "template-parameters": "",
  "variadic-template": ""
},
"objects": {
  "str-equal": "<span style=\"color: gray\"><em>object identity comparison</em></span>",
  "define-class": "public class Rational {<br /><span style=\"white-space: pre-wrap;\">  </span>public int num;<br /><span style=\"white-space: pre-wrap;\">  </span>public int denom;<br /><span style=\"white-space: pre-wrap;\">  </span>public Rational add(Rational o) throws Exception {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>return new Rational(this.num*o.denom + o.num*this.denom,this.denom*o.denom);<br /><span style=\"white-space: pre-wrap;\">  </span>}<br /><span style=\"white-space: pre-wrap;\">  </span>public static Rational max(Rational a, Rational b) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>return (a.num*b.denom &gt; a.num*b.denom) ? a : b;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "class-definition-location": "<span style=\"color: gray\"><em>top level, class block, or function block for anonymous classes</em></span>",
  "constructor": "public Rational(int n, int d) throws Exception {<br /><span style=\"white-space: pre-wrap;\">  </span>if (d == 0) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>throw new Exception(\"zero denominator\");<br /><span style=\"white-space: pre-wrap;\">  </span>}<br /><span style=\"white-space: pre-wrap;\">  </span>if ( d &lt; 0 ) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>this.num = -1 * n;<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>this.denom = -1 * d;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br /><span style=\"white-space: pre-wrap;\">  </span>else {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>this.num = n;<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>this.denom = d;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "create-object": "Rational r = new Rational(7,3);",
  "destructor": "protected void finalize() throws Throwable {<br /><span style=\"white-space: pre-wrap;\">  </span>super.finalize();<br />}",
  "destroy-object<br-/>": "<span style=\"color: gray\"><em>none</em></span>",
  "define-method": "public int height() {<br /><span style=\"white-space: pre-wrap;\">  </span>return (Math.abs(this.num) &gt; this.denom) ? Math.abs(this.num) : this.denom;<br />}",
  "invoke-method": "r.height();",
  "define-class-method": "<span style=\"color: gray\"><em>declare static in class definition</em></span>",
  "invoke-class-method": "",
  "name-of-receiver": "this",
  "access-control": "<span style=\"color: gray\"><em>access keywords required for methods and members:</em></span><br />public class Foo {<br /><span style=\"white-space: pre-wrap;\">  </span>private int privateInt;<br /><span style=\"white-space: pre-wrap;\">  </span>protected int protectedInt;<br /><span style=\"white-space: pre-wrap;\">  </span>public int publicInt;<br />}",
  "anonymous-class": "(new Object() { public void hello() { System.out.println(\"hello!\"); } }).hello();"
},
"inheritance-polymorphism": {
  "dynamic-dispatch": "<span style=\"color: gray\"><em>dispatch dynamic by default</em></span>",
  "static-dispatch": "<span style=\"color: gray\"><em>declare as final, private, or static (i.e. make it a class method)</em></span>",
  "subclass": "public class RInteger extends Rational {<br /><span style=\"white-space: pre-wrap;\">  </span>public RInteger(int n) throws Throwable {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>super(n, 1);<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "invoking-superclass-constructor": "super(n, 1);",
  "mark-class-underivable-or-method-unoverrideable": "final",
  "root-class<br-/>": "java.lang.Object",
  "root-class-methods": "clone()<br />equals()<br />finalize()<br />getClass()<br />hashCode()<br />toString()"
},
"reflection": {
  "get-type-class-of-object": "o = new Object();<br />Class c = o.getClass();",
  "get-type-class-from-string": "Class c = Class.forName(\"java.io.File\");",
  "get-type-class-from-type-identifier": "",
  "class-name<br-/>": "String name = c.getName();",
  "get-methods": "import java.lang.reflect.*;<br />Method[] m = c.getMethods();",
  "has-method": "import java.lang.reflect.*;<br />Class c = Class.forName(\"java.io.File\");<br />Method[] a = c.getMethods();<br />boolean hasMethod = false;<br />for (int i=0; i &lt; a.length; i++) {<br /><span style=\"white-space: pre-wrap;\">  </span>if (a[i].getName() == \"toString\") {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>hasMethod = true;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "invoke-method-object": "import java.lang.reflect.*;<br />Class c = Class.forName(\"java.io.File\");<br />Method m = c.getMethod(\"toString\");<br />Object o = new Object();<br />m.invoke(o);"
},
"net-web": {
  "get-local-hostname,-dns-lookup,-reverse-dns-lookup": "",
  "http-get": "",
  "http-post": "",
  "absolute-url": "",
  "parse-url": "",
  "url-encode": "import java.net.URLEncoder;<br />import java.net.URLDecoder;<br /><br />String url = \"<span style=\"white-space: pre-wrap;\">http://www.google.com</span>\";<br />String s = URLEncoder.encode(url, \"utf8\");<br />String s2 = URLDecoder.decode(s, \"utf8\");",
  "base64-encode/decode": ""
},
"unit-tests": {
  "test-class": "",
  "run-all-tests": "",
  "assert-equal": "",
  "assert-approx": "",
  "assert-exc": "",
  "setup": "",
  "teardown": ""
},
"debugging-profiling": {
  "flag-for-stronger-warnings": "",
  "suppress-warnings": "",
  "treat-warnings-as-errors": "",
  "run-debugger": "",
  "debugger-cmds": "",
  "benchmark-code": "",
  "profile-code": "",
  "memory-tool": ""
}
}
