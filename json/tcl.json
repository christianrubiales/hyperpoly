{

"version": {
  "version-used": "<span style=\"color: gray\"><em>8.5</em></span>",
  "show-version": "$ tclsh<br />% info tclversion"
},
"grammar-execution": {
  "interpreter": "$ tclsh foo.tcl",
  "repl": "$ tclsh",
  "cmd-line-program": "<span style=\"color: gray\"><em>none</em></span>",
  "stmt-separator": "<span style=\"color: gray\"><em>newline or</em> ;</span><br /><br /><span style=\"color: gray\"><em>newline not a separator inside {}, \"\", [] or after backslash: \\</em></span>",
  "block-delimiters": "{} <span style=\"color: gray\"><em>or</em></span> \"\"",
  "local-scope-regions": "",
  "expr-stmt": "<span style=\"color: gray\"><em>no</em></span>",
  "eol-comment": "<span style=\"color: gray\"># comment</span>",
  "multiple-line-comment": "if (0) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>commented out</em></span><br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>can contain {} if balanced</em></span><br />}"
},
"var-expr": {
  "local-var": "<span style=\"color: gray\"># set variable inside procedure:</span><br />proc foo {<span style=\"color: gray\"><em>args</em></span>} {<br /><span style=\"white-space: pre-wrap;\">  </span>set x 1<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>…</em></span><br />}",
  "global-var": "<span style=\"color: gray\"># set variable outside procedure:</span><br />set g 1<br /><br />proc incr_global {} {<br /><span style=\"white-space: pre-wrap;\">  </span>global g<br /><span style=\"white-space: pre-wrap;\">  </span>incr g<br />}",
  "assignment": "set x 1",
  "parallel-assignment": "lassign {1 2 3} x y z<br /><br /><span style=\"color: gray\"># 3 is discarded:</span><br />lassign {1 2 3} x y<br /><br /><span style=\"color: gray\"># z is set to \"\":</span><br />lassign {1 2} x y z",
  "swap": "lassign \"$x $y\" y x",
  "compound-assignment": "",
  "incr-decr": "",
  "var-decl": "",
  "null": "\"\"",
  "null-test": "v eq \"\"",
  "undef-var": "<span style=\"color: gray\"><em>error</em></span>",
  "conditional-expr": "expr $x &gt; 0 ? $x : -$x"
},
"arithmetic-logic": {
  "true-false": "1 0",
  "falsehoods": "0 \"false\" \"no\"<br /><span style=\"color: gray\"><em>most strings cause error in boolean context; nonzero numbers are true</em></span>",
  "logical-op": "&amp;&amp; <span style=\"white-space: pre-wrap;\">||</span> !",
  "relational-expr": "if {$x &gt; 3} {…}<br /><span style=\"color: gray\"># outside of conditionals use expr:</span><br />expr $x &gt; 3",
  "relational-op": "== != &gt; &lt; &gt;= &lt;=<br /><br /><span style=\"color: gray\"># string comparison:</span><br />eq ne",
  "min-max": "expr min(1, 2, 3)<br />expr max(1, 2, 3)",
  "arith-expr": "expr 1 + 3<br /><span style=\"color: gray\"># expr not needed in conditionals:</span><br />if {1 + 3} {<span style=\"color: gray\"><em>…</em></span>}",
  "arith-op": "+ - * <span style=\"color: gray\"><em>none</em></span> / %",
  "int-dvi": "expr $x / $y",
  "int-div-zero": "<span style=\"color: gray\"><em>error</em></span>",
  "float-div": "expr $x * 1.0 / $y",
  "float-div-zero": "<span style=\"color: gray\"><em>returns assignable value</em> Inf <em>if dividend is positive and</em> -Inf <em>if negative. Raises error if dividend is zero.<br /><br />There is a literal for</em> Inf.</span>",
  "power": "expr 2 <span style=\"white-space: pre-wrap;\">**</span> 32<br />expr pow(2, 32)",
  "sqrt": "<span style=\"color: purple\">expr</span> sqrt(2)",
  "sqrt--1<br-/>": "<span style=\"color: gray\"><em>error</em></span>",
  "transcendental-functions": "exp log sin cos tan asin acos atan atan2<br /><br /><span style=\"color: gray\"># how to use math functions:</span><br />expr exp(2)<br />expr atan2(1, 1)<br />::tcl::mathfunc::exp 2<br />::tcl::mathfunc::atan2 1 1",
  "transcendental-const": "expr 4 * atan(1)<br />expr exp(1)",
  "float-truncation<br-/>": "expr int(3.1)<br />expr round(3.1)<br />expr floor(3.1)<br />expr ceil(3.1)",
  "abs-val": "expr abs(-7)",
  "integer-overflow<br-/>": "<span style=\"color: gray\"><em>arbitrary length integers since 8.5</em></span>",
  "float-overflow<br-/>": "<span style=\"color: gray\"><em>error</em></span>",
  "random-integer,-uniform-float": "expr int(rand() * 100)<br />expr rand()<br />none",
  "seed-random-numbers<br-/>": "expr srand(17)",
  "bit-operators<br-/>": "<span style=\"white-space: pre-wrap;\">&lt;&lt; &gt;&gt; &amp; | ^ ~</span>",
  "binary-octal-hex-literals": "",
  "radix": ""
},
"str": {
  "str-type": "",
  "str-literal": "\"don't say \\\"no\\\"\"<br />{don't say \"no\"}",
  "new-line-in-str-literal": "<span style=\"color: gray\"><em>yes</em></span>",
  "str-literal-esc": "<span style=\"color: gray\"><em>in double quotes:</em></span><br />\\a \\b \\f \\n \\r \\t \\v \\\\ \\\" \\oooo \\uhhhh \\xhh",
  "var-interpolation": "set count 3<br />set item \"ball\"<br />\"$count ${item}s\"",
  "str-concat": "set s1 \"Hello, \"<br />set s2 \"World!\"<br />set s $s1$s2",
  "str-replicate": "set hbar [string repeat \"-\" 80]",
  "str-join": "join [list \"do\" \"re\" \"mi\"] \" \"",
  "split": "split \"do re mi\"",
  "fmt-str": "set fmt \"lorem %s %d %.2f\"<br />format $fmt \"ipsum\" 13 3.7",
  "translate-case": "string toupper \"lorem\"<br />string tolower \"LOREM\"",
  "trim": "string trim \" lorem \"<br />string trimleft \" lorem\"<br />string trimright \"lorem \"",
  "pad": "format \"%10s\" \"lorem\"<br />format \"%-10s\" \"lorem\"",
  "str-to-num": "<span style=\"color: gray\"># use expr to interpret as numbers:</span><br />set x \"12\"<br />expr 7 + $x<br />set y \".037\"<br />expr 73.9 + $y",
  "num-to-str": "<span style=\"color: gray\"><em>all values are strings</em></span>",
  "prefix-suffix-test": "",
  "str-len": "string length \"lorem\"",
  "index-substr": "string first \"ipsum\" \"lorem ipsum\"",
  "extract-substr": "string range \"lorem ipsum\" 6 10",
  "char-literal": "",
  "lookup-char": "",
  "chr-ord": "format %c 65<br />scan A %c ascii_value",
  "str-to-char-array": "split \"abcd\" \"\""
},
"regex": {
  "regex-match": "if [regexp <span style=\"white-space: pre-wrap;\">--</span> {1999} $s] {<br /><span style=\"white-space: pre-wrap;\">  </span>puts \"party!\"<br />}",
  "regex-literal": "",
  "char-class-abbrev": "<span style=\"color: gray\"><em>char class abbrevs:</em></span><br />. \\d \\D \\s \\S \\w \\W<br /><br /><span style=\"color: gray\"><em>anchors:</em></span> ^ $ \\A \\m \\M \\y \\Y \\Z",
  "regex-anchors": "",
  "case-insensitive-regex": "regexp -nocase <span style=\"white-space: pre-wrap;\">--</span> {lorem} \"Lorem\"",
  "regex-modifiers": "-all -expanded -indices -inline<br />-line -lineanchor -linestop -nocase",
  "subst": "set s \"do re mi mi mi\"<br />regsub -all <span style=\"white-space: pre-wrap;\">--</span> \"mi\" $s \"ma\"",
  "match-prematch-postmatch": "",
  "group-capture": "set s \"2009-06-03\"<br />set rx {^(\\d{4})-(\\d{2})-(\\d{2})$}<br />regexp <span style=\"white-space: pre-wrap;\">--</span> $rx $s - yr mo dy",
  "named-grouped-capture": "",
  "scan": "",
  "backreference": "regexp <span style=\"white-space: pre-wrap;\">--</span> {(\\w+) \\1} \"do do\"<br /><br />set rx {(\\w+) (\\w+)}<br />regsub -all <span style=\"white-space: pre-wrap;\">--</span> $rx \"do re\" {\\2 \\1}"
},
"dates-time": {
  "broken-down-datetime-type": "",
  "current-datetime": "set t [clock seconds]",
  "unix-epoch": "t<br />set t2 1315716177",
  "current-unix-epoch": "",
  "strftime": "set fmt \"%Y-%m-%d %H:%M:%S\"<br />clock format $t -format $fmt",
  "strptime": "<span style=\"color: gray\"><em>none</em></span>",
  "parse-date": "set t [clock scan \"July 7, 1999\"]",
  "get-date-parts": "clock format $t -format \"%Y\"<br />clock format $t -format \"%m\"<br />clock format $t -format \"%d\"",
  "get-time-parts": "clock format $t -format \"%H\"<br />clock format $t -format \"%M\"<br />clock format $t -format \"%S\"",
  "date-from-parts": "<span style=\"color: gray\"><em>none</em></span>",
  "date-subtraction": "",
  "add-time-duration": "",
  "local-tmz": "",
  "tmz-offset": "",
  "microseconds": "",
  "sleep": "after 500",
  "timeout": ""
},
"arrays": {
  "resizable-array-literal": "set a [list 1 2 3 4]<br />set a {1 2 3 4}",
  "resizable-array-size": "llength $a",
  "empty-test": "",
  "resizable-array-lookup": "lindex $a 0",
  "resizable-array-update": "<span style=\"color: gray\"># provide start and end index:<br /># of elements to replace:</span><br />set a [lreplace $a 1 1 \"lorem\"]",
  "out-of-bounds-behavior": "<span style=\"color: gray\"><em>returns</em> \"\"</span>",
  "index-of-element<br-/>": "lsearch {6 7 7 8} 7<br />lindex [lsearch -all {6 7 7 8} 7] end<br /><span style=\"color: gray\"># returns -1 if not found</span>",
  "slice": "lrange $a 1 2",
  "slice-to-end": "lrange {\"a\" \"b\" \"c\" \"d\"} 1 end",
  "concatenation": "set a [concat {1 2 3} {4 5 6}]",
  "copy": "",
  "manipulate-back-of-array": "set a {6 7 8}<br />lappend a 9<br />set i [lindex $a end]<br />set a [lreplace $a end end]",
  "manipulate-front-of-array": "set a {6 7 8}<br />set a [concat {5} $a]<br />set a [lassign $a i]",
  "array-iteration": "foreach i $a { puts $i }",
  "reverse": "set a {1 2 3}<br />set a [lreverse $a]",
  "sort": "set a {3 1 4 2}<br />set a [lsort $a]",
  "dedupe": "lsort -unique {1 2 2 3}",
  "membership<br-/>": "expr {7 in $a}<br />expr {7 ni $a}",
  "intersection": "package require struct::set<br /><br />::struct::set intersect {1 2} {2 3}",
  "union": "package require struct::set<br /><br />::struct::set union {1 2} {2 3 4}",
  "relative-complement": "package require struct::set<br /><br />::struct::set difference {1 2 3} {2}",
  "map<br-/>": "package require struct::list<br /><br />proc sqr {x} {return [expr $x * $x]}<br />::struct::list map {1 2 3} sqr",
  "filter<br-/>": "package require struct::list<br /><br />proc gt1 {x} {return [expr $x &gt; 1]}<br />::struct::list filter {1 2 3} gt1",
  "reduce<br-/>": "package require struct::list<br /><br />::struct::list fold {1 2 3} 0<br />::tcl::mathop::+",
  "universal-test<br-/>": "",
  "existential-test<br-/>": ""
},
"dict": {
  "dict-ctorl": "set d [dict create t 1 f 0]",
  "dict-size": "dict size $d",
  "dict-lookup": "dict get $d t",
  "dict-update": "dict set d t 2",
  "dict-missing-key": "error",
  "dict-is-key-present": "dict exists $d t",
  "dict-delete": "dict unset d t",
  "dict-iter": "foreach {k v} $d {<br /><span style=\"white-space: pre-wrap;\">  </span>code<br />}",
  "dict-key-val-arrays": ""
},
"func": {
  "def-func": "proc add { x y } {<br /><span style=\"white-space: pre-wrap;\">  </span>expr $x + $y<br />}",
  "call-func": "<span style=\"color: gray\"># statement position:</span><br />add 1 2<br /><br /><span style=\"color: gray\"># argument position:</span><br />set a [ add 1 2 ]",
  "missing-arg": "<span style=\"color: gray\"><em>error</em></span>",
  "extra-arg": "<span style=\"color: gray\"><em>error</em></span>",
  "default-arg": "proc log {x {base 10 }} { <span style=\"color: gray\"><em>…</em></span> }",
  "named-parameters": "",
  "variadic-func": "<span style=\"color: gray\"><em>last arg contains list of remaining values</em></span>|f(args*) {<br /><span style=\"white-space: pre-wrap;\">  </span>return args.maxindex()<br />}",
  "pass-by-ref": "",
  "return-value": "return <span style=\"color: gray\"><em>arg or empty string</em></span>",
  "nested-func": "<span style=\"color: gray\"><em>defined when containing function executes; visible outside containing function</em></span>",
  "anon-func-literal": "set sqr <span style=\"white-space: pre-wrap;\">{{x}</span> {return [expr $x*$x]<span style=\"white-space: pre-wrap;\">}}</span>",
  "call-anon-func": "apply $sqr 2",
  "private-state-func": "",
  "closure": ""
},
"exec-control": {
  "if": "if { 0 == $n } {<br /><span style=\"white-space: pre-wrap;\">  </span>puts \"no hits\"<br />} elseif { 1 == $n } {<br /><span style=\"white-space: pre-wrap;\">  </span>puts \"1 hit\"<br />} else {<br /><span style=\"white-space: pre-wrap;\">  </span>puts \"$n hits\"<br />}",
  "switch": "",
  "while": "while { $i &lt; 100 } {<br /><span style=\"white-space: pre-wrap;\">  </span>incr i<br />}",
  "break-continue": "break continue",
  "for": "for {set i 0} {$i &lt; 10} {incr i} {<br /><span style=\"white-space: pre-wrap;\">  </span>puts $i<br />}"
},
"exceptions": {
  "base-exc": "",
  "predefined-exc": "",
  "raise-exception": "error \"bad arg\"",
  "catch-all-handler": "",
  "uncaught-exception-behavior": "<span style=\"color: gray\"><em>stderr and exit</em></span>",
  "re-raise-exc": "",
  "last-exc-global": "",
  "def-exc": "",
  "handle-exc": "catch risky retval<br />if { retval != 0 } {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>puts \"risky failed\"<br />}",
  "finally-block": ""
},
"streams": {
  "standard-file-handles": "stdin<br />stdout<br />stderr",
  "read-stdin": "gets stdin line",
  "end-of-file-behavior": "",
  "chomp": "string trimright $line \"\\r\\n\"",
  "print-to-stdout": "puts \"Hello, World!\"",
  "write-formatted-string-to-stdout": "",
  "open-file": "set f [open \"/tmp/foo\"]",
  "open-file-write": "set f [open \"/tmp/foo\" \"w\"]",
  "set-file-handle-encoding": "",
  "open-file-for-appending": "",
  "close-file": "close $f",
  "close-file-implicitly": "",
  "i/o-error": "",
  "encoding-error": "",
  "read-line": "gets $f",
  "file-iter": "while { [gets $f s] &gt;= 0 } {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>use s</em></span><br />}",
  "read-file-into-array-of-strings": "",
  "read-file-into-string": "set s [ read $f]",
  "write-file": "puts -nonewline $f \"lorem ipsum\"",
  "write-line": "",
  "flush-file": "flush $f",
  "end-of-file-test": "",
  "get-and-set-file-handle-position": "",
  "open-temporary-file": "",
  "in-memory-file": ""
},
"file": {
  "file-test": "file exists \"/etc/hosts\"<br />file isfile \"/etc/hosts\"",
  "file-size": "",
  "readable-writable-executable": "",
  "chmod": "set s \"/tmp/foo\"<br />file attributes $s -permissions 0755",
  "last-modification-time": "",
  "file-cp-rm-mv": "file copy \"/tmp/foo\" \"/tmp/bar\"<br />file delete \"/tmp/foo\"<br />file rename \"/tmp/bar\" \"/tmp/foo\"",
  "create-symlink,-symlink-test,-readlink": "",
  "tmpfile": "set tmp [::fileutil::tempfile foo]<br />set f [open $tmp \"w\"]<br />puts $f \"lorem ipsum\"<br />close $f<br />puts \"tmp file: $tmp\""
},
"file-fmt": {
  "parse-json": "",
  "generate-json": ""
},
"dir": {
  "working-directory<br-/>": "",
  "build-pathname": "file join \"/etc\" \"hosts\"",
  "dirname-basename": "file dirname \"/etc/hosts\"<br />file tail \"/etc/hosts\"",
  "absolute-pathname": "",
  "dir-iter": "",
  "glob-paths": "",
  "mkdir": "file mkdir \"/tmp/foo/bar\"",
  "recursive-copy": "",
  "rmdir": "file delete \"/tmp/foodir\"",
  "rm-rf": "file delete -force \"/tmp/foodir\"",
  "dir-test": "file isdirectory \"/tmp\"",
  "generate-unused-directory": "",
  "system-temporary-file-directory": ""
},
"processes-environment": {
  "cmd-line-arg": "[lindex $argv 0]<br />[lindex $argv 1]<br /><span style=\"color: gray\"><em>…</em></span>",
  "env-var": "$env(HOME)",
  "pid": "",
  "exit": "exit 0",
  "external-cmd": "exec ls",
  "cmd-subst": "set f [ open |ls ]<br />read f"
},
"lib-namespaces": {
  "load-lib": "source foo.tcl<br />add 3 7",
  "load-library-in-subdirectory": "",
  "hot-patch": "",
  "load-error": "",
  "main-routine-in-library": "",
  "lib-path": "<span style=\"color: gray\"><em>none</em></span>",
  "lib-path-env": "TCLLIBPATH",
  "library-path-command-line-option": "",
  "simple-global-identifiers": "",
  "multiple-label-identifiers": "",
  "label-separator": "::",
  "namespace-decl": "namespace",
  "child-namespace-declaration": "",
  "unqualified-import-of-namespace": "",
  "unqualified-import-of-definitions": "",
  "pkg-management": ""
},
"objects": {
  "def-class": "",
  "create-obj": "",
  "instance-var": "",
  "getter-setter": "",
  "def-method": "",
  "invoke-method": ""
},
"inheritance-polymorphism": {
  "inheritance": "",
  "mixin": "",
  "op-overload": ""
},
"reflection": {
  "object-id": "",
  "inspect-type": "",
  "types": "",
  "inspect-class": "",
  "inspect-class-hierarchy": "",
  "has-method": "",
  "msg-passing": "",
  "eval": "",
  "list-obj-methods": "",
  "list-obj-attr": "",
  "list-loaded-lib": "",
  "list-loaded-namespaces": "",
  "inspect-namespace": "",
  "pretty-print": "",
  "src-line-file": "",
  "cmd-line-doc": ""
},
"gui": {
  "pop-up-box": "package require Tk<br /><br />wm title .<br />grid [ttk::frame .f -padding \"10 10 10 10\"]<br />grid [ttk::label .f.t -text \"hi world\"]",
  "button": "",
  "text-entry": "",
  "frame": "",
  "label": "",
  "image": ""
},
"net-web": {
  "hostname-ip": "",
  "http-get": "",
  "http-post": "",
  "serve-pwd": "",
  "absolute-url": "",
  "parse-url": "",
  "url-encode": "",
  "html-escape": "",
  "base64": ""
}
}
