{

"version": {
  "version-used": "<span style=\"color: gray\"><em>ECMAScript 5</em></span>",
  "show-version": "<a href=\"http://kangax.github.io/compat-table/es5/\">ECMAScript 5 compatibility</a>"
},
"grammar-invocation": {
  "interpreter": "",
  "repl": "<span style=\"color: gray\"><em>Javascript Console:</em><br /><br /><span style=\"white-space: pre-wrap;\">  </span>Chrome (Mac): ⌥⌘J<br /><span style=\"white-space: pre-wrap;\">  </span>Chrome (Win): Ctrl+Shift+J<br /><span style=\"white-space: pre-wrap;\">  </span>Firefox (Mac): ⌥⌘K<br /><span style=\"white-space: pre-wrap;\">  </span>Firefox (Win): Ctrl+Shift+K</span>",
  "cmd-line-program": "",
  "stmt-separator": "<span style=\"color: gray\"><em>; or newline<br /><br />newline not separator inside (), [], {}, \"\", '', or after binary operator<br /><br />newline sometimes not separator when following line would not parse as a valid statement</em></span>",
  "block-delimiters": "{}",
  "local-scope-regions": "<span style=\"color: gray\"><em>top level:<br /><span style=\"white-space: pre-wrap;\">  </span>html page<br /><br />nestable:<br /><span style=\"white-space: pre-wrap;\">  </span>function</em></span>",
  "expr-stmt": "",
  "eol-comment": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> comment</span>",
  "multiple-line-comment": "<span style=\"color: gray\">/* line<br />another line */</span>"
},
"var-expr": {
  "local-var": "var x = 1;<br /><br />var y = 2, z = 3;",
  "global-var": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> assign without using var</span><br />g = 1;<br /><br />function incr_global () { g++; }",
  "assignment": "x = 1;",
  "parallel-assignment": "<span style=\"color: gray\"><em>none</em></span>",
  "swap": "tmp = x;<br />x = y;<br />y = tmp;",
  "compound-assignment": "+= -= *= /= <span style=\"color: gray\"><em>none</em></span> %=<br />+=<br /><span style=\"color: gray\"><em>none</em></span><br /><span style=\"white-space: pre-wrap;\">&lt;&lt;= &gt;&gt;= </span>&amp;= |= ^=",
  "incr-decr": "var x = 1;<br />var y = ++x;<br />var z = <span style=\"white-space: pre-wrap;\">--</span>y;",
  "var-decl": "",
  "null": "null",
  "null-test": "v === null",
  "undef-var": "undefined",
  "conditional-expr": "x &gt; 0 ? x : -x"
},
"arithmetic-logic": {
  "true-false": "true false",
  "falsehoods": "false null undefined \"\" 0 NaN",
  "logical-op": "<span style=\"white-space: pre-wrap;\">&amp;&amp; ||</span> !",
  "relational-expr": "",
  "relational-op": "<span style=\"white-space: pre-wrap;\">===</span> !== &lt; &gt; &gt;= &lt;=<br /><br /><span style=\"color: gray\"><em>perform type coercion:</em></span><br /><span style=\"white-space: pre-wrap;\">==</span> !=",
  "min-max": "Math.min(1, 2, 3)<br />Math.max(1, 2, 3)<br /><br />Math.min.apply(Math, [1, 2, 3])<br />Math.max.apply(Math, [1, 2, 3])",
  "arith-expr": "",
  "arith-op": "+ - * / <span style=\"color: gray\"><em>none</em></span> %",
  "int-dvi": "Math.floor(x / y)",
  "int-div-zero": "<span style=\"color: gray\"><em>returns assignable value Infinity, NaN, or -Infinity depending upon whether dividend is positive, zero, or negative.<br /><br />There are literals for Infinity and NaN.</em></span>",
  "float-div": "13 / 5",
  "float-div-zero": "<span style=\"color: gray\"><em>same behavior as for integers</em></span>",
  "power": "Math.pow(2, 32)",
  "sqrt": "Math.sqrt(2)",
  "sqrt--1<br-/>": "NaN",
  "transcendental-functions": "Math.exp Math.log Math.sin Math.cos Math.tan Math.asin Math.acos Math.atan Math.atan2",
  "transcendental-const": "Math.PI<br />Math.E",
  "float-truncation<br-/>": "<span style=\"color: gray\"><em>none</em></span><br />Math.round(3.1)<br />Math.floor(3.1)<br />Math.ceil(3.1)",
  "abs-val": "Math.abs(-3)",
  "integer-overflow<br-/>": "<span style=\"color: gray\"><em>all numbers are floats</em></span>",
  "float-overflow<br-/>": "Infinity",
  "random-integer,-uniform-float": "Math.floor(Math.random() * 100)<br />Math.random()",
  "seed-random-numbers<br-/>": "<span style=\"color: gray\"><em>none</em></span>",
  "bit-operators<br-/>": "<span style=\"white-space: pre-wrap;\">&lt;&lt; &gt;&gt; &amp; | ^ ~</span>",
  "binary-octal-hex-literals": "<span style=\"color: gray\"><em>none</em></span><br />052 <span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> deprecated</span><br />0x2a",
  "radix": "(42).toString(7)<br /><span style=\"color: gray\"><em>??</em></span>"
},
"strings": {
  "str-type": "String",
  "str-literal": "\"don't say \\\"no\\\"\"<br />'don\\'t say \"no\"'",
  "new-line-in-str-literal": "<span style=\"color: gray\"><em>yes</em></span>",
  "str-literal-esc": "<span style=\"color: gray\"><em>single and double quotes:</em></span><br />\\b \\f \\n \\r \\t \\v \\uhhhh \\xhh \\\" \\' \\\\",
  "var-interpolation": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> None; use string concatenation.<br /><span style=\"white-space: pre-wrap;\">//</span> Both of these expressions are '11':</span><br />1 + \"1\"<br />\"1\" + 1",
  "str-concat": "s = \"Hello, \" + \"World!\";",
  "str-replicate": "var hbar = Array(80).join(\"-\");",
  "str-join": "[\"do\", \"re\", \"mi\"].join(\" \")",
  "split": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> [ \"do\", \"re\", \"\", \"mi\", \"\" ]:</span><br />\"do re<span style=\"white-space: pre-wrap;\">  </span>mi \".split(\" \")<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> [ \"do\", \"re\", \"mi\", \"\" ]:</span><br />\"do re<span style=\"white-space: pre-wrap;\">  </span>mi \".split(/\\s+/)",
  "fmt-str": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> None; use string concatenation.<br /><span style=\"white-space: pre-wrap;\">//</span> Evaluates to \"12.35\":</span><br />12.3456.toFixed(2)",
  "translate-case": "\"lorem\".toUpperCase()<br />\"LOREM\".toLowerCase()",
  "trim": "\" lorem \".trim()<br /><span style=\"color: gray\"># some browsers:</span><br />\" lorem\".trimLeft()<br />\"lorem \".trimRight()",
  "pad": "<span style=\"color: gray\"><em>none</em></span>",
  "str-to-num": "7 + parseInt(\"12\", 10)<br />73.9 + parseFloat(\".037\")<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> 12:</span><br />parseInt(\"12A\")<br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> NaN:</span><br />parseInt(\"A\")",
  "num-to-str": "\"value: \" + 8",
  "prefix-suffix-test": "\"foobar\".startsWith(\"foo\")<br />\"foobar\".endsWith(\"bar\")",
  "str-len": "\"lorem\".length",
  "index-substr": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> returns -1 if not found:</span><br />\"lorem ipsum\".indexOf(\"ipsum\")",
  "extract-substr": "\"lorem ipsum\".substr(6, 5)<br />\"lorem ipsum\".substring(6, 11)",
  "char-literal": "",
  "lookup-char": "\"lorem ipsum\"[6]",
  "chr-ord": "String.fromCharCode(65)<br />\"A\".charCodeAt(0)",
  "str-to-char-array": "\"abcd\".split(\"\")"
},
"regexes": {
  "regex-match": "if (s.match(/1999/)) {<br /><span style=\"white-space: pre-wrap;\">  </span>alert(\"party!\");<br />}",
  "regex-literal": "/lorem|ipsum/",
  "char-class-abbrev": ". \\d \\D \\s \\S \\w \\W",
  "regex-anchors": "^ $ \\b \\B",
  "case-insensitive-regex": "\"Lorem\".match(/lorem/i)",
  "regex-modifiers": "g i m",
  "subst": "s = \"do re mi mi mi\";<br />s.replace(/mi/g, \"ma\");",
  "match-prematch-postmatch": "<span style=\"color: per\">m</span> = /\\d{4}/.exec(s);<br />if (m) {<br /><span style=\"white-space: pre-wrap;\">  </span>match = m[0];<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"># no prematch or postmatch</span><br />}",
  "group-capture": "rx = /^(\\d{4})-(\\d{2})-(\\d{2})$/;<br />m = rx.exec('2009-06-03');<br />yr = m[1];<br />mo = m[2];<br />dy = m[3];",
  "named-grouped-capture": "",
  "scan": "var a = \"dolor sit amet\".match(/\\w+/g);",
  "backreference": "/(\\w+) \\1/.exec(\"do do\")<br /><br />\"do re\".replace(/(\\w+) (\\w+)/, '$2 $1')"
},
"dates-time": {
  "broken-down-datetime-type": "Date",
  "current-datetime": "var t = new Date();",
  "unix-epoch": "Math.round(t.getTime() / 1000)<br /><br />var epoch = 1315716177;<br />var t2 = new Date(epoch * 1000);",
  "current-unix-epoch": "(<span style=\"color: purple\">new</span> <span style=\"color: green\">Date</span>()).getTime() / 1000",
  "strftime": "",
  "strptime": "",
  "parse-date": "var t = new Date(\"July 7, 1999\");",
  "get-date-parts": "t.getFullYear()<br />t.getMonth() + 1<br />t.getDate() <span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> getDay() is day of week</span>",
  "get-time-parts": "t.getHours()<br />t.getMinutes()<br />t.getSeconds()",
  "date-from-parts": "var yr = 1999;<br />var mo = 9;<br />var dy = 10;<br />var hr = 23;<br />var mi = 30;<br />var ss = 0;<br />var t = new Date(yr, mo - 1, dy, hr, mi, ss);",
  "date-subtraction": "<span style=\"color: gray\"><em>number containing time difference in milliseconds</em></span>",
  "add-time-duration": "var t1 = new Date();<br />var delta = (10 * 60 + 3) * 1000;<br />var t2 = new Date(t1.getTime() + delta);",
  "local-tmz": "",
  "tmz-offset": "",
  "microseconds": "",
  "sleep": "<span style=\"color: gray\"><em>none</em></span>",
  "timeout": ""
},
"arrays": {
  "resizable-array-literal": "a = [1, 2, 3, 4]",
  "resizable-array-size": "a.length",
  "empty-test": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> TypeError if a is null or undefined:</span><br />a.length === 0",
  "resizable-array-lookup": "a[0]",
  "resizable-array-update": "a[0] = \"lorem\"",
  "out-of-bounds-behavior": "<span style=\"color: gray\"><em>returns</em> undefined</span>",
  "index-of-element<br-/>": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> returns -1 if not found:</span><br />[6, 7, 7, 8].indexOf(7)<br />[6, 7, 7, 8].lastIndexOf(7)",
  "slice": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> select 3rd and 4th elements:</span><br />[\"a\", \"b\", \"c\", \"d\"].slice(2, 4)",
  "slice-to-end": "[\"a\", \"b\", \"c\", \"d\"].slice(1)",
  "concatenation": "a = [1, 2, 3].concat([4, 5, 6]);",
  "copy": "a = [1, 2, [3, 4]];<br />a2 = a;<br />a3 = a.slice(0);<br />a4 = JSON.parse(JSON.stringify(a));",
  "manipulate-back-of-array": "a = [6, 7, 8];<br />a.push(9);<br />i = a.pop();",
  "manipulate-front-of-array": "a = [6, 7, 8];<br />a.unshift(5);<br />i = a.shift();",
  "array-iteration": "[1, 2, 3].forEach(function(n) {<br /><span style=\"white-space: pre-wrap;\">  </span>alert(n);<br />});",
  "reverse": "var a = [1, 2, 3];<br />a.reverse();",
  "sort": "var a = [3, 1, 4, 2];<br />a.sort();",
  "dedupe": "",
  "membership<br-/>": "",
  "intersection": "",
  "union": "",
  "relative-complement": "",
  "map<br-/>": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> callback gets 3 args:<br /><span style=\"white-space: pre-wrap;\">//</span> value, index, array</span><br />a.map(function(x) { return x * x })",
  "filter<br-/>": "a.filter(function(x) { return x &gt; 1 })",
  "reduce<br-/>": "a.reduce(function(m, o) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>return m + o;<br /><span style=\"white-space: pre-wrap;\">  </span>}, 0)",
  "universal-test<br-/>": "",
  "existential-test<br-/>": "var a = [1, 2, 3, 4];<br />var even = function(x) {<br /><span style=\"white-space: pre-wrap;\">  </span>return x % 2 == 0;<br />};<br /><br />a.every(even)<br />a.some(even)"
},
"dictionaries": {
  "dict-ctorl": "d = {\"t\": 1, \"f\": 0};<br /><span style=\"color: gray\">// keys do not need to be quoted if they<br />// are a legal JavaScript variable name<br /><em>and not a reserved word</em></span>",
  "dict-size": "var size = 0;<br />for (var k in d) {<br /><span style=\"white-space: pre-wrap;\">  </span>if (d.hasOwnProperty(k)) size++;<br />}",
  "dict-lookup": "d.t<br />d[\"t\"]",
  "dict-update": "d[\"t\"] = 2;<br />d.t = 2;",
  "dict-missing-key": "var d = {};<br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> sets s to undefined:</span><br />var s = d[\"lorem\"];<br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> adds key/value pair:</span><br />d[\"lorem\"] = \"ipsum\";",
  "dict-is-key-present": "d.hasOwnProperty(\"t\");",
  "dict-delete": "delete d[\"t\"];<br />delete d.t;",
  "dict-iter": "for (var k in d) {<br /><span style=\"white-space: pre-wrap;\">  </span>use k or d[k]<br />}",
  "dict-key-val-arrays": ""
},
"functions": {
  "def-func": "function add(x, y) {<br /><span style=\"white-space: pre-wrap;\">  </span>return x+y;<br />}",
  "call-func": "add(1, 2)",
  "missing-arg": "set to// undefined",
  "extra-arg": "<span style=\"color: gray\"><em>ignored</em></span>",
  "default-arg": "<span style=\"color: gray\"><em>none</em></span>",
  "named-parameters": "",
  "variadic-func": "<span style=\"color: gray\"><em>args in</em></span> arguments[0], arguments[1], <span style=\"color: gray\"><em>… with number of args in</em></span> arguments.length",
  "pass-by-ref": "",
  "return-value": "<span style=\"color: gray\">Return <em>arg or</em> undefined. <em>If invoked with</em> new <em>and</em> return <em>value not an object, returns</em> this.</span>",
  "nested-func": "",
  "anon-func-literal": "var sqr = function(x) { return x*x; }",
  "call-anon-func": "sqr(2)",
  "private-state-func": "function counter() {<br /><span style=\"white-space: pre-wrap;\">  </span>counter.i += 1;<br /><span style=\"white-space: pre-wrap;\">  </span>return counter.i;<br />}<br /><br />counter.i = 0;<br />alert(counter());",
  "closure": "function make_counter() {<br /><span style=\"white-space: pre-wrap;\">  </span>var i = 0;<br /><br /><span style=\"white-space: pre-wrap;\">  </span>return function() {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>i += 1;<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>return i;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}"
},
"execution-control": {
  "if": "if (0 == n) {<br /><span style=\"white-space: pre-wrap;\">  </span>alert(\"no hits\");<br />} else if (1 == n) {<br /><span style=\"white-space: pre-wrap;\">  </span>alert(\"1 hit\");<br />} else {<br /><span style=\"white-space: pre-wrap;\">  </span>alert(n + \" hits\");<br />}",
  "switch": "switch (n) {<br />case 0:<br /><span style=\"white-space: pre-wrap;\">  </span>alert(\"no hits\\n\");<br /><span style=\"white-space: pre-wrap;\">  </span>break;<br />case 1:<br /><span style=\"white-space: pre-wrap;\">  </span>alert(\"one hit\\n\");<br /><span style=\"white-space: pre-wrap;\">  </span>break;<br />default:<br /><span style=\"white-space: pre-wrap;\">  </span>alert(n + \" hits\\n\");<br />}",
  "while": "while (i &lt; 100) {<br /><span style=\"white-space: pre-wrap;\">  </span>i += 1;<br />}",
  "break-continue": "break continue",
  "for": "for (var i = 0; i &lt; 10; i++) {<br /><span style=\"white-space: pre-wrap;\">  </span>alert(i);<br />}"
},
"exceptions": {
  "base-exc": "<span style=\"color: gray\"><em>Any value can be thrown.</em></span>",
  "predefined-exc": "Error<br /><span style=\"white-space: pre-wrap;\">  </span>EvalError<br /><span style=\"white-space: pre-wrap;\">  </span>RangeError<br /><span style=\"white-space: pre-wrap;\">  </span>ReferenceError<br /><span style=\"white-space: pre-wrap;\">  </span>SyntaxError<br /><span style=\"white-space: pre-wrap;\">  </span>TypeError<br /><span style=\"white-space: pre-wrap;\">  </span>URIError",
  "raise-exception": "throw new Error(\"bad arg\");",
  "catch-all-handler": "try {<br /><span style=\"white-space: pre-wrap;\">  </span>risky();<br />}<br />catch (e) {<br /><span style=\"white-space: pre-wrap;\">  </span>alert(\"risky failed: \" + e.message);<br />}",
  "uncaught-exception-behavior": "",
  "re-raise-exc": "try {<br /><span style=\"white-space: pre-wrap;\">  </span>throw new Error(\"bam!\");<br />}<br />catch (e) {<br /><span style=\"white-space: pre-wrap;\">  </span>alert(\"re-raising<span style=\"white-space: pre-wrap;\">...</span>\");<br /><span style=\"white-space: pre-wrap;\">  </span>throw e;<br />}",
  "last-exc-global": "<span style=\"color: gray\"><em>none</em></span>",
  "def-exc": "function Bam(msg) {<br /><span style=\"white-space: pre-wrap;\">  </span>this.message = msg;<br />}<br /><br />Bam.prototype = new Error;",
  "handle-exc": "try {<br /><span style=\"white-space: pre-wrap;\">  </span>throw new Bam(\"bam!\");<br />}<br />catch (e) {<br /><span style=\"white-space: pre-wrap;\">  </span>if (e instanceof Bam) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>alert(e.message);<br /><span style=\"white-space: pre-wrap;\">  </span>}<br /><span style=\"white-space: pre-wrap;\">  </span>else {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>throw e;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "finally-block": "acquire_resource();<br />try {<br /><span style=\"white-space: pre-wrap;\">  </span>risky();<br />}<br />finally {<br /><span style=\"white-space: pre-wrap;\">  </span>release_resource();<br />}"
},
"streams": {
  "standard-file-handles": "",
  "read-stdin": "",
  "end-of-file-behavior": "",
  "chomp": "",
  "print-to-stdout": "",
  "write-formatted-string-to-stdout": "",
  "open-file": "",
  "open-file-write": "",
  "set-file-handle-encoding": "",
  "open-file-for-appending": "",
  "close-file": "",
  "close-file-implicitly": "",
  "i/o-error": "",
  "encoding-error": "",
  "read-line": "",
  "file-iter": "",
  "read-file-into-array-of-strings": "",
  "read-file-into-string": "",
  "write-file": "",
  "write-line": "",
  "flush-file": "",
  "end-of-file-test": "",
  "get-and-set-file-handle-position": "",
  "open-temporary-file": "",
  "in-memory-file": ""
},
"files": {
  "file-test": "",
  "file-size": "",
  "readable-writable-executable": "",
  "chmod": "",
  "last-modification-time": "",
  "file-cp-rm-mv": "",
  "create-symlink,-symlink-test,-readlink": "",
  "tmpfile": ""
},
"file-fmt": {
  "parse-json": "var s1 = '{\"t\":1,\"f\":0}';<br />var d1 = JSON.parse(s1);",
  "generate-json": "var d2 = {'t': 1, 'f': 0};<br />var s2 = JSON.stringify(d1);"
},
"directories": {
  "working-directory<br-/>": "",
  "build-pathname": "",
  "dirname-basename": "",
  "absolute-pathname": "",
  "dir-iter": "",
  "glob-paths": "",
  "mkdir": "",
  "recursive-copy": "",
  "rmdir": "",
  "rm-rf": "",
  "dir-test": "",
  "generate-unused-directory": "",
  "system-temporary-file-directory": ""
},
"processes-environment": {
  "cmd-line-arg": "",
  "env-var": "",
  "pid": "",
  "exit": "",
  "external-cmd": "",
  "cmd-subst": ""
},
"libraries-namespaces": {
  "load-lib": "",
  "load-library-in-subdirectory": "",
  "hot-patch": "",
  "load-error": "",
  "main-routine-in-library": "",
  "lib-path": "",
  "lib-path-env": "",
  "library-path-command-line-option": "",
  "simple-global-identifiers": "",
  "multiple-label-identifiers": "",
  "label-separator": "",
  "namespace-decl": "",
  "child-namespace-declaration": "",
  "unqualified-import-of-namespace": "",
  "unqualified-import-of-definitions": "",
  "pkg-management": ""
},
"objects": {
  "def-class": "function Int(i) {<br /><span style=\"white-space: pre-wrap;\">  </span>this.value = i === undefined ? 0 : i;<br />}",
  "create-obj": "var i = new Int();<br />var i2 = new Int(7);",
  "instance-var": "<span style=\"color: gray\"><em>public</em></span>",
  "getter-setter": "var v = i.value;<br />i.value = v + 1;",
  "def-method": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> inside constructor:</span><br />this.plus = function(v) {<br /><span style=\"white-space: pre-wrap;\">  </span>return this.value + v;<br />};<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> outside constructor:</span><br />Int.prototype.plus = function (v) {<br /><span style=\"white-space: pre-wrap;\">  </span>return this.value + v;<br />}",
  "invoke-method": "i.plus(3);"
},
"inheritance-polymorphism": {
  "inheritance": "",
  "mixin": "",
  "op-overload": ""
},
"reflection": {
  "object-id": "<span style=\"color: gray\"><em>none</em></span>",
  "inspect-type": "typeof([]) === 'object'",
  "types": "number<br />string<br />boolean<br />undefined<br />function<br />object<br /><br /><span style=\"color: gray\"># these evaluate as 'object':</span><br />typeof(null)<br />typeof([])<br />typeof({})",
  "inspect-class": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> returns prototype object:</span><br />Object.getPrototypeOf(o)",
  "inspect-class-hierarchy": "var pa = Object.getPrototypeOf(o)<br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span>prototype's of prototype object:</span><br />var grandpa = Object.getPrototypeOf(pa)",
  "has-method": "o.reverse &amp;&amp; typeof(o.reverse) === 'function'",
  "msg-passing": "<span style=\"color: gray\"><em>not a standard feature</em></span>",
  "eval": "eval('1 + 1')",
  "list-obj-methods": "",
  "list-obj-attr": "",
  "list-loaded-lib": "",
  "list-loaded-namespaces": "",
  "inspect-namespace": "",
  "pretty-print": "var d = {\"lorem\": 1, \"ipsum\": [2, 3]};<br />console.log(JSON.stringify(d, null, 2));",
  "src-line-file": "",
  "cmd-line-doc": ""
},
"gui": {
  "pop-up-box": "var app = Application.currentApplication()<br />app.includeStandardAdditions = true<br />app.displayAlert('hi world')",
  "button": "",
  "text-entry": "",
  "frame": "",
  "label": "",
  "image": ""
},
"net-web": {
  "hostname-ip": "",
  "http-get": "",
  "http-post": "",
  "serve-pwd": "",
  "absolute-url": "",
  "parse-url": "",
  "url-encode": "",
  "html-escape": "",
  "base64": ""
}
}
