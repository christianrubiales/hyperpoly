{

"general": {
  "version-used": "<span style=\"color: gray\"><em>1.1</em></span>",
  "show-version": "msgbox % a_ahkversion"
},
"grammar-invocation": {
  "interpreter": "<span style=\"white-space: pre-wrap;\">&gt;</span> autohotkey foo.ahk",
  "repl": "",
  "cmd-line-program": "<span style=\"color: gray\"><em>none</em></span>",
  "stmt-separator": "<span style=\"color: gray\"><em>sometimes newline</em></span><br /><br /><span style=\"color: gray\"><em>newline does not terminate statement:<br /><br /><span style=\"white-space: pre-wrap;\">  </span>(1) inside parens<br /><span style=\"white-space: pre-wrap;\">  </span>(2) when following line starts with binary operator</em></span>",
  "block-delimiters": "{ }",
  "local-scope-regions": "",
  "expr-stmt": "<span style=\"color: gray\"><em>no</em></span>",
  "eol-comment": "; <span style=\"color: gray\"><em>comment</em></span>",
  "multiple-line-comment": "/*<br /><span style=\"color: gray\"><em>comment</em></span><br /><span style=\"color: gray\"><em>another comment</em></span><br />*/"
},
"var-expr": {
  "local-var": "",
  "global-var": "",
  "assignment": "s1 := PATH<br />s2 := \"foo bar\"<br /><br /><span style=\"color: gray\">; traditional style:</span><br />s1 = %PATH%<br />s2 = foo bar",
  "parallel-assignment": "<span style=\"color: gray\"><em>none</em></span>",
  "swap": "<span style=\"color: gray\"><em>none</em></span>",
  "compound-assignment": "+= -= *= /= <span style=\"white-space: pre-wrap;\">//</span>=<br />.=<br /><span style=\"white-space: pre-wrap;\">&lt;&lt;= &gt;&gt;=</span> &amp;= |= ^=",
  "incr-decr": "<span style=\"color: gray\"><em>premodifiers:</em></span><br />++i <span style=\"white-space: pre-wrap;\">--</span>i<br /><br /><span style=\"color: gray\"><em>postmodifiers:</em></span><br />i++ i<span style=\"white-space: pre-wrap;\">--</span>",
  "var-decl": "",
  "null": "\"\"",
  "null-test": "v == \"\"<br /><br /><span style=\"color: gray\">; traditional style:</span><br />v =",
  "undef-var": "<span style=\"color: gray\"><em>evaluates as empty string</em></span>",
  "conditional-expr": "x &gt; 0 ? x : -x"
},
"arithmetic-logic": {
  "true-false": "1 0<br /><br /><span style=\"color: gray\"><em>synonyms:</em></span><br />true false",
  "falsehoods": "0 \"\"",
  "logical-op": "and or not<br /><br /><span style=\"color: gray\"><em>synonyms:</em></span><br /><span style=\"white-space: pre-wrap;\">&amp;&amp; || !</span>",
  "relational-expr": "",
  "relational-op": "== != &gt; &lt; &gt;= &lt;=<br /><br /><span style=\"color: gray\"><em>case insensitive equality:</em></span><br /><span style=\"white-space: pre-wrap;\">=</span>",
  "min-max": "",
  "arith-expr": "1 + 3",
  "arith-op": "+ - * / <span style=\"white-space: pre-wrap;\">//</span> <span style=\"color: gray\"><em>none</em></span> <span style=\"white-space: pre-wrap;\">**</span><br /><br /><span style=\"color: gray\"><em>modulo function:</em></span> mod(m, n)",
  "int-dvi": "7 <span style=\"white-space: pre-wrap;\">//</span> 3",
  "int-div-zero": "<span style=\"color: gray\"><em>evaluates to empty string</em></span>",
  "float-div": "7 / 3",
  "float-div-zero": "<span style=\"color: gray\"><em>evaluates to empty string</em></span>",
  "power": "2 ** 32",
  "sqrt": "sqrt(2)",
  "sqrt--1<br-/>": "<span style=\"color: gray\"><em>evaluates to empty string</em></span>",
  "transcendental-functions": "exp ln<br />sin cos tan<br />asin acos atan",
  "transcendental-const": "",
  "float-truncation<br-/>": "<span style=\"color: gray\"><em>none</em></span><br />round(3.14)<br />floor(3.14)<br />ceil(3.14)",
  "abs-val": "abs(-7)",
  "integer-overflow<br-/>": "<span style=\"color: gray\"><em>signed modular arithmetic</em></span>",
  "float-overflow<br-/>": "<span style=\"color: gray\"><em>evaluates to string value such as:</em></span><br />1.#INF00",
  "random-integer,-uniform-float": "<span style=\"color: gray\">; store results in n and x:</span><br />random, n, 0, 99<br />random, x, 0.0, 1.0",
  "seed-random-numbers<br-/>": "random, , 17",
  "bit-operators<br-/>": "<span style=\"white-space: pre-wrap;\">&lt;&lt; &gt;&gt; &amp; | ^ ~</span>",
  "binary-octal-hex-literals": "",
  "radix": ""
},
"strings": {
  "str-type": "",
  "str-literal": "\"don't say \"\"no\"\"\"",
  "new-line-in-str-literal": "",
  "str-literal-esc": "",
  "var-interpolation": "",
  "str-concat": "\"hello, \" . \"world\"",
  "str-replicate": "",
  "str-join": "",
  "split": "",
  "fmt-str": "",
  "translate-case": "s1 := \"Hello\"<br />stringupper, s2, s1<br />stringlower, s3, s2",
  "trim": "",
  "pad": "",
  "str-to-num": "",
  "num-to-str": "",
  "prefix-suffix-test": "",
  "str-len": "strlen(\"hello\")",
  "index-substr": "<span style=\"color: gray\">; returns 5:</span><br />instr(\"foo bar\", \"bar\")",
  "extract-substr": "substr(\"foo bar\", 5, 3)",
  "char-literal": "",
  "lookup-char": "",
  "chr-ord": "",
  "str-to-char-array": ""
},
"regexes": {
  "regex-match": "",
  "regex-literal": "",
  "char-class-abbrev": "",
  "regex-anchors": "",
  "case-insensitive-regex": "",
  "regex-modifiers": "",
  "subst": "",
  "match-prematch-postmatch": "",
  "group-capture": "",
  "named-grouped-capture": "",
  "scan": "",
  "backreference": ""
},
"dates-time": {
  "broken-down-datetime-type": "",
  "current-datetime": "",
  "unix-epoch": "",
  "current-unix-epoch": "",
  "strftime": "",
  "strptime": "",
  "parse-date": "",
  "get-date-parts": "",
  "get-time-parts": "",
  "date-from-parts": "",
  "date-subtraction": "",
  "add-time-duration": "",
  "local-tmz": "",
  "tmz-offset": "",
  "microseconds": "",
  "sleep": "",
  "timeout": ""
},
"arrays": {
  "resizable-array-literal": "",
  "resizable-array-size": "",
  "empty-test": "",
  "resizable-array-lookup": "",
  "resizable-array-update": "",
  "out-of-bounds-behavior": "",
  "index-of-element<br-/>": "",
  "slice": "",
  "slice-to-end": "",
  "concatenation": "",
  "copy": "",
  "manipulate-back-of-array": "",
  "manipulate-front-of-array": "",
  "array-iteration": "",
  "reverse": "",
  "sort": "",
  "dedupe": "",
  "membership<br-/>": "",
  "intersection": "",
  "union": "",
  "relative-complement": "",
  "map<br-/>": "",
  "filter<br-/>": "",
  "reduce<br-/>": "",
  "universal-test<br-/>": "",
  "existential-test<br-/>": ""
},
"dictionaries": {
  "dict-ctorl": "",
  "dict-size": "",
  "dict-lookup": "",
  "dict-update": "",
  "dict-missing-key": "",
  "dict-is-key-present": "",
  "dict-delete": "",
  "dict-iter": "",
  "dict-key-val-arrays": ""
},
"functions": {
  "def-func": "add(x, y) {<br /><span style=\"white-space: pre-wrap;\">  </span>return x + y<br />}",
  "call-func": "x := add(1, 2)",
  "missing-arg": "<span style=\"color: gray\"><em>error</em></span>",
  "extra-arg": "<span style=\"color: gray\"><em>error</em></span>",
  "default-arg": "fapprox(x, y, eps=0.001) {<br /><span style=\"white-space: pre-wrap;\">  </span>return abs(x - y) &lt; eps<br />}",
  "named-parameters": "<span style=\"color: gray\"><em>none</em></span>",
  "variadic-func": "",
  "pass-by-ref": "swap(byref v1, byref v2) {<br /><span style=\"white-space: pre-wrap;\">  </span>tmp := v1<br /><span style=\"white-space: pre-wrap;\">  </span>v1 := v2<br /><span style=\"white-space: pre-wrap;\">  </span>v2 := tmp<br />}",
  "return-value": "<span style=\"color: gray\"><em>argument of</em> return</span>",
  "nested-func": "",
  "anon-func-literal": "",
  "call-anon-func": "",
  "private-state-func": "",
  "closure": ""
},
"execution-control": {
  "if": "if (n = 0) {<br /><span style=\"white-space: pre-wrap;\">  </span>msgbox % \"zero hits\"<br />}<br />else if (n = 1) {<br /><span style=\"white-space: pre-wrap;\">  </span>msgbox % \"one hit\"<br />}<br />else {<br /><span style=\"white-space: pre-wrap;\">  </span>msgbox % n . \" hits\"<br />}",
  "switch": "",
  "while": "",
  "break-continue": "exit 0",
  "for": ""
},
"exceptions": {
  "base-exc": "",
  "predefined-exc": "",
  "raise-exception": "",
  "catch-all-handler": "",
  "uncaught-exception-behavior": "",
  "re-raise-exc": "",
  "last-exc-global": "",
  "def-exc": "",
  "handle-exc": "",
  "finally-block": ""
},
"streams": {
  "standard-file-handles": "",
  "read-stdin": "",
  "end-of-file-behavior": "",
  "chomp": "",
  "print-to-stdout": "",
  "write-formatted-string-to-stdout": "",
  "open-file": "",
  "open-file-write": "",
  "set-file-handle-encoding": "",
  "open-file-for-appending": "",
  "close-file": "",
  "close-file-implicitly": "",
  "i/o-error": "",
  "encoding-error": "",
  "read-line": "",
  "file-iter": "",
  "read-file-into-array-of-strings": "",
  "read-file-into-string": "",
  "write-file": "",
  "write-line": "",
  "flush-file": "",
  "end-of-file-test": "",
  "get-and-set-file-handle-position": "",
  "open-temporary-file": "",
  "in-memory-file": ""
},
"files": {
  "file-test": "",
  "file-size": "",
  "readable-writable-executable": "",
  "chmod": "",
  "last-modification-time": "",
  "file-cp-rm-mv": "",
  "create-symlink,-symlink-test,-readlink": "",
  "tmpfile": ""
},
"file-fmt": {
  "parse-json": "",
  "generate-json": ""
},
"directories": {
  "working-directory<br-/>": "",
  "build-pathname": "",
  "dirname-basename": "",
  "absolute-pathname": "",
  "dir-iter": "",
  "glob-paths": "",
  "mkdir": "",
  "recursive-copy": "",
  "rmdir": "",
  "rm-rf": "",
  "dir-test": "",
  "generate-unused-directory": "",
  "system-temporary-file-directory": ""
},
"processes-environment": {
  "cmd-line-arg": "",
  "env-var": "",
  "pid": "",
  "exit": "",
  "external-cmd": "",
  "cmd-subst": ""
},
"libraries-namespaces": {
  "load-lib": "",
  "load-library-in-subdirectory": "",
  "hot-patch": "",
  "load-error": "",
  "main-routine-in-library": "",
  "lib-path": "",
  "lib-path-env": "",
  "library-path-command-line-option": "",
  "simple-global-identifiers": "",
  "multiple-label-identifiers": "",
  "label-separator": "",
  "namespace-decl": "",
  "child-namespace-declaration": "",
  "unqualified-import-of-namespace": "",
  "unqualified-import-of-definitions": "",
  "pkg-management": ""
},
"objects": {
  "def-class": "",
  "create-obj": "",
  "instance-var": "",
  "getter-setter": "",
  "def-method": "",
  "invoke-method": ""
},
"inheritance-polymorphism": {
  "inheritance": "",
  "mixin": "",
  "op-overload": ""
},
"reflection": {
  "object-id": "",
  "inspect-type": "",
  "types": "",
  "inspect-class": "",
  "inspect-class-hierarchy": "",
  "has-method": "",
  "msg-passing": "",
  "eval": "",
  "list-obj-methods": "",
  "list-obj-attr": "",
  "list-loaded-lib": "",
  "list-loaded-namespaces": "",
  "inspect-namespace": "",
  "pretty-print": "",
  "src-line-file": "",
  "cmd-line-doc": ""
},
"gui": {
  "pop-up-box": "msgbox % \"hi world\"",
  "button": "",
  "text-entry": "",
  "frame": "",
  "label": "",
  "image": ""
},
"net-web": {
  "hostname-ip": "",
  "http-get": "",
  "http-post": "",
  "serve-pwd": "",
  "absolute-url": "",
  "parse-url": "",
  "url-encode": "",
  "html-escape": "",
  "base64": ""
}
}
