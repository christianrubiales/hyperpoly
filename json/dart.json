{

"version": {
  "version-used": "<span style=\"color: gray\"><em>1.10</em></span>",
  "version": "$ dart <span style=\"white-space: pre-wrap;\">--</span>version"
},
"grammar-execution": {
  "hello-world": "$ cat hello.dart<br />void main() {<br /><span style=\"white-space: pre-wrap;\">  </span>print('Hello, World!');<br />}<br /><br />$ dart hello.dart<br />Hello, World!<br /><br />$ dart2js hello.dart<br /><br />$ node out.js<br />Hello, World!",
  "file-suffixes": ".dart <span style=\"color: gray\"><em>none</em></span> .js",
  "interpreter": "$ dart foo.dart",
  "block-delimiters": "{ <span style=\"color: gray\"><em>…</em></span> }",
  "statement-separator": ";",
  "eol-comment": "<span style=\"white-space: pre-wrap;\">//</span> <span style=\"color: gray\"><em>comment</em></span>",
  "multiple-line-comment": "/* <span style=\"color: gray\"><em>comment line</em></span><br /><span style=\"color: gray\"><em>another line</em></span> /* <span style=\"color: gray\"><em>nested comment</em></span> */ */"
},
"var-expr": {
  "local-var": "int i;<br />int j = 3, k = 4;<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> type is inferred:</span><br />var x = 1;<br />var y = 2, z = 3;",
  "local-scope-regions": "<span style=\"color: gray\"><em>top level:<br /><span style=\"white-space: pre-wrap;\">  </span>file<br /><br />nestable:<br /><span style=\"white-space: pre-wrap;\">  </span>block</em></span>",
  "global-var": "",
  "uninitialized-var": "<span style=\"color: gray\"><em>set to</em> null</span>",
  "immutable-var": "import 'dart:math';<br /><br />final x = (new Random()).nextDouble();",
  "const": "const double pi = 3.14;",
  "assignment": "i = 3;",
  "parallel-assignment": "<span style=\"color: gray\"><em>none</em></span>",
  "swap": "int x = 1, y = 2, tmp;<br /><br />tmp = x;<br />x = y;<br />y = tmp;",
  "compound-assignment": "<span style=\"color: gray\"><em>arithmetic:</em></span><br />+= -= *= /= ~/= %=<br /><br /><span style=\"color: gray\"><em>string:</em></span><br />+= *=<br /><br /><span style=\"color: gray\"><em>bit:</em></span><br /><span style=\"white-space: pre-wrap;\">&lt;&lt;= &gt;&gt;= &amp;= ^= |=</span>",
  "incr-decr": "<span style=\"color: gray\"><em>premodifiers:</em></span><br />++i <span style=\"white-space: pre-wrap;\">--</span>i<br /><br /><span style=\"color: gray\"><em>postmodifiers:</em></span><br />i++ i<span style=\"white-space: pre-wrap;\">--</span>",
  "null": "null",
  "null-test": "x == null",
  "option-type": "",
  "undef-var": "",
  "conditional-expr": "x &gt; 0 ? x : -x"
},
"arithmetic-logic": {
  "boolean-type": "bool",
  "true-false": "true false",
  "falsehoods": "<span style=\"color: gray\"><em>everything except for the boolean</em></span> true",
  "logical-op": "&amp;&amp; <span style=\"white-space: pre-wrap;\">||</span> !",
  "relational-op": "== != &lt; &gt; &lt;= &gt;=",
  "min-max": "",
  "int-type": "int",
  "float-type": "double",
  "arith-op": "<span style=\"white-space: pre-wrap;\">+</span> - * / %",
  "int-div": "3 ~/ 7",
  "int-div-zero": "IntegerDivisionByZeroException",
  "float-div": "3 / 7",
  "float-div-zero": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> not literals:</span><br />Infinity, NaN, <span style=\"color: gray\"><em>or</em></span> -Infinity",
  "power": "import 'dart:math' as math;<br /><br />math.pow(2.0, 3.0)",
  "sqrt": "import 'dart:math' as math;<br /><br />math.sqrt(2)",
  "sqrt-negative-one": "import 'dart:math' as math;<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> NaN:</span><br />math.sqrt(-1)",
  "transcendental-func": "import 'dart:math' as math;<br /><br />math.log <span style=\"color: gray\"><em>none</em></span> <span style=\"color: gray\"><em>none</em></span><br />math.sin math.cos math.tan<br />math.asin math.acos math.atan<br />math.atan2",
  "transcendental-const": "import 'dart:math' as math;<br /><br />math.PI<br />math.E",
  "float-truncation": "3.14.truncate()<br />3.14.round()<br />3.14.floor()<br />3.14.ceil()<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> (-3.14).floor() is -4 but -3.14.floor() is -3.</span>",
  "abs-val": "(-7.77).abs()",
  "int-overflow": "",
  "float-overflow": "",
  "random-num": "import 'dart:math';<br /><br />var rnd = new Random();<br />int n = rnd.nextInt(100);<br />int x = rnd.nextDouble();",
  "random-seed": "import 'dart:math';<br /><br />var rnd = new Random(17);",
  "bit-op": "<span style=\"white-space: pre-wrap;\"> &lt;&lt; &gt;&gt; &amp; | ^ ~ </span>",
  "binary-octal-hex-literals": "",
  "radix": ""
},
"strings": {
  "str-type": "String",
  "str-literal": "var s = 'don\\'t say \"no\"';<br />var s2 = \"don't say \\\"no\\\"\";<br />var s3 = '''don't say \"no\"'<br />var s4 = \"\"\"don't say \"no\\\"\"\"\"<br /><br /><span style=\"color: gray\"><em>raw string literals:</em></span> r'foo' r\"foo\"",
  "newline-in-str-literal": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> triple quote literals only:</span><br />var s = '''first line<br />second line''';<br /><br />var s2 = \"\"\"first line<br />second line\"\"\"",
  "str-literal-esc": "\\b \\f \\n \\r \\t \\v \\\" \\' \\$ \\\\<br />\\x<span style=\"color: gray\"><em>hh</em></span> \\u<span style=\"color: gray\"><em>hhhh</em></span> \\u{<span style=\"color: gray\"><em>h…</em></span>}",
  "here-doc": "",
  "var-interpolation": "",
  "expr-interpolation": "var count = 3;<br />var item = \"BALL\";<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> 3 balls</span><br />print('$count ${item.toLowerCase()}s');",
  "format-str": "",
  "mutable-str": "",
  "compare-str": "\"hello\" == \"world\"<br />\"hello\".compareTo(\"world\") &lt; 0",
  "copy-str": "",
  "str-concat": "\"hello\" + \" world\"",
  "str-replicate": "var hbar = \"-\" * 80;",
  "translate-case": "\"hello\".toUpperCase()<br />\"HELLO\".toLowerCase()",
  "capitalize": "",
  "trim": "\" lorem \".trim()<br />\" lorem \".trimLeft()<br />\" lorem \".trimRight()",
  "pad": "\"lorem\".padRight(10, \" \")<br />\"lorem\".padLeft(10, \" \")",
  "num-to-str": "3.14.toString()<br />7.toString()",
  "str-to-num": "var n = int.parse(\"17\");<br />var x = double.parse(\"3.14\");",
  "str-join": "['foo', 'bar', 'baz'].join(' ')",
  "split": "var a = \"foo bar bar\".split(' ');",
  "split-in-two": "",
  "split-keep-delimiters": "",
  "prefix-suffix-test": "",
  "str-len": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> number of 16 bit runes:</span><br />\"hello\".length",
  "index-substr": "\"hello\".indexOf(\"ll\")",
  "extract-substr": "\"hello\".substring(2, 4)",
  "char-type": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> 16 bits:</span><br />rune",
  "lookup-char": "",
  "chr-ord": "new String.fromCharCodes([65])<br />\"A\".codeUnitAt(0)<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> for Unicode points above U+FFFF codeUnitAt will<br /><span style=\"white-space: pre-wrap;\">//</span> return part of a surrogate pair</span>",
  "str-to-char-array": "",
  "translate-char": "",
  "delete-char": "",
  "squeeze-char": ""
},
"regexes": {
  "regex-literal": "",
  "regex-metachar": ". [ ] \\ ( ) * + ? { } | ^ $<br /><br /><span style=\"color: gray\"><em>use raw string (i.e. with r prefix) literals to avoid having to escape backslashes.</em></span>",
  "char-class-abbrev": ". \\d \\D \\s \\S \\w \\W",
  "regex-anchors": "^ $ \\b \\B",
  "regex-test": "RegExp rx = new RegExp(r\"1999\");<br />String s = \"It's 1999\";<br /><br />if (rx.hasMatch(s)) {<br /><span style=\"white-space: pre-wrap;\">  </span>print(\"Party!\");<br />}",
  "case-insensitive-regex": "RegExp rx = new RegExp(r\"lorem\", caseSensitive: false);<br />String s = \"Lorem Ipsum\";<br /><br />if (rx.hasMatch(s)) {<br /><span style=\"white-space: pre-wrap;\">  </span>print(\"case insensitive match\");<br />}",
  "regex-modifiers": "<span style=\"color: gray\">RegExp <em>constructor takes two optional boolean named parameters:</em></span><br /><br />multiLine<br />caseSensitive",
  "subst": "RegExp re = new RegExp(r'mi');<br />print(\"do re mi mi mi\".replaceAll(re, \"ma\"));",
  "match-prematch-postmatch": "",
  "group-capture": "RegExp rx = new RegExp(r'(\\d{4})-(\\d{2})-(\\d{2})');<br />var md = rx.firstMatch(\"2010-06-03\");<br /><br />if (md != null) {<br /><span style=\"white-space: pre-wrap;\">  </span>var yyyy = md.group(1);<br /><span style=\"white-space: pre-wrap;\">  </span>var mm = md.group(2);<br /><span style=\"white-space: pre-wrap;\">  </span>var dd = md.group(3);<br /><span style=\"white-space: pre-wrap;\">  </span>print(\"year: $yyyy month: $mm day: $dd\");<br />}",
  "named-group-capture": "",
  "scan": "",
  "backreference": "",
  "recursive-regex": ""
},
"dates-time": {
  "broken-down-datetime-type": "DateTime",
  "current-datetime": "var dt = new DateTime.now();",
  "current-unix-epoch": "",
  "broken-down-datetime-to-unix-epoch": "dt.millisecondsSinceEpoch ~/ 1000",
  "unix-epoch-to-broken-down-datetime": "int t = 1422021432;<br /><br />var dt = new DateTime.fromMillisecondsSinceEpoch(t * 1000);",
  "fmt-datetime": "",
  "parse-datetime": "",
  "parse-datetime-without-fmt": "",
  "date-parts": "int yr = dt.year;<br />int mo = dt.month;<br />int dy = dt.day;",
  "time-parts": "int hr = dt.hour;<br />int mi = dt.minute;<br />int ss = dt.second;",
  "build-datetime": "var dt = new DateTime(1999, 9, 10, 23, 30, 0);<br /><br />var dt_utc = new DateTime.utc(1999, 9, 10, 23, 30, 0);",
  "datetime-subtraction": "Duration delta = dt.difference(dt2);",
  "add-duration": "Duration delta1 = const Duration(seconds: 1000);<br />Duration delta2 = const Duration(hours: 1000);<br />Duration delta3 = const Duration(days: 1000);<br /><br />var dt2 = dt.add(delta1);<br />var dt3 = dt.subtract(delta3);",
  "local-tmz-determination": "",
  "tmz-info": "",
  "daylight-savings-test": "",
  "microseconds": "",
  "sleep": ""
},
"arrays": {
  "array-literal": "var a = [1, 2, 3, 4];",
  "array-size": "a.length",
  "array-empty": "a.isEmpty",
  "array-lookup": "a[0]",
  "array-update": "a[0] = \"lorem\";",
  "array-out-of-bounds": "<span style=\"color: gray\"><em>lookups and updates raise</em> RangeError</span>",
  "array-element-index": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> returns -1 if not found:</span><br />[6, 7, 7, 8].indexOf(7)<br />[6, 7, 7, 8].lastIndexOf(7)",
  "array-slice": "var a = [\"a\", \"b\", \"c\", \"d\", \"e\"];<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> [\"c\", \"d\"]:</span><br />List a2 = a.getRange(2, 4);",
  "array-slice-to-end": "[\"a\", \"b\", \"c\", \"d\"].skip(1)",
  "array-back": "a.add(4);<br />var v = a.removeLast();",
  "array-front": "var a = [6, 7, 8];<br />a.insertAt(0, 5);<br />var i = a.removeAt(0);",
  "array-concatenation": "var a = [1, 2, 3];<br />a.addAll([4, 5, 6]);",
  "replicate-array": "var a = new List.filled(10, 0);",
  "array-copy": "var a = [\"a\", \"b\"];<br /><br />List a2 = new List&lt;String&gt;.from(a);",
  "array-as-func-arg": "<span style=\"color: gray\"><em>parameter contains address copy</em></span>",
  "iterate-over-array": "for (var i in [1, 2, 3]) {<br /><span style=\"white-space: pre-wrap;\">  </span>print(i);<br />}<br /><br />[1, 2, 3].forEach((i) =&gt; print(i));",
  "indexed-array-iteration": "",
  "range-array": "",
  "array-reverse": "var a = [\"a\", \"b\", \"c\"];<br /><br />List a2 = new List&lt;String&gt;.from(a.reversed);",
  "array-sort": "var a = [3, 1, 4, 2];<br />a.sort();",
  "array-dedupe": "var a = [1, 2, 2, 3];<br />var set = new Set.from(a);<br />var a2 = new List.from(set);",
  "membership": "[1, 2, 3].contains(7)",
  "intersection": "var set1 = new Set.from([1, 2]);<br />var set2 = new Set.from([2, 3, 4]);<br /><br />set1.intersection(set2);",
  "union": "var set1 = new Set.from([1, 2]);<br />var set2 = new Set.from([2, 3, 4]);<br /><br />set1.union(set2);",
  "set-diff": "var set1 = new Set.from([1, 2]);<br />var set2 = new Set.from([2, 3, 4]);<br /><br />set1.difference(set2);",
  "map": "var a = [1, 2, 3];<br /><br />var a2 = new List.from(a.map((n) =&gt; n * n));",
  "filter": "var a = [1, 2, 3];<br /><br />var a2 = new List.from(a.where((n) =&gt; n &gt; 1));",
  "reduce": "var a = [1, 2, 3];<br /><br />var sum = a.reduce((v, e) =&gt; v + e);",
  "universal-existential-test": "[1, 2, 3, 4].every((x) =&gt; x % 2 == 0)<br />[1, 2, 3, 4].any((x) =&gt; x % 2 == 0)",
  "shuffle-sample": "var a = [1, 2, 3, 4];<br />a.shuffle();<br />var samp = a.take(2);",
  "flatten": "",
  "zip": ""
},
"dictionaries": {
  "dict-literal": "var d = {\"t\": 1, \"f\": 0};",
  "dict-size": "d.length",
  "dict-lookup": "d[\"t\"]",
  "dict-update": "d[\"t\"] = 2;",
  "dict-missing-key": "<span style=\"color: gray\"><em>returns</em></span> null",
  "dict-key-check": "d.containsKey(\"y\")",
  "dict-delete": "d.remove(\"f\");",
  "dict-assoc-array": "",
  "dict-merge": "",
  "dict-invert": "",
  "dict-iter": "d.forEach((k, v) {<br /><span style=\"white-space: pre-wrap;\">  </span>print(k);<br /><span style=\"white-space: pre-wrap;\">  </span>print(v);<br />});",
  "dict-key-val": "List keys = d.keys;<br />List vals = d.values;",
  "dict-sort-values": "",
  "dict-default-val": ""
},
"functions": {
  "def-func": "num add(num n, num m) {<br /><span style=\"white-space: pre-wrap;\">  </span>return n + m;<br />}<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> parameter and return types optional:</span><br />add(n, m) {<br /><span style=\"white-space: pre-wrap;\">  </span>return n + m;<br />}<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> expression body shorthand:</span><br />num add(num n, num m) =&gt; n + m;",
  "invoke-func": "add(1, 2)",
  "overload-func": "<span style=\"color: gray\"><em>none</em></span>",
  "missing-arg": "<span style=\"color: gray\"><em>compilation error</em></span>",
  "extra-arg": "<span style=\"color: gray\"><em>compilation error</em></span>",
  "default-arg": "import 'dart:math' as math;<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> named params can have defaults:</span><br />num my_log(num expt, {num base: 10}) {<br /><span style=\"white-space: pre-wrap;\">  </span>return math.log(expt) / math.log(base);<br />}<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> positional params can be optional:</span><br />num my_log(num expt, [num base]) {<br /><span style=\"white-space: pre-wrap;\">  </span>if (base == null) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>return math.log(expt) / math.log(10);<br /><span style=\"white-space: pre-wrap;\">  </span>}<br /><span style=\"white-space: pre-wrap;\">  </span>else {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>return math.log(expt) / math.log(base);<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "variadic-func": "<span style=\"color: gray\"><em>none</em></span>",
  "named-param": "num divide({num dividend, num divisor}) {<br />return dividend / divisor;<br />}<br /><br />divide(divisor: 3, dividend: 9);",
  "retval": "<span style=\"color: gray\">return <em>arg or</em> null</span>",
  "anonymous-func-literal": "Function sqr = (num x) =&gt; x * x;",
  "invoke-anonymous-func": "((num x) =&gt; x * x)(5)",
  "func-as-val": "apply(Function fn, arg) {<br /><span style=\"white-space: pre-wrap;\">  </span>fn(arg);<br />}<br /><br />apply(print, \"lorem ipsum\");",
  "func-with-state": "<span style=\"color: gray\"><em>Use a variable defined outside the function; the scope of the variable is the containing file.</em></span>",
  "closure": "Function make_counter() {<br /><span style=\"white-space: pre-wrap;\">  </span>num i = 0;<br /><span style=\"white-space: pre-wrap;\">  </span>return () =&gt; ++i;<br />}",
  "generator": ""
},
"execution-control": {
  "if": "int signum;<br /><br />if (i &gt; 0) {<br /><span style=\"white-space: pre-wrap;\">  </span>signum = 1;<br />} else if (i == 0) {<br /><span style=\"white-space: pre-wrap;\">  </span>signum = 0;<br />} else {<br /><span style=\"white-space: pre-wrap;\">  </span>signum = -1;<br />}",
  "switch": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> switch expression can be integer or string</span><br /><br />switch (i) {<br /><span style=\"white-space: pre-wrap;\">  </span>case 0:<br /><span style=\"white-space: pre-wrap;\">  </span>case 1:<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>print(\"i is boolean\");<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>break;<br /><span style=\"white-space: pre-wrap;\">  </span>default:<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>print(\"i is not boolean\");<br />}<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> Falling through not permitted; exception if last<br /><span style=\"white-space: pre-wrap;\">//</span> statement not break, continue, throw, or return.</span>",
  "while": "int i = 0;<br /><br />while (i &lt; 10) {<br /><span style=\"white-space: pre-wrap;\">  </span>++i;<br />}",
  "for": "int n, i;<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> Initialization and afterthought must be single<br /><span style=\"white-space: pre-wrap;\">//</span> statements; there is no comma operator.</span><br />n = 1;<br />for (i = 1; i &lt;= 10; ++i) {<br /><span style=\"white-space: pre-wrap;\">  </span>n *= i;<br />}",
  "break": "break",
  "continue": "continue",
  "for-local-scope": "int n = 1;<br /><br />for (int i = 1; i &lt;= 10; ++i) {<br /><span style=\"white-space: pre-wrap;\">  </span>n *= i;<br />}<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> is no longer in scope</span>",
  "infinite-loop": "for (;;) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> code</span><br />}<br /><br />while (1) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> code</span><br />}",
  "break-from-nested-loops": "int a, b, c;<br /><br />outer:<br />for (a = 1; ; ++a) {<br /><span style=\"white-space: pre-wrap;\">  </span>for (b = 1; b &lt; a; ++b) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>c = (math.sqrt(a * a + b * b)).truncate();<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>if (c * c == a * a + b * b) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>break outer;<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>}<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "single-stmt-branch-loop": "while (n % 17 == 0)<br /><span style=\"white-space: pre-wrap;\">  </span>++n;<br /><br />if (n &lt; 0)<br /><span style=\"white-space: pre-wrap;\">  </span>print(\"negative\");",
  "dangling-else": "int a = 1, b = -3, c;<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> indentation shows how ambiguity is resolved</span><br />if (a &gt; 0)<br /><span style=\"white-space: pre-wrap;\">  </span>if (b &gt; 0)<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>c = 1;<br /><span style=\"white-space: pre-wrap;\">  </span>else<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>c = 2;"
},
"exceptions": {
  "base-exc": "Exception<br />Error<br /><br /><span style=\"color: gray\"><em>Any non-null value can be thrown.</em></span>",
  "predefined-exc": "Error<br /><span style=\"white-space: pre-wrap;\">  </span>AbstractClassInstantiationError<br /><span style=\"white-space: pre-wrap;\">  </span>ArgumentError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>RangeError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>IndexError<br /><span style=\"white-space: pre-wrap;\">  </span>AssertionError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>TypeError<br /><span style=\"white-space: pre-wrap;\">  </span>CastError<br /><span style=\"white-space: pre-wrap;\">  </span>ConcurrentModificationError<br /><span style=\"white-space: pre-wrap;\">  </span>CyclicInitializationError<br /><span style=\"white-space: pre-wrap;\">  </span>FallThroughError<br /><span style=\"white-space: pre-wrap;\">  </span>JsonUnsupportedObjectError<br /><span style=\"white-space: pre-wrap;\">  </span>NoSuchMethodError<br /><span style=\"white-space: pre-wrap;\">  </span>NullThrownError<br /><span style=\"white-space: pre-wrap;\">  </span>OutOfMemoryError<br /><span style=\"white-space: pre-wrap;\">  </span>RangeError<br /><span style=\"white-space: pre-wrap;\">  </span>StackOverflowError<br /><span style=\"white-space: pre-wrap;\">  </span>StateError<br /><span style=\"white-space: pre-wrap;\">  </span>UnimplementedError<br /><span style=\"white-space: pre-wrap;\">  </span>UnsupportedError<br /><br /><span style=\"color: gray\"><em>intended to be caught:</em></span><br />Exception<br /><span style=\"white-space: pre-wrap;\">  </span>FormatException<br /><span style=\"white-space: pre-wrap;\">  </span>IntegerDivisionByZeroException",
  "raise-exc": "throw new Exception(\"bad arg\");",
  "catch-all-handler": "try {<br /><span style=\"white-space: pre-wrap;\">  </span>risky();<br />}<br />catch (e) {<br /><span style=\"white-space: pre-wrap;\">  </span>print(\"risky failed\");<br />}",
  "re-raise-exc": "try {<br /><span style=\"white-space: pre-wrap;\">  </span>throw new Exception(\"bam!\");<br />}<br />catch (e) {<br /><span style=\"white-space: pre-wrap;\">  </span>print(\"re-raising…\");<br /><span style=\"white-space: pre-wrap;\">  </span>rethrow;<br />}",
  "def-exc": "class Bam implements Exception {<br /><span style=\"white-space: pre-wrap;\">  </span>String msg;<br /><span style=\"white-space: pre-wrap;\">  </span>Bam(this.msg);<br />}",
  "handle-exc": "try {<br /><span style=\"white-space: pre-wrap;\">  </span>throw new Bam(\"bam!\");<br />}<br />on Bam catch (e) {<br /><span style=\"white-space: pre-wrap;\">  </span>print(e.msg);<br />}",
  "finally-block": "acquire_resource();<br />try {<br /><span style=\"white-space: pre-wrap;\">  </span>risky();<br />}<br />finally {<br /><span style=\"white-space: pre-wrap;\">  </span>release_resource();<br />}"
},
"streams": {
  "std-file-handles": "import 'dart:io' as io;<br /><br />io.stdin io.stdout io.stderr",
  "read-line-stdin": "",
  "eof": "",
  "chomp": "",
  "write-line-stdout": "import 'dart:io' as io;<br /><br />print('Hello, World!');<br /><br />io.stdout.writeln('Hello, World!');",
  "printf": "",
  "open-file": "",
  "open-file-write": "",
  "file-encoding": "",
  "open-file-append": "",
  "close-file": "",
  "close-file-implicitly": "",
  "io-err": "",
  "encoding-err": "",
  "read-line": "",
  "file-iterate": "",
  "read-file-array": "",
  "read-file-str": "import 'dart:io' as io;<br /><br />File f = new io.File('/etc/hosts');<br />f.readAsString().then((String s) {<br /><span style=\"white-space: pre-wrap;\">  </span>print('length: ${s.length}');<br />});",
  "write-str": "",
  "write-line": "",
  "flush": "",
  "eof-test": "",
  "seek": "",
  "tmp-file": "",
  "stringio": ""
},
"files": {
  "file-test": "import 'dart:io' as io;<br /><br />File f = new io.File(\"/tmp/foo\");<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> existence check?</span><br /><br />if (f.existsSync()) {<br /><span style=\"white-space: pre-wrap;\">  </span>print(\"is a regular file\\n\");<br />}",
  "file-size": "f.lengthSync()",
  "readable-writable-executable": "",
  "chmod": "",
  "last-modification-time": "import 'dart:io\" as io;<br /><br />File f = new io.File(\"/etc/hosts\");<br />print(f.lastModifiedSync());",
  "file-cp-rm-mv": "import 'dart:io' as io;<br /><br />File f = new io.File(\"/tmp/foo\");<br />f.copySync(\"/tmp/bar\");<br />f.deleteSync();<br />File f2 = new io.File(\"/tmp/bar\");<br />f2.renameSync(\"/tmp/foo\");",
  "symlink": "",
  "unused-file-name": ""
},
"file-fmt": {
  "parse-csv": "",
  "generate-csv": "",
  "parse-json": "",
  "generate-json": "",
  "parse-yaml": "",
  "generate-yaml": "",
  "parse-xml": "",
  "generate-xml": "",
  "parse-html": ""
},
"directories": {
  "working-dir": "",
  "build-pathname": "",
  "dirname-basename": "",
  "absolute-pathname": "",
  "dir-iterate": "",
  "glob": "",
  "mkdir": "",
  "recursive-cp": "",
  "rmdir": "",
  "rm-rf": "",
  "dir-test": "import 'dart:io' as io;<br /><br />bool isDir;<br /><br />io.FileSystemEntity.isDirectory('/tmp').then((isDir) {<br /><span style=\"white-space: pre-wrap;\">  </span>if (isDir) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>print('is directory');<br /><span style=\"white-space: pre-wrap;\">  </span>} else {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>print('not a directory');<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />});",
  "unused-dir": "",
  "system-tmp-dir": ""
},
"processes-environment": {
  "cmd-line-arg": "",
  "env-var": "",
  "pid": "",
  "user-id-name": "",
  "exit": "",
  "signal-handler": "",
  "executable-test": "",
  "external-cmd": "import 'dart:io' as io;<br /><br />io.Process.start('ls', ['-l', '/tmp']).then((process) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>io.stdout.addStream(process.stdout);<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>io.stderr.addStream(process.stderr);<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>process.exitCode.then(print);<br /><span style=\"white-space: pre-wrap;\">  </span>});",
  "shell-esc-external-cmd": "",
  "cmd-subst": ""
},
"libraries-namespaces": {
  "load-lib": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> load ./foo.dart:</span><br />import 'foo.dart' as foo;<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> load built-in library:</span><br />import 'dart:io' as io;<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> library installed by package manager:</span><br />import 'package:foo/foo.dart' as foo;",
  "load-lib-subdir": "import 'lib/foo.dart' as foo;",
  "hot-patch": "",
  "load-err": "",
  "main-in-lib": "",
  "lib-path": "",
  "lib-path-env": "",
  "lib-path-cmd-line": "",
  "simple-global-identifiers": "",
  "multiple-label-identifiers": "",
  "label-separator": "",
  "root-namespace": "",
  "namespace-decl": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> not required in file containing main():</span><br />library foo;",
  "child-namespace-decl": "",
  "import-def": "import 'foo' show bar, baz;",
  "import-namespace": "import 'foo';",
  "import-all-subnamespaces": "",
  "shadow-avoidance": "import 'foo' as fu;"
},
"user-defined-types": {
  "enumerated-type": "enum Color {red, green, blue}<br /><br />Color col = Color.green;",
  "struct-def": "",
  "optional-struct-member": "",
  "struct-literal": "",
  "struct-lookup": "",
  "struct-update": "",
  "type-alias": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> function types only:</span><br />typedef num BinaryOp(num x, num y);"
},
"generic-types": {
  "generic-func": "",
  "generic-class": ""
},
"objects": {
  "def-class": "class Int {<br /><span style=\"white-space: pre-wrap;\">  </span>int value;<br /><span style=\"white-space: pre-wrap;\">  </span>Int(int n) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>this.value = n;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "create-obj": "Int i = new Int(7);",
  "instance-var": "",
  "getter-setter": "i.value = i.value + 1;<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> inside method:</span><br />this.value = this.value + 1;",
  "def-method": "class Int {<br /><span style=\"white-space: pre-wrap;\">  </span>int value;<br /><span style=\"white-space: pre-wrap;\">  </span>Int(int n) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>this.value = n;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br /><span style=\"white-space: pre-wrap;\">  </span>void plus(num v) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>this.value += v;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "invoke-method": "i.plus(3);",
  "def-class-method": "class Int {<br /><span style=\"white-space: pre-wrap;\">  </span>static int getInstances() {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>return instances;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "invoke-class-method": "Int.getInstances()",
  "def-classs-var": "class Int {<br /><span style=\"white-space: pre-wrap;\">  </span>static int instances = 0;<br /><span style=\"white-space: pre-wrap;\">  </span>int value;<br /><span style=\"white-space: pre-wrap;\">  </span>Int(int n) {<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>this.value = n;<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>instances += 1;<br /><span style=\"white-space: pre-wrap;\">  </span>}<br />}",
  "class-var-getter-setter": "<span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> inside class:</span><br />instances = instances + 1;<br /><br /><span style=\"color: gray\"><span style=\"white-space: pre-wrap;\">//</span> outside class:</span><br />Int.instances = Int.instances + 1;",
  "method-missing": "",
  "destructor": ""
},
"inheritance-polymorphism": {
  "inheritance": ""
},
"reflection": {
  "object-id": "",
  "inspect-type": "var n = 3;<br />if (n is int) {<br /><span style=\"white-space: pre-wrap;\">  </span>n += 1;<br />}<br /><br />if (n is! String) {<br /><span style=\"white-space: pre-wrap;\">  </span>n += \"s\";<br />}",
  "types": "dynamic<br />num",
  "inspect-class": "",
  "inspect-class-hierarchy": "",
  "has-method": "",
  "msg-passing": "",
  "eval": "",
  "list-obj-methods": "",
  "list-obj-attr": "",
  "list-loaded-lib": "",
  "list-loaded-namespaces": "",
  "inspect-namespace": "",
  "pretty-print": "",
  "src-line-file": "",
  "cmd-line-doc": ""
},
"net-web": {
  "hostname-ip": "",
  "http-get": "",
  "http-post": "",
  "serve-pwd": "",
  "absolute-url": "",
  "parse-url": "",
  "url-encode": "",
  "html-escape": "",
  "base64": ""
},
"debugging-profiling": {
  "check-syntax": "",
  "lint": ""
}
}
