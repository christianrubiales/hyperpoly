{

"version": {
  "version-used": "<span style=\"color: gray\"><em>2.3</em></span>",
  "version": "$ ruby <span style=\"white-space: pre-wrap;\">--</span>version",
  "implicit-prologue": "<span style=\"color: gray\"><em>none</em></span>"
},
"grammar-execution": {
  "interpreter": "$ ruby foo.rb",
  "repl": "$ irb",
  "cmd-line-program": "$ ruby -e 'puts \"hi!\"'",
  "block-delimiters": "{}<br />do end",
  "statement-separator": "<span style=\"color: gray\"><em>newline or</em></span> ;<br /><br /><span style=\"color: gray\"><em>newlines not separators inside (), [], {}, <span style=\"white-space: pre-wrap;\">``</span>, '', \"\", or after binary operator or backslash: <span style=\"white-space: pre-wrap;\">\\</span></em></span>",
  "source-code-encoding": "<span style=\"color: gray\"><em>Ruby 2.0 source is UTF-8 by default</em></span><br /><br /><span style=\"color: gray\"># -*- coding: utf-8 -*-</span>",
  "eol-comment": "<span style=\"color: gray\"># comment</span>",
  "multiple-line-comment": "<span style=\"color: gray\">=begin<br />comment line<br />another line<br />=end</span>"
},
"var-expr": {
  "local-var": "x = 1<br />y, z = 2, 3",
  "file-scope-var": "<span style=\"color: gray\"><em>none</em></span>",
  "global-var": "$g = 1<br /><br />def incr_global<br /><span style=\"white-space: pre-wrap;\">  </span>$g += 1<br />end",
  "const": "<span style=\"color: gray\"># warning if capitalized<br /># identifier is reassigned</span><br />PI = 3.14",
  "assignment": "v = 1",
  "parallel-assignment": "x, y, z = 1, 2, 3<br /><br /><span style=\"color: gray\"># 3 is discarded:</span><br />x, y = 1, 2, 3<br /><br /><span style=\"color: gray\"># z set to nil:</span><br />x, y, z = 1, 2",
  "swap": "x, y = y, x",
  "compound-assignment": "+= -= *= /= <span style=\"color: gray\"><em>none</em></span> %= <span style=\"white-space: pre-wrap;\">**</span>=<br />+= *=<br />&amp;&amp;= <span style=\"white-space: pre-wrap;\">||</span>= ^=<br /><span style=\"white-space: pre-wrap;\">&lt;&lt;= &gt;&gt;= </span>&amp;= |= ^=",
  "incr-decr": "x = 1<br /><span style=\"color: gray\"># x and y not mutated:</span><br />y = x.succ<br />z = y.pred",
  "null": "nil",
  "null-test": "v == nil<br />v.nil?",
  "undef-var": "<span style=\"color: gray\"><em>raises</em></span> NameError",
  "conditional-expr": "x &gt; 0 ? x : -x"
},
"arithmetic-logic": {
  "true-false": "true false",
  "falsehoods": "false nil",
  "logical-op": "&amp;&amp; <span style=\"white-space: pre-wrap;\">||</span> !<br /><span style=\"color: gray\"><em>lower precedence:</em></span><br />and or not",
  "relational-op": "== != &gt; &lt; &gt;= &lt;=",
  "min-max": "[1, 2, 3].min<br />[1, 2, 3].max",
  "arith-op": "+ - * x.fdiv(y) / %",
  "int-div": "22 / 7",
  "divmod": "q, r = 22.divmod(7)",
  "int-div-zero": "<span style=\"color: gray\"><em>raises</em> ZeroDivisionError</span>",
  "float-div": "22.to_f / 7<br /><br />22.fdiv(7)",
  "float-div-zero": "<span style=\"color: gray\"><em>returns</em> -Infinity, NaN, <em>or</em> Infinity</span>",
  "power": "2 <span style=\"white-space: pre-wrap;\">**</span> 32",
  "sqrt": "include Math<br /><br />sqrt(2)",
  "sqrt-negative-one": "<span style=\"color: gray\">Math.sqrt(-1) raises Math::DomainError unless require 'complex' is in effect.</span><br /><br /><span style=\"color: gray\">(-1) ** 0.5 is (0+1.0i)</span>",
  "transcendental-func": "include Math<br /><br />exp log sin cos tan asin acos atan atan2",
  "transcendental-const": "include Math<br /><br />PI E",
  "float-truncation": "x.to_i<br />x.round<br />x.ceil<br />x.floor",
  "abs-val": "x.abs",
  "int-overflow": "<span style=\"color: gray\"><em>becomes arbitrary length integer of type</em> Bignum</span>",
  "float-overflow": "Infinity",
  "rational-construction": "22 / 7r<br />22r / 7",
  "rational-decomposition": "(22 / 7r).numerator<br />(22 / 7r).denominator",
  "complex-construction": "z = 1 + 1.414i",
  "complex-decomposition": "(1 + 3i).real<br />(1 + 3i).imag<br />(1 + 3i).arg<br />(1 + 3i).abs<br />(1 + 3i).conj",
  "random-num": "rand(100)<br />rand<br /><span style=\"color: gray\"><em>none</em></span>",
  "random-seed": "srand(17)<br /><br />seed = srand<br />srand(seed)",
  "bit-op": "<span style=\"white-space: pre-wrap;\">&lt;&lt; &gt;&gt; &amp; | ^ ~</span>",
  "binary-octal-hex-literals": "0b101010<br />052<br />0x2a",
  "radix": "42.to_s(7)<br />\"60\".to_i(7)"
},
"strings": {
  "str-type": "String",
  "str-literal": "\"don't say \\\"no\\\"\"<br />'don\\'t say \"no\"'<br />\"don't \" 'say \"no\"'",
  "newline-in-str-literal": "'first line<br />second line'<br /><br />\"first line<br />second line\"",
  "str-literal-esc": "<span style=\"color: gray\"><em>double quoted:</em></span><br />\\a \\b \\c<span style=\"color: gray\"><em>x</em></span> \\e \\f \\n \\r \\s \\t \\v \\x<span style=\"color: gray\"><em>hh</em></span> \\<span style=\"color: gray\"><em>ooo</em></span> \\u<span style=\"color: gray\"><em>hhhh</em></span> \\u{<span style=\"color: gray\"><em>hhhhh</em></span>}<br /><br /><span style=\"color: gray\"><em>single quoted:</em></span><br />\\' \\\\",
  "here-doc": "word = \"amet\"<br /><br />s = <span style=\"white-space: pre-wrap;\">&lt;&lt;</span>EOF<br />lorem ipsum<br />dolor sit #{word}<br />EOF",
  "var-interpolation": "count = 3<br />item = \"ball\"<br />puts \"#{count} #{item}s\"",
  "expr-interpolation": "\"1 + 1 = #{1 + 1}\"",
  "format-str": "\"lorem %s %d %f\" % [\"ipsum\", 13, 3.7]",
  "mutable-str": "s = \"bar\"<br />s2 = s<br /><span style=\"color: gray\"># sets s and s2 to \"baz\":</span><br />s[2] = \"z\"",
  "copy-str": "s = \"bar\"<br />s2 = s.clone<br /><span style=\"color: gray\"># s2 is not altered:</span><br />s[2] = \"z\"",
  "str-concat": "s = \"Hello, \"<br />s2 = s + \"World!\"<br /><br /><span style=\"color: gray\"># juxtaposition can be used to<br /># concatenate literals:</span><br />s2 = \"Hello, \" 'World!'",
  "str-replicate": "hbar = \"-\" * 80",
  "translate-case": "\"lorem\".upcase<br />\"LOREM\".downcase",
  "capitalize": "\"lorem\".capitalize<br /><span style=\"color: gray\"><em>none</em></span>",
  "trim": "\" lorem \".strip<br />\" lorem\".lstrip<br />\"lorem \".rstrip",
  "pad": "\"lorem\".ljust(10)<br />\"lorem\".rjust(10)<br />\"lorem\".center(10)",
  "num-to-str": "\"value: \" + 8.to_s",
  "str-to-num": "7 + \"12\".to_i<br />73.9 + \".037\".to_f<br /><br /><span style=\"color: gray\"># 12:</span><br />\"12A\".to_i<br /><span style=\"color: gray\"># 0:</span><br />\"A\".to_i",
  "str-join": "%w(do re mi fa).join(' ')<br /><br /><span style=\"color: gray\"># implicitly converted to strings:</span><br />[1, 2, 3].join(' ')",
  "split": "<span style=\"color: gray\"># [\"do\", \"re\", \"\", \"mi\"]:</span><br />\"do re<span style=\"white-space: pre-wrap;\">  </span>mi \".split(/ /)<br /><br /><span style=\"color: gray\"># [\"do\", \"re\", \"mi\"]:</span><br />\"do re<span style=\"white-space: pre-wrap;\">  </span>mi \".split",
  "split-in-two": "\"do re mi fa\".split(/\\s+/, 2)",
  "split-keep-delimiters": "\"do re mi fa\".split(/(\\s+)/)",
  "prefix-suffix-test": "'foobar'.start_with?('foo')<br />'foobar'.end_with?('bar')",
  "str-len": "\"lorem\".length<br />\"lorem\".size",
  "index-substr": "<span style=\"color: gray\"># returns nil if not found:</span><br />\"do re re\".index(\"re\")<br />\"do re re\".rindex(\"re\")",
  "extract-substr": "\"lorem ipsum\"[6, 5]<br />\"lorem ipsum\"[6<span style=\"white-space: pre-wrap;\">..</span>10]<br />\"lorem ipsum\"[6<span style=\"white-space: pre-wrap;\">...</span>11]",
  "bytes-type": "Array <span style=\"color: gray\"><em>of</em></span> Fixnum",
  "bytes-to-str": "a = \"\\u03bb\".bytes<br />s = a.pack(\"C*\").force_encoding('utf-8')",
  "str-to-bytes": "a = \"\\u03bb\".bytes",
  "lookup-char": "\"lorem ipsum\"[6]",
  "chr-ord": "65.chr('UTF-8')<br />\"A\".ord",
  "str-to-char-array": "\"abcd\".split(\"\")",
  "translate-char": "\"hello\".tr(\"a-z\", \"n-za-m\")",
  "delete-char": "\"disemvowel me\".delete(\"aeiou\")",
  "squeeze-char": "\"too<span style=\"white-space: pre-wrap;\">   </span>much<span style=\"white-space: pre-wrap;\">   </span>space\".squeeze(\" \")"
},
"regexes": {
  "regex-literal": "/lorem|ipsum/<br />%r(/etc/hosts)<br /><span style=\"color: gray\"># double quoted string escapes<br /># and #{} substitution can be used</span>",
  "ascii-char-class-abbrev": ".<span style=\"white-space: pre-wrap;\">   </span>[^\\n]<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>with</em> m <em>modifier matches all chars</em></span><br />\\d<span style=\"white-space: pre-wrap;\">  </span>[0-9]<br />\\D<span style=\"white-space: pre-wrap;\">  </span>[^0-9]<br />\\h<span style=\"white-space: pre-wrap;\">  </span>[0-9a-fA-F]<br />\\H<span style=\"white-space: pre-wrap;\">  </span>[^0-9a-fA-F]<br />\\s<span style=\"white-space: pre-wrap;\">  </span>[ \\t\\r\\n\\f]<br />\\S<span style=\"white-space: pre-wrap;\">  </span>[^ \\t\\r\\n\\f]<br />\\w<span style=\"white-space: pre-wrap;\">  </span>[A-Za-z0-9_]<br />\\W<span style=\"white-space: pre-wrap;\">  </span>[^A-Za-z0-9_]",
  "unicode-char-class-abbrev": ".<br />\\p{Digit}<br />\\p{^Digit}<br />\\p{Space}<br />\\p{^Space}<br />\\p{Word}<br />\\p{^Word}<br /><br /><span style=\"color: gray\"><em>POSIX character classes (e.g.</em> <span style=\"white-space: pre-wrap;\">[[:alpha:]]</span><em>), general category values (e.g.</em> \\p{L}, \\p{Lu}<em>), and script names (e.g.</em> \\p{Greek}) <em>also supported.</em></span>",
  "regex-anchors": "^<span style=\"white-space: pre-wrap;\">   </span><span style=\"color: gray\"><em>start of line</em></span><br />$<span style=\"white-space: pre-wrap;\">   </span><span style=\"color: gray\"><em>end of line</em></span><br />\\A<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>start of string</em></span><br />\\b<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>unicode-aware word boundary</em></span><br />\\B<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>unicode-aware non word boundary</em></span><br />\\z<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>end of string</em></span><br />\\Z<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>end of string, excluding final newline</em></span>",
  "regex-test": "if /1999/.match(s)<br /><span style=\"white-space: pre-wrap;\">  </span>puts \"party!\"<br />end",
  "case-insensitive-regex": "/lorem/i.match(\"Lorem\")",
  "regex-modifiers": "i<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>make case insensitive</em></span><br />o<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>interpolate #{} in literal once</em></span><br />m<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>change meaning of</em> .</span><br />x<span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>ignore whitespace outside char class</em></span>",
  "subst": "s = \"do re mi mi mi\"<br />s.gsub!(/mi/, \"ma\")",
  "match-prematch-postmatch": "m = /\\d{4}/.match(s)<br />if m<br /><span style=\"white-space: pre-wrap;\">  </span>match = m[0]<br /><span style=\"white-space: pre-wrap;\">  </span>prematch = m.pre_match<br /><span style=\"white-space: pre-wrap;\">  </span>postmatch = m.post_match<br />end",
  "group-capture": "rx = /(\\d{4})-(\\d{2})-(\\d{2})/<br />m = rx.match(\"2010-06-03\")<br />yr, mo, dy = m[1..3]",
  "named-group-capture": "rx = /^(?&lt;file&gt;.+)\\.(?&lt;suffix&gt;.+)$/<br />m = rx.match('foo.txt')<br /><br />m[\"file\"]<br />m[\"suffix\"]",
  "scan": "a = \"dolor sit amet\".scan(/\\w+/)",
  "backreference": "/(\\w+) \\1/.match(\"do do\")<br /><br />\"do re\".sub(/(\\w+) (\\w+)/, '\\2 \\1')",
  "recursive-regex": "/(?&lt;foo&gt;\\(([^()]*|\\g&lt;foo&gt;)*\\))/"
},
"dates-time": {
  "broken-down-datetime-type": "Time",
  "current-datetime": "t = Time.now<br />utc = Time.now.utc",
  "current-unix-epoch": "epoch = Time.now.to_i",
  "broken-down-datetime-to-unix-epoch": "epoch = t.to_i",
  "unix-epoch-to-broken-down-datetime": "t = Time.at(1304442000)",
  "fmt-datetime": "t.strftime(\"%Y-%m-%d %H:%M:%S\")",
  "parse-datetime": "require 'date'<br /><br />s = \"2011-05-03 10:00:00\"<br />fmt = \"%Y-%m-%d %H:%M:%S\"<br />t = DateTime.strptime(s, fmt).to_time",
  "parse-datetime-without-fmt": "require 'date'<br /><br />s = \"July 7, 1999\"<br />t = Date.parse(s).to_time",
  "date-parts": "t.year<br />t.month<br />t.day",
  "time-parts": "t.hour<br />t.min<br />t.sec",
  "build-datetime": "yr = 1999<br />mo = 9<br />dy = 10<br />hr = 23<br />mi = 30<br />ss = 0<br />t = Time.new(yr, mo, dy, hr, mi, ss)",
  "datetime-subtraction": "<span style=\"color: gray\">Float <em>containing time difference in seconds</em></span>",
  "add-duration": "require 'date/delta'<br /><br />s = \"10 min, 3 s\"<br />delta = Date::Delta.parse(s).in_secs<br />t = Time.now + delta",
  "local-tmz-determination": "<span style=\"color: gray\"><em>if no time zone is specified the local time zone is used</em></span>",
  "nonlocal-tmz": "<span style=\"color: gray\"># gem install tzinfo</span><br />require 'tzinfo'<br /><br />tmz = TZInfo::Timezone.get(\"Asia/Tokyo\")<br />jp_time = tmz.utc_to_local(Time.now.utc)",
  "tmz-info": "t.zone<br />t.utc_offset / 3600",
  "daylight-savings-test": "t.dst?",
  "microseconds": "t.usec"
},
"arrays": {
  "array-literal": "a = [1, 2, 3, 4]<br /><br /><span style=\"color: gray\"># a = ['do', 're', 'mi']</span><br />a = %w(do re mi)",
  "array-size": "a.size<br />a.length",
  "array-empty": "<span style=\"color: gray\"># NoMethodError if a is nil:</span><br />a.empty?",
  "array-lookup": "a[0]<br /><br /><span style=\"color: gray\"># returns last element:</span><br />a[-1]",
  "array-update": "a[0] = \"lorem\"",
  "array-out-of-bounds": "a = []<br /><span style=\"color: gray\"># evaluates as nil:</span><br />a[10]<br /><span style=\"color: gray\"># increases array size to 11:</span><br />a[10] = \"lorem\"",
  "array-element-index": "a = %w(x y y z)<br /><br /><span style=\"color: gray\"># return nil if not found:</span><br />a.index('y')<br />a.rindex('y')",
  "array-slice": "<span style=\"color: gray\"># select 3rd and 4th elements:</span><br />a[2..3]<br />a[2, 2]",
  "array-slice-to-end": "a[1..-1]",
  "array-back": "a = [6, 7, 8]<br />a.push(9)<br />a <span style=\"white-space: pre-wrap;\">&lt;&lt;</span> 9 <span style=\"color: gray\"># same as push</span><br />a.pop",
  "array-front": "a = [6, 7, 8]<br />a.unshift(5)<br />a.shift",
  "array-concatenation": "a = [1, 2, 3]<br />a2 = a + [4, 5, 6]<br />a.concat([4, 5, 6])",
  "replicate-array": "a = [nil] * 10<br />a = Array.new(10, nil)",
  "array-copy": "a = [1,2,[3,4]]<br />a2 = a<br />a3 = a.dup<br />a4 = Marshal.load(Marshal.dump(a))",
  "array-as-func-arg": "<span style=\"color: gray\"><em>parameter contains address copy</em></span>",
  "iterate-over-array": "[1, 2, 3].each { |i| puts i }",
  "indexed-array-iteration": "a = %w(do re mi fa)<br />a.each_with_index do |s, i|<br /><span style=\"white-space: pre-wrap;\">  </span>puts \"#{s} at index #{i}\"<br />end",
  "range-iteration": "(1..1_000_000).each do |i|<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"color: gray\"><em>code</em></span><br />end",
  "range-array": "a = (1..10).to_a",
  "array-reverse": "a = [1, 2, 3]<br /><br />a.reverse<br />a.reverse!",
  "array-sort": "a = %w(b A a B)<br /><br />a.sort<br />a.sort!<br />a.sort do |x, y|<br /><span style=\"white-space: pre-wrap;\">  </span>x.downcase &lt;=&gt; y.downcase<br />end",
  "array-dedupe": "a = [1, 2, 2, 3]<br /><br />a2 = a.uniq<br />a.uniq!",
  "membership": "a.include?(7)",
  "intersection": "[1, 2] &amp; [2 ,3, 4]",
  "union": "[1, 2] | [2, 3, 4]",
  "set-diff": "require 'set'<br /><br />[1, 2, 3] - [2]<br />Set[1, 2] ^ Set[2 ,3, 4]",
  "map": "[1, 2, 3].map { |o| o * o }",
  "filter": "[1, 2, 3].select { |o| o &gt; 1 }",
  "reduce": "[1, 2, 3].inject(0) { |m, o| m + o }",
  "universal-existential-test": "[1, 2, 3, 4].all? {|i| i.even? }<br />[1, 2, 3, 4].any? {|i| i.even? }",
  "shuffle-sample": "[1, 2, 3, 4].shuffle!<br />samp = [1, 2, 3, 4].sample(2)",
  "flatten": "a = [1, [2, [3, 4]]]<br />a2 = a.flatten(1)<br />a3 = a.flatten",
  "zip": "[1, 2, 3].zip([\"a\", \"b\", \"c\"])<br /><br /><span style=\"color: gray\"># shorter array padded with nil:</span><br />[1, 2, 3].zip([\"a\", \"b\"])"
},
"dictionaries": {
  "dict-literal": "d = {'t' =&gt; 1, 'f' =&gt; 0}<br /><br /><span style=\"color: gray\"># keys are symbols:</span><br />symbol_to_int = {t: 1, f: 0}",
  "dict-size": "d.size<br />d.length",
  "dict-lookup": "d['t']",
  "dict-update": "d['t'] = 2",
  "dict-missing-key": "d = {}<br /><span style=\"color: gray\"># nil:</span><br />d['lorem']<br /><span style=\"color: gray\"># adds key/value pair:</span><br />d['lorem'] = 'ipsum'",
  "dict-key-check": "d.key?('y')",
  "dict-delete": "d = {1 =&gt; true, 0 =&gt; false}<br />d.delete(1)",
  "dict-assoc-array": "a = [['a', 1], ['b', 2], ['c', 3]]<br />d = Hash[a]<br /><br />a = ['a', 1, 'b', 2, 'c', 3]<br />d = Hash[*a]",
  "dict-merge": "d1 = {'a' =&gt; 1, 'b' =&gt; 2}<br />d2 = {'b' =&gt; 3, 'c' =&gt; 4}<br />d1.merge!(d2)",
  "dict-invert": "to_num = {'t' =&gt; 1, 'f' =&gt; 0}<br />to_let = to_num.invert",
  "dict-iter": "d.each do |k,v|<br /><span style=\"white-space: pre-wrap;\">  </span>puts \"value at #{k} is #{v}\"<br />end",
  "dict-key-val": "d.keys<br />d.values",
  "dict-sort-values": "d.sort_by { |k, v| v }.each do |k, v|<br /><span style=\"white-space: pre-wrap;\">  </span>puts \"#{k}: #{v}\"<br />end",
  "dict-default-val": "counts = Hash.new(0)<br />counts['foo'] += 1<br /><br />factorial = Hash.new do |h,k|<br /><span style=\"white-space: pre-wrap;\">  </span>k &gt; 1 ? k * h[k-1] : 1<br />end"
},
"functions": {
  "def-func": "def add3(x1, x2, x3)<br /><span style=\"white-space: pre-wrap;\">  </span>x1 + x2 + x3<br />end<br /><br /><span style=\"color: gray\"># parens are optional and customarily<br /># omitted when defining functions<br /># with no parameters</span>",
  "invoke-func": "add3(1, 2, 3)<br /><br /><span style=\"color: gray\"># parens are optional:</span><br />add3 1, 2, 3",
  "missing-arg": "<span style=\"color: gray\"><em>raises</em> ArgumentError <em>if number of arguments doesn't match function arity</em></span>",
  "extra-arg": "<span style=\"color: gray\"><em>raises</em> ArgumentError <em>if number of arguments doesn't match function arity</em></span>",
  "default-arg": "def my_log(x, base=10)<br /><span style=\"white-space: pre-wrap;\">  </span>Math.log(x) / Math.log(base)<br />end<br /><br />my_log(42)<br />my_log(42, Math::E)",
  "variadic-func": "def first_and_last(*a)<br /><br /><span style=\"white-space: pre-wrap;\">  </span>if a.size &gt;= 1<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>puts \"first: #{a[0]}\"<br /><span style=\"white-space: pre-wrap;\">  </span>end<br /><br /><span style=\"white-space: pre-wrap;\">  </span>if a.size &gt;= 2<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>puts \"last: #{a[-1]}\"<br /><span style=\"white-space: pre-wrap;\">  </span>end<br />end",
  "apply-func": "a = [2, 3]<br /><br />add3(1, *a)<br /><br /><span style=\"color: gray\"># splat operator can be used multiple<br /># times and can appear before regular<br /># arguments</span>",
  "param-alias": "<span style=\"color: gray\"><em>none</em></span>",
  "named-param": "def fequals(x, y, eps: 0.01)<br /><span style=\"white-space: pre-wrap;\">  </span>(x - y).abs &lt; eps<br />end<br /><br />fequals(1.0, 1.001)<br />fequals(1.0, 1.001, eps: 0.1**10)",
  "retval": "<span style=\"color: gray\">return <em>arg or last expression evaluated</em></span>",
  "multiple-retval": "def first_and_second(a)<br /><span style=\"white-space: pre-wrap;\">  </span>return a[0], a[1]<br />end<br /><br />x, y = first_and_second([6, 7, 8])",
  "anonymous-func-literal": "square = lambda { |x| x * x }",
  "invoke-anonymous-func": "square.call(2)<br /><br /><span style=\"color: gray\"># alternative syntax:</span><br />square[2]",
  "func-as-val": "func = lambda { |*args| add3(*args) }",
  "private-state-func": "<span style=\"color: gray\"><em>none</em></span>",
  "closure": "def make_counter<br /><span style=\"white-space: pre-wrap;\">  </span>i = 0<br /><span style=\"white-space: pre-wrap;\">  </span>return lambda { i +=1; i }<br />end<br /><br />nays = make_counter<br />puts nays.call",
  "generator": "def make_counter<br /><span style=\"white-space: pre-wrap;\">  </span>return Fiber.new do<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>i = 0<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>while true<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>i += 1<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>Fiber.yield i<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>end<br /><span style=\"white-space: pre-wrap;\">  </span>end<br />end<br /><br />nays = make_counter<br />puts nays.resume",
  "decorator": "",
  "invoke-op-like-func": "3.*(7)<br /><br />a = ['foo', 'bar', 'baz']<br />a.[](2)"
},
"execution-control": {
  "if": "if n == 0<br /><span style=\"white-space: pre-wrap;\">  </span>puts \"no hits\"<br />elsif 1 == n<br /><span style=\"white-space: pre-wrap;\">  </span>puts \"one hit\"<br />else<br /><span style=\"white-space: pre-wrap;\">  </span>puts \"#{n} hits\"<br />end",
  "switch": "case n<br />when 0<br /><span style=\"white-space: pre-wrap;\">  </span>puts \"no hits\"<br />when 1<br /><span style=\"white-space: pre-wrap;\">  </span>puts \"one hit\"<br />else<br /><span style=\"white-space: pre-wrap;\">  </span>puts \"#{n} hits\"<br />end",
  "while": "while i &lt; 100 do<br /><span style=\"white-space: pre-wrap;\">  </span>i += 1<br />end",
  "for": "<span style=\"color: gray\"><em>none</em></span>",
  "break": "break",
  "continue": "next",
  "statement-modifiers": "puts \"positive\" if i &gt; 0<br />puts \"nonzero\" unless i == 0"
},
"exceptions": {
  "base-exc": "Exception<br /><br /><span style=\"color: gray\"><em>User-defined exceptions should subclass</em> StandardError.</span>",
  "predefined-exc": "Exception<br /><span style=\"white-space: pre-wrap;\">  </span>NoMemoryError<br /><span style=\"white-space: pre-wrap;\">  </span>ScriptError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>LoadError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>NotImplementedError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>SyntaxError<br /><span style=\"white-space: pre-wrap;\">  </span>SignalException<br /><span style=\"white-space: pre-wrap;\">  </span>StandardError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>ArgumentError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>IOError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>EOFError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>IndexError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>LocalJumpError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>NameError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>RangeError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>RegexpError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>RuntimeError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>SecurityError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>SocketError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>SystemCallError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>Errno::*<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>SystemStackError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>ThreadError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>TypeError<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>ZeroDivisionError<br /><span style=\"white-space: pre-wrap;\">  </span>SystemExit<br /><span style=\"white-space: pre-wrap;\">  </span>fatal",
  "raise-exc": "<span style=\"color: gray\"># raises RuntimeError</span><br />raise \"bad arg\"",
  "catch-all-handler": "<span style=\"color: gray\"># catches StandardError</span><br />begin<br /><span style=\"white-space: pre-wrap;\">  </span>risky<br />rescue<br /><span style=\"white-space: pre-wrap;\">  </span>print \"risky failed: \"<br /><span style=\"white-space: pre-wrap;\">  </span>puts $!.message<br />end",
  "re-raise-exc": "begin<br /><span style=\"white-space: pre-wrap;\">  </span>raise \"bam!\"<br />rescue<br /><span style=\"white-space: pre-wrap;\">  </span>puts \"re-raising…\"<br /><span style=\"white-space: pre-wrap;\">  </span>raise<br />end<br /><br /><span style=\"color: gray\"># if rescue clause raises different exception,<br /># original exception preserved at e.cause</span>",
  "last-exc-global": "<span style=\"color: gray\"><em>last exception:</em> $!</span><br /><span style=\"color: gray\"><em>backtrace array of exc.:</em> $@</span><br /><span style=\"color: gray\"><em>exit status of child:</em> $?</span>",
  "def-exc": "class Bam &lt; Exception<br /><span style=\"white-space: pre-wrap;\">  </span>def initialize<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>super(\"bam!\")<br /><span style=\"white-space: pre-wrap;\">  </span>end<br />end",
  "handle-exc": "begin<br /><span style=\"white-space: pre-wrap;\">  </span>raise Bam.new<br />rescue Bam =&gt; e<br /><span style=\"white-space: pre-wrap;\">  </span>puts e.message<br />end",
  "finally-block": "acquire_resource<br />begin<br /><span style=\"white-space: pre-wrap;\">  </span>risky<br />ensure<br /><span style=\"white-space: pre-wrap;\">  </span>release_resource<br />end"
},
"threads": {
  "start-thread": "thr = Thread.new { sleep 10 }",
  "wait-on-thread": "thr.join",
  "sleep": "sleep(0.5)",
  "timeout": "require 'timeout'<br /><br />begin<br /><span style=\"white-space: pre-wrap;\">  </span>Timeout.timeout(5) do<br /><span style=\"white-space: pre-wrap;\">  </span><span style=\"white-space: pre-wrap;\">  </span>might_take_too_long<br /><span style=\"white-space: pre-wrap;\">  </span>end<br />rescue Timeout::Error<br />end"
}
}
